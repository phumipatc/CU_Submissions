
Lab6_Again.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08006044  08006044  00016044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006198  08006198  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006198  08006198  00016198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061a0  080061a0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061a0  080061a0  000161a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061a4  080061a4  000161a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080061a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c34  20000074  0800621c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ca8  0800621c  00024ca8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012255  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028bb  00000000  00000000  000322f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00034bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  00035a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b12  00000000  00000000  000367e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe17  00000000  00000000  000392f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f4c8  00000000  00000000  00049109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d85d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f90  00000000  00000000  000d8624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800602c 	.word	0x0800602c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800602c 	.word	0x0800602c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <LED1_Thread>:
void Callback02(void *argument);
void Callback03(void *argument);
void Callback04(void *argument);

/* USER CODE BEGIN PFP */
void LED1_Thread(void *argument){
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
//	Lab 6-1
	while(1){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800059c:	2120      	movs	r1, #32
 800059e:	4803      	ldr	r0, [pc, #12]	; (80005ac <LED1_Thread+0x18>)
 80005a0:	f000 fea1 	bl	80012e6 <HAL_GPIO_TogglePin>
		osDelay(50);
 80005a4:	2032      	movs	r0, #50	; 0x32
 80005a6:	f002 f823 	bl	80025f0 <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005aa:	e7f7      	b.n	800059c <LED1_Thread+0x8>
 80005ac:	40020000 	.word	0x40020000

080005b0 <LED2_Thread>:
	}
}
void LED2_Thread(void *argument){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
//	Lab 6-1
	while(1){
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 80005b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <LED2_Thread+0x1c>)
 80005be:	f000 fe92 	bl	80012e6 <HAL_GPIO_TogglePin>
		osDelay(18);
 80005c2:	2012      	movs	r0, #18
 80005c4:	f002 f814 	bl	80025f0 <osDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 80005c8:	e7f6      	b.n	80005b8 <LED2_Thread+0x8>
 80005ca:	bf00      	nop
 80005cc:	40020400 	.word	0x40020400

080005d0 <LED3_Thread>:
	}
}
void LED3_Thread(void *argument){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
//	Lab 6-1
	while(1){
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80005d8:	2110      	movs	r1, #16
 80005da:	4803      	ldr	r0, [pc, #12]	; (80005e8 <LED3_Thread+0x18>)
 80005dc:	f000 fe83 	bl	80012e6 <HAL_GPIO_TogglePin>
		osDelay(128);
 80005e0:	2080      	movs	r0, #128	; 0x80
 80005e2:	f002 f805 	bl	80025f0 <osDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80005e6:	e7f7      	b.n	80005d8 <LED3_Thread+0x8>
 80005e8:	40020400 	.word	0x40020400

080005ec <LED4_Thread>:
	}
}
void LED4_Thread(void *argument){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
//	Lab 6-1
	while(1){
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80005f4:	2120      	movs	r1, #32
 80005f6:	4803      	ldr	r0, [pc, #12]	; (8000604 <LED4_Thread+0x18>)
 80005f8:	f000 fe75 	bl	80012e6 <HAL_GPIO_TogglePin>
		osDelay(64);
 80005fc:	2040      	movs	r0, #64	; 0x40
 80005fe:	f001 fff7 	bl	80025f0 <osDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000602:	e7f7      	b.n	80005f4 <LED4_Thread+0x8>
 8000604:	40020400 	.word	0x40020400

08000608 <UART0_Thread>:
	}
}
void UART0_Thread(void *argument){
 8000608:	b580      	push	{r7, lr}
 800060a:	b08c      	sub	sp, #48	; 0x30
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	int threadID = 0; // threadID is 0 for one thread and 1 for another
 8000610:	2300      	movs	r3, #0
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
	int idx = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	62fb      	str	r3, [r7, #44]	; 0x2c
	char buffer[32];
	while(1) {
//		osMutexWait(myMutex01Handle,osWaitForever);
		sprintf(buffer, "TID: %d %d\r\n", threadID, idx);
 8000618:	f107 0008 	add.w	r0, r7, #8
 800061c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800061e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000620:	4908      	ldr	r1, [pc, #32]	; (8000644 <UART0_Thread+0x3c>)
 8000622:	f005 f8a3 	bl	800576c <siprintf>
		idx ++;
 8000626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000628:	3301      	adds	r3, #1
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
//		HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
//		osMutexRelease(myMutex01Handle);
		osDelay(10);
 800062c:	200a      	movs	r0, #10
 800062e:	f001 ffdf 	bl	80025f0 <osDelay>
		osMessageQueuePut(myQueue01Handle, buffer, 0, 0);
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <UART0_Thread+0x40>)
 8000634:	6818      	ldr	r0, [r3, #0]
 8000636:	f107 0108 	add.w	r1, r7, #8
 800063a:	2300      	movs	r3, #0
 800063c:	2200      	movs	r2, #0
 800063e:	f002 f97d 	bl	800293c <osMessageQueuePut>
	while(1) {
 8000642:	e7e9      	b.n	8000618 <UART0_Thread+0x10>
 8000644:	08006098 	.word	0x08006098
 8000648:	200000d8 	.word	0x200000d8

0800064c <UART1_Thread>:
	}
}
void UART1_Thread(void *argument){
 800064c:	b580      	push	{r7, lr}
 800064e:	b08c      	sub	sp, #48	; 0x30
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	int threadID = 1; // threadID is 0 for one thread and 1 for another
 8000654:	2301      	movs	r3, #1
 8000656:	62bb      	str	r3, [r7, #40]	; 0x28
	int idx = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
	char buffer[32];
	while(1) {
//		osMutexWait(myMutex01Handle,osWaitForever);
		sprintf(buffer, "TID: %d %d\r\n", threadID, idx);
 800065c:	f107 0008 	add.w	r0, r7, #8
 8000660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000664:	4908      	ldr	r1, [pc, #32]	; (8000688 <UART1_Thread+0x3c>)
 8000666:	f005 f881 	bl	800576c <siprintf>
		idx ++;
 800066a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800066c:	3301      	adds	r3, #1
 800066e:	62fb      	str	r3, [r7, #44]	; 0x2c
//		HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
//		osMutexRelease(myMutex01Handle);
		osDelay(10);
 8000670:	200a      	movs	r0, #10
 8000672:	f001 ffbd 	bl	80025f0 <osDelay>
		osMessageQueuePut(myQueue01Handle, buffer, 0, 0);
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <UART1_Thread+0x40>)
 8000678:	6818      	ldr	r0, [r3, #0]
 800067a:	f107 0108 	add.w	r1, r7, #8
 800067e:	2300      	movs	r3, #0
 8000680:	2200      	movs	r2, #0
 8000682:	f002 f95b 	bl	800293c <osMessageQueuePut>
	while(1) {
 8000686:	e7e9      	b.n	800065c <UART1_Thread+0x10>
 8000688:	08006098 	.word	0x08006098
 800068c:	200000d8 	.word	0x200000d8

08000690 <Queue_Thread>:
	}
}
void Queue_Thread(void *argument){
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	while(1){
		char buffer[32];
		osStatus_t status = osMessageQueueGet(myQueue01Handle, buffer, NULL, 0);
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <Queue_Thread+0x40>)
 800069a:	6818      	ldr	r0, [r3, #0]
 800069c:	f107 010c 	add.w	r1, r7, #12
 80006a0:	2300      	movs	r3, #0
 80006a2:	2200      	movs	r2, #0
 80006a4:	f002 f9aa 	bl	80029fc <osMessageQueueGet>
 80006a8:	62f8      	str	r0, [r7, #44]	; 0x2c
		if(status == osOK){
 80006aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1f3      	bne.n	8000698 <Queue_Thread+0x8>
			HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff fd93 	bl	80001e0 <strlen>
 80006ba:	4603      	mov	r3, r0
 80006bc:	b29a      	uxth	r2, r3
 80006be:	f107 010c 	add.w	r1, r7, #12
 80006c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c6:	4803      	ldr	r0, [pc, #12]	; (80006d4 <Queue_Thread+0x44>)
 80006c8:	f001 fb0d 	bl	8001ce6 <HAL_UART_Transmit>
	while(1){
 80006cc:	e7e4      	b.n	8000698 <Queue_Thread+0x8>
 80006ce:	bf00      	nop
 80006d0:	200000d8 	.word	0x200000d8
 80006d4:	20000090 	.word	0x20000090

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006de:	f000 fb0d 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e2:	f000 f8a1 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e6:	f000 f931 	bl	800094c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006ea:	f000 f905 	bl	80008f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006ee:	f001 fea3 	bl	8002438 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 80006f2:	4833      	ldr	r0, [pc, #204]	; (80007c0 <main+0xe8>)
 80006f4:	f002 f828 	bl	8002748 <osMutexNew>
 80006f8:	4603      	mov	r3, r0
 80006fa:	4a32      	ldr	r2, [pc, #200]	; (80007c4 <main+0xec>)
 80006fc:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 80006fe:	4b32      	ldr	r3, [pc, #200]	; (80007c8 <main+0xf0>)
 8000700:	2200      	movs	r2, #0
 8000702:	2101      	movs	r1, #1
 8000704:	4831      	ldr	r0, [pc, #196]	; (80007cc <main+0xf4>)
 8000706:	f001 ffa3 	bl	8002650 <osTimerNew>
 800070a:	4603      	mov	r3, r0
 800070c:	4a30      	ldr	r2, [pc, #192]	; (80007d0 <main+0xf8>)
 800070e:	6013      	str	r3, [r2, #0]

  /* creation of myTimer02 */
  myTimer02Handle = osTimerNew(Callback02, osTimerPeriodic, NULL, &myTimer02_attributes);
 8000710:	4b30      	ldr	r3, [pc, #192]	; (80007d4 <main+0xfc>)
 8000712:	2200      	movs	r2, #0
 8000714:	2101      	movs	r1, #1
 8000716:	4830      	ldr	r0, [pc, #192]	; (80007d8 <main+0x100>)
 8000718:	f001 ff9a 	bl	8002650 <osTimerNew>
 800071c:	4603      	mov	r3, r0
 800071e:	4a2f      	ldr	r2, [pc, #188]	; (80007dc <main+0x104>)
 8000720:	6013      	str	r3, [r2, #0]

  /* creation of myTimer03 */
  myTimer03Handle = osTimerNew(Callback03, osTimerPeriodic, NULL, &myTimer03_attributes);
 8000722:	4b2f      	ldr	r3, [pc, #188]	; (80007e0 <main+0x108>)
 8000724:	2200      	movs	r2, #0
 8000726:	2101      	movs	r1, #1
 8000728:	482e      	ldr	r0, [pc, #184]	; (80007e4 <main+0x10c>)
 800072a:	f001 ff91 	bl	8002650 <osTimerNew>
 800072e:	4603      	mov	r3, r0
 8000730:	4a2d      	ldr	r2, [pc, #180]	; (80007e8 <main+0x110>)
 8000732:	6013      	str	r3, [r2, #0]

  /* creation of myTimer04 */
  myTimer04Handle = osTimerNew(Callback04, osTimerPeriodic, NULL, &myTimer04_attributes);
 8000734:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <main+0x114>)
 8000736:	2200      	movs	r2, #0
 8000738:	2101      	movs	r1, #1
 800073a:	482d      	ldr	r0, [pc, #180]	; (80007f0 <main+0x118>)
 800073c:	f001 ff88 	bl	8002650 <osTimerNew>
 8000740:	4603      	mov	r3, r0
 8000742:	4a2c      	ldr	r2, [pc, #176]	; (80007f4 <main+0x11c>)
 8000744:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, 32, &myQueue01_attributes);
 8000746:	4a2c      	ldr	r2, [pc, #176]	; (80007f8 <main+0x120>)
 8000748:	2120      	movs	r1, #32
 800074a:	2010      	movs	r0, #16
 800074c:	f002 f882 	bl	8002854 <osMessageQueueNew>
 8000750:	4603      	mov	r3, r0
 8000752:	4a2a      	ldr	r2, [pc, #168]	; (80007fc <main+0x124>)
 8000754:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000756:	4a2a      	ldr	r2, [pc, #168]	; (8000800 <main+0x128>)
 8000758:	2100      	movs	r1, #0
 800075a:	482a      	ldr	r0, [pc, #168]	; (8000804 <main+0x12c>)
 800075c:	f001 feb6 	bl	80024cc <osThreadNew>
 8000760:	4603      	mov	r3, r0
 8000762:	4a29      	ldr	r2, [pc, #164]	; (8000808 <main+0x130>)
 8000764:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
//  Lab 6-1
  osThreadId_t thread_led1 = osThreadNew(LED1_Thread, NULL, NULL);
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	4828      	ldr	r0, [pc, #160]	; (800080c <main+0x134>)
 800076c:	f001 feae 	bl	80024cc <osThreadNew>
 8000770:	61f8      	str	r0, [r7, #28]
  osThreadId_t thread_led2 = osThreadNew(LED2_Thread, NULL, NULL);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	4826      	ldr	r0, [pc, #152]	; (8000810 <main+0x138>)
 8000778:	f001 fea8 	bl	80024cc <osThreadNew>
 800077c:	61b8      	str	r0, [r7, #24]
  osThreadId_t thread_led3 = osThreadNew(LED3_Thread, NULL, NULL);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	4824      	ldr	r0, [pc, #144]	; (8000814 <main+0x13c>)
 8000784:	f001 fea2 	bl	80024cc <osThreadNew>
 8000788:	6178      	str	r0, [r7, #20]
  osThreadId_t thread_led4 = osThreadNew(LED4_Thread, NULL, NULL);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	4822      	ldr	r0, [pc, #136]	; (8000818 <main+0x140>)
 8000790:	f001 fe9c 	bl	80024cc <osThreadNew>
 8000794:	6138      	str	r0, [r7, #16]
//  osTimerStart(myTimer01Handle, 50);
//  osTimerStart(myTimer02Handle, 18);
//  osTimerStart(myTimer03Handle, 128);
//  osTimerStart(myTimer04Handle, 64);
//  Lab 6-3
  osThreadId_t thread_UART0 = osThreadNew(UART0_Thread, NULL, NULL);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	4820      	ldr	r0, [pc, #128]	; (800081c <main+0x144>)
 800079c:	f001 fe96 	bl	80024cc <osThreadNew>
 80007a0:	60f8      	str	r0, [r7, #12]
  osThreadId_t thread_UART1 = osThreadNew(UART1_Thread, NULL, NULL);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	481e      	ldr	r0, [pc, #120]	; (8000820 <main+0x148>)
 80007a8:	f001 fe90 	bl	80024cc <osThreadNew>
 80007ac:	60b8      	str	r0, [r7, #8]
//  Lab 6-4
  osThreadId_t thread_Queue = osThreadNew(Queue_Thread, NULL, NULL);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	481c      	ldr	r0, [pc, #112]	; (8000824 <main+0x14c>)
 80007b4:	f001 fe8a 	bl	80024cc <osThreadNew>
 80007b8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007ba:	f001 fe61 	bl	8002480 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007be:	e7fe      	b.n	80007be <main+0xe6>
 80007c0:	0800613c 	.word	0x0800613c
 80007c4:	2000033c 	.word	0x2000033c
 80007c8:	080060fc 	.word	0x080060fc
 80007cc:	08000a69 	.word	0x08000a69
 80007d0:	2000032c 	.word	0x2000032c
 80007d4:	0800610c 	.word	0x0800610c
 80007d8:	08000a85 	.word	0x08000a85
 80007dc:	20000330 	.word	0x20000330
 80007e0:	0800611c 	.word	0x0800611c
 80007e4:	08000aa5 	.word	0x08000aa5
 80007e8:	20000334 	.word	0x20000334
 80007ec:	0800612c 	.word	0x0800612c
 80007f0:	08000ac1 	.word	0x08000ac1
 80007f4:	20000338 	.word	0x20000338
 80007f8:	080060e4 	.word	0x080060e4
 80007fc:	200000d8 	.word	0x200000d8
 8000800:	080060c0 	.word	0x080060c0
 8000804:	08000a59 	.word	0x08000a59
 8000808:	200000d4 	.word	0x200000d4
 800080c:	08000595 	.word	0x08000595
 8000810:	080005b1 	.word	0x080005b1
 8000814:	080005d1 	.word	0x080005d1
 8000818:	080005ed 	.word	0x080005ed
 800081c:	08000609 	.word	0x08000609
 8000820:	0800064d 	.word	0x0800064d
 8000824:	08000691 	.word	0x08000691

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b094      	sub	sp, #80	; 0x50
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0320 	add.w	r3, r7, #32
 8000832:	2230      	movs	r2, #48	; 0x30
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f004 ff90 	bl	800575c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <SystemClock_Config+0xc8>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	4a26      	ldr	r2, [pc, #152]	; (80008f0 <SystemClock_Config+0xc8>)
 8000856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085a:	6413      	str	r3, [r2, #64]	; 0x40
 800085c:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <SystemClock_Config+0xc8>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <SystemClock_Config+0xcc>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a20      	ldr	r2, [pc, #128]	; (80008f4 <SystemClock_Config+0xcc>)
 8000872:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000876:	6013      	str	r3, [r2, #0]
 8000878:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <SystemClock_Config+0xcc>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000884:	2302      	movs	r3, #2
 8000886:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000888:	2301      	movs	r3, #1
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800088c:	2310      	movs	r3, #16
 800088e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000890:	2302      	movs	r3, #2
 8000892:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000894:	2300      	movs	r3, #0
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000898:	2308      	movs	r3, #8
 800089a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800089c:	2364      	movs	r3, #100	; 0x64
 800089e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008a4:	2304      	movs	r3, #4
 80008a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	f107 0320 	add.w	r3, r7, #32
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 fd35 	bl	800131c <HAL_RCC_OscConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b8:	f000 f910 	bl	8000adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008bc:	230f      	movs	r3, #15
 80008be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c0:	2302      	movs	r3, #2
 80008c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	2103      	movs	r1, #3
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 ff97 	bl	800180c <HAL_RCC_ClockConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008e4:	f000 f8fa 	bl	8000adc <Error_Handler>
  }
}
 80008e8:	bf00      	nop
 80008ea:	3750      	adds	r7, #80	; 0x50
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000

080008f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <MX_USART2_UART_Init+0x50>)
 8000900:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 8000930:	f001 f98c 	bl	8001c4c <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800093a:	f000 f8cf 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000090 	.word	0x20000090
 8000948:	40004400 	.word	0x40004400

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b38      	ldr	r3, [pc, #224]	; (8000a48 <MX_GPIO_Init+0xfc>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a37      	ldr	r2, [pc, #220]	; (8000a48 <MX_GPIO_Init+0xfc>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b35      	ldr	r3, [pc, #212]	; (8000a48 <MX_GPIO_Init+0xfc>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b31      	ldr	r3, [pc, #196]	; (8000a48 <MX_GPIO_Init+0xfc>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a30      	ldr	r2, [pc, #192]	; (8000a48 <MX_GPIO_Init+0xfc>)
 8000988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b2e      	ldr	r3, [pc, #184]	; (8000a48 <MX_GPIO_Init+0xfc>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <MX_GPIO_Init+0xfc>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a29      	ldr	r2, [pc, #164]	; (8000a48 <MX_GPIO_Init+0xfc>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <MX_GPIO_Init+0xfc>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <MX_GPIO_Init+0xfc>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a22      	ldr	r2, [pc, #136]	; (8000a48 <MX_GPIO_Init+0xfc>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <MX_GPIO_Init+0xfc>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2120      	movs	r1, #32
 80009d6:	481d      	ldr	r0, [pc, #116]	; (8000a4c <MX_GPIO_Init+0x100>)
 80009d8:	f000 fc6c 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80009e2:	481b      	ldr	r0, [pc, #108]	; (8000a50 <MX_GPIO_Init+0x104>)
 80009e4:	f000 fc66 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	4815      	ldr	r0, [pc, #84]	; (8000a54 <MX_GPIO_Init+0x108>)
 8000a00:	f000 fad4 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a04:	2320      	movs	r3, #32
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480c      	ldr	r0, [pc, #48]	; (8000a4c <MX_GPIO_Init+0x100>)
 8000a1c:	f000 fac6 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8000a20:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_GPIO_Init+0x104>)
 8000a3a:	f000 fab7 	bl	8000fac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a3e:	bf00      	nop
 8000a40:	3728      	adds	r7, #40	; 0x28
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	40020400 	.word	0x40020400
 8000a54:	40020800 	.word	0x40020800

08000a58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f001 fdc5 	bl	80025f0 <osDelay>
 8000a66:	e7fb      	b.n	8000a60 <StartDefaultTask+0x8>

08000a68 <Callback01>:
  /* USER CODE END 5 */
}

/* Callback01 function */
void Callback01(void *argument)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a70:	2120      	movs	r1, #32
 8000a72:	4803      	ldr	r0, [pc, #12]	; (8000a80 <Callback01+0x18>)
 8000a74:	f000 fc37 	bl	80012e6 <HAL_GPIO_TogglePin>
  /* USER CODE END Callback01 */
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40020000 	.word	0x40020000

08000a84 <Callback02>:

/* Callback02 function */
void Callback02(void *argument)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback02 */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 8000a8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a90:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <Callback02+0x1c>)
 8000a92:	f000 fc28 	bl	80012e6 <HAL_GPIO_TogglePin>
  /* USER CODE END Callback02 */
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40020400 	.word	0x40020400

08000aa4 <Callback03>:

/* Callback03 function */
void Callback03(void *argument)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback03 */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000aac:	2110      	movs	r1, #16
 8000aae:	4803      	ldr	r0, [pc, #12]	; (8000abc <Callback03+0x18>)
 8000ab0:	f000 fc19 	bl	80012e6 <HAL_GPIO_TogglePin>
  /* USER CODE END Callback03 */
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40020400 	.word	0x40020400

08000ac0 <Callback04>:

/* Callback04 function */
void Callback04(void *argument)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback04 */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000ac8:	2120      	movs	r1, #32
 8000aca:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <Callback04+0x18>)
 8000acc:	f000 fc0b 	bl	80012e6 <HAL_GPIO_TogglePin>
  /* USER CODE END Callback04 */
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40020400 	.word	0x40020400

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <Error_Handler+0x8>
	...

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_MspInit+0x54>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a11      	ldr	r2, [pc, #68]	; (8000b3c <HAL_MspInit+0x54>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <HAL_MspInit+0x54>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <HAL_MspInit+0x54>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <HAL_MspInit+0x54>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_MspInit+0x54>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	210f      	movs	r1, #15
 8000b2a:	f06f 0001 	mvn.w	r0, #1
 8000b2e:	f000 fa14 	bl	8000f5a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_UART_MspInit+0x84>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12b      	bne.n	8000bba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b9a:	230c      	movs	r3, #12
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000baa:	2307      	movs	r3, #7
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_UART_MspInit+0x8c>)
 8000bb6:	f000 f9f9 	bl	8000fac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	; 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40004400 	.word	0x40004400
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c00:	f000 f8ce 	bl	8000da0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c04:	f003 fc50 	bl	80044a8 <xTaskGetSchedulerState>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d001      	beq.n	8000c12 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c0e:	f004 faf3 	bl	80051f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c48:	f004 fd50 	bl	80056ec <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <_sbrk+0x64>)
 8000c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20020000 	.word	0x20020000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	20000340 	.word	0x20000340
 8000c80:	20004ca8 	.word	0x20004ca8

08000c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cae:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb0:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc4:	4c0b      	ldr	r4, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cd2:	f7ff ffd7 	bl	8000c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f004 fd0f 	bl	80056f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cda:	f7ff fcfd 	bl	80006d8 <main>
  bx  lr    
 8000cde:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ce0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000cec:	080061a8 	.word	0x080061a8
  ldr r2, =_sbss
 8000cf0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cf4:	20004ca8 	.word	0x20004ca8

08000cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC_IRQHandler>
	...

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <HAL_Init+0x40>)
 8000d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_Init+0x40>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HAL_Init+0x40>)
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f90d 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2a:	200f      	movs	r0, #15
 8000d2c:	f000 f808 	bl	8000d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d30:	f7ff feda 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x54>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_InitTick+0x58>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f917 	bl	8000f92 <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00e      	b.n	8000d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d80a      	bhi.n	8000d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 f8ed 	bl	8000f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <HAL_InitTick+0x5c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000004 	.word	0x20000004

08000da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x20>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_IncTick+0x24>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <HAL_IncTick+0x24>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000344 	.word	0x20000344

08000dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000344 	.word	0x20000344

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e12:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60d3      	str	r3, [r2, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	490c      	ldr	r1, [pc, #48]	; (8000e90 <__NVIC_SetPriority+0x4c>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6c:	e00a      	b.n	8000e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4908      	ldr	r1, [pc, #32]	; (8000e94 <__NVIC_SetPriority+0x50>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	3b04      	subs	r3, #4
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	440b      	add	r3, r1
 8000e82:	761a      	strb	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f1c3 0307 	rsb	r3, r3, #7
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	bf28      	it	cs
 8000eb6:	2304      	movcs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d902      	bls.n	8000ec8 <NVIC_EncodePriority+0x30>
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	e000      	b.n	8000eca <NVIC_EncodePriority+0x32>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43d9      	mvns	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	4313      	orrs	r3, r2
         );
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	; 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f10:	d301      	bcc.n	8000f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00f      	b.n	8000f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <SysTick_Config+0x40>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1e:	210f      	movs	r1, #15
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f7ff ff8e 	bl	8000e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <SysTick_Config+0x40>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <SysTick_Config+0x40>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	e000e010 	.word	0xe000e010

08000f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff47 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6c:	f7ff ff5c 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	6978      	ldr	r0, [r7, #20]
 8000f78:	f7ff ff8e 	bl	8000e98 <NVIC_EncodePriority>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff5d 	bl	8000e44 <__NVIC_SetPriority>
}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffb0 	bl	8000f00 <SysTick_Config>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	; 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
 8000fc6:	e159      	b.n	800127c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fc8:	2201      	movs	r2, #1
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	f040 8148 	bne.w	8001276 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d005      	beq.n	8000ffe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d130      	bne.n	8001060 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2203      	movs	r2, #3
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001034:	2201      	movs	r2, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	091b      	lsrs	r3, r3, #4
 800104a:	f003 0201 	and.w	r2, r3, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b03      	cmp	r3, #3
 800106a:	d017      	beq.n	800109c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d123      	bne.n	80010f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	08da      	lsrs	r2, r3, #3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3208      	adds	r2, #8
 80010b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	220f      	movs	r2, #15
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	08da      	lsrs	r2, r3, #3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3208      	adds	r2, #8
 80010ea:	69b9      	ldr	r1, [r7, #24]
 80010ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0203 	and.w	r2, r3, #3
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 80a2 	beq.w	8001276 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b57      	ldr	r3, [pc, #348]	; (8001294 <HAL_GPIO_Init+0x2e8>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	4a56      	ldr	r2, [pc, #344]	; (8001294 <HAL_GPIO_Init+0x2e8>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001140:	6453      	str	r3, [r2, #68]	; 0x44
 8001142:	4b54      	ldr	r3, [pc, #336]	; (8001294 <HAL_GPIO_Init+0x2e8>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800114e:	4a52      	ldr	r2, [pc, #328]	; (8001298 <HAL_GPIO_Init+0x2ec>)
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	3302      	adds	r3, #2
 8001156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	220f      	movs	r2, #15
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a49      	ldr	r2, [pc, #292]	; (800129c <HAL_GPIO_Init+0x2f0>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d019      	beq.n	80011ae <HAL_GPIO_Init+0x202>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a48      	ldr	r2, [pc, #288]	; (80012a0 <HAL_GPIO_Init+0x2f4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d013      	beq.n	80011aa <HAL_GPIO_Init+0x1fe>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a47      	ldr	r2, [pc, #284]	; (80012a4 <HAL_GPIO_Init+0x2f8>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d00d      	beq.n	80011a6 <HAL_GPIO_Init+0x1fa>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a46      	ldr	r2, [pc, #280]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d007      	beq.n	80011a2 <HAL_GPIO_Init+0x1f6>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a45      	ldr	r2, [pc, #276]	; (80012ac <HAL_GPIO_Init+0x300>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d101      	bne.n	800119e <HAL_GPIO_Init+0x1f2>
 800119a:	2304      	movs	r3, #4
 800119c:	e008      	b.n	80011b0 <HAL_GPIO_Init+0x204>
 800119e:	2307      	movs	r3, #7
 80011a0:	e006      	b.n	80011b0 <HAL_GPIO_Init+0x204>
 80011a2:	2303      	movs	r3, #3
 80011a4:	e004      	b.n	80011b0 <HAL_GPIO_Init+0x204>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e002      	b.n	80011b0 <HAL_GPIO_Init+0x204>
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <HAL_GPIO_Init+0x204>
 80011ae:	2300      	movs	r3, #0
 80011b0:	69fa      	ldr	r2, [r7, #28]
 80011b2:	f002 0203 	and.w	r2, r2, #3
 80011b6:	0092      	lsls	r2, r2, #2
 80011b8:	4093      	lsls	r3, r2
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011c0:	4935      	ldr	r1, [pc, #212]	; (8001298 <HAL_GPIO_Init+0x2ec>)
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	3302      	adds	r3, #2
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ce:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <HAL_GPIO_Init+0x304>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011f2:	4a2f      	ldr	r2, [pc, #188]	; (80012b0 <HAL_GPIO_Init+0x304>)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f8:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <HAL_GPIO_Init+0x304>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800121c:	4a24      	ldr	r2, [pc, #144]	; (80012b0 <HAL_GPIO_Init+0x304>)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001222:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <HAL_GPIO_Init+0x304>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001246:	4a1a      	ldr	r2, [pc, #104]	; (80012b0 <HAL_GPIO_Init+0x304>)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <HAL_GPIO_Init+0x304>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001270:	4a0f      	ldr	r2, [pc, #60]	; (80012b0 <HAL_GPIO_Init+0x304>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3301      	adds	r3, #1
 800127a:	61fb      	str	r3, [r7, #28]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	2b0f      	cmp	r3, #15
 8001280:	f67f aea2 	bls.w	8000fc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3724      	adds	r7, #36	; 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800
 8001298:	40013800 	.word	0x40013800
 800129c:	40020000 	.word	0x40020000
 80012a0:	40020400 	.word	0x40020400
 80012a4:	40020800 	.word	0x40020800
 80012a8:	40020c00 	.word	0x40020c00
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40013c00 	.word	0x40013c00

080012b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
 80012c0:	4613      	mov	r3, r2
 80012c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c4:	787b      	ldrb	r3, [r7, #1]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012d0:	e003      	b.n	80012da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	041a      	lsls	r2, r3, #16
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	619a      	str	r2, [r3, #24]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b085      	sub	sp, #20
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	460b      	mov	r3, r1
 80012f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012f8:	887a      	ldrh	r2, [r7, #2]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4013      	ands	r3, r2
 80012fe:	041a      	lsls	r2, r3, #16
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43d9      	mvns	r1, r3
 8001304:	887b      	ldrh	r3, [r7, #2]
 8001306:	400b      	ands	r3, r1
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	619a      	str	r2, [r3, #24]
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e267      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	2b00      	cmp	r3, #0
 8001338:	d075      	beq.n	8001426 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800133a:	4b88      	ldr	r3, [pc, #544]	; (800155c <HAL_RCC_OscConfig+0x240>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 030c 	and.w	r3, r3, #12
 8001342:	2b04      	cmp	r3, #4
 8001344:	d00c      	beq.n	8001360 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001346:	4b85      	ldr	r3, [pc, #532]	; (800155c <HAL_RCC_OscConfig+0x240>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800134e:	2b08      	cmp	r3, #8
 8001350:	d112      	bne.n	8001378 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001352:	4b82      	ldr	r3, [pc, #520]	; (800155c <HAL_RCC_OscConfig+0x240>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800135a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800135e:	d10b      	bne.n	8001378 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001360:	4b7e      	ldr	r3, [pc, #504]	; (800155c <HAL_RCC_OscConfig+0x240>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d05b      	beq.n	8001424 <HAL_RCC_OscConfig+0x108>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d157      	bne.n	8001424 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e242      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001380:	d106      	bne.n	8001390 <HAL_RCC_OscConfig+0x74>
 8001382:	4b76      	ldr	r3, [pc, #472]	; (800155c <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a75      	ldr	r2, [pc, #468]	; (800155c <HAL_RCC_OscConfig+0x240>)
 8001388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	e01d      	b.n	80013cc <HAL_RCC_OscConfig+0xb0>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001398:	d10c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x98>
 800139a:	4b70      	ldr	r3, [pc, #448]	; (800155c <HAL_RCC_OscConfig+0x240>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a6f      	ldr	r2, [pc, #444]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80013a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	4b6d      	ldr	r3, [pc, #436]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a6c      	ldr	r2, [pc, #432]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80013ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	e00b      	b.n	80013cc <HAL_RCC_OscConfig+0xb0>
 80013b4:	4b69      	ldr	r3, [pc, #420]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a68      	ldr	r2, [pc, #416]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80013ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	4b66      	ldr	r3, [pc, #408]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a65      	ldr	r2, [pc, #404]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80013c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d013      	beq.n	80013fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fcf8 	bl	8000dc8 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fcf4 	bl	8000dc8 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	; 0x64
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e207      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ee:	4b5b      	ldr	r3, [pc, #364]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0xc0>
 80013fa:	e014      	b.n	8001426 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fce4 	bl	8000dc8 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001404:	f7ff fce0 	bl	8000dc8 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	; 0x64
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e1f3      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001416:	4b51      	ldr	r3, [pc, #324]	; (800155c <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0xe8>
 8001422:	e000      	b.n	8001426 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d063      	beq.n	80014fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001432:	4b4a      	ldr	r3, [pc, #296]	; (800155c <HAL_RCC_OscConfig+0x240>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00b      	beq.n	8001456 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800143e:	4b47      	ldr	r3, [pc, #284]	; (800155c <HAL_RCC_OscConfig+0x240>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001446:	2b08      	cmp	r3, #8
 8001448:	d11c      	bne.n	8001484 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800144a:	4b44      	ldr	r3, [pc, #272]	; (800155c <HAL_RCC_OscConfig+0x240>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d116      	bne.n	8001484 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001456:	4b41      	ldr	r3, [pc, #260]	; (800155c <HAL_RCC_OscConfig+0x240>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d005      	beq.n	800146e <HAL_RCC_OscConfig+0x152>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d001      	beq.n	800146e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e1c7      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146e:	4b3b      	ldr	r3, [pc, #236]	; (800155c <HAL_RCC_OscConfig+0x240>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4937      	ldr	r1, [pc, #220]	; (800155c <HAL_RCC_OscConfig+0x240>)
 800147e:	4313      	orrs	r3, r2
 8001480:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001482:	e03a      	b.n	80014fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d020      	beq.n	80014ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800148c:	4b34      	ldr	r3, [pc, #208]	; (8001560 <HAL_RCC_OscConfig+0x244>)
 800148e:	2201      	movs	r2, #1
 8001490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001492:	f7ff fc99 	bl	8000dc8 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800149a:	f7ff fc95 	bl	8000dc8 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e1a8      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ac:	4b2b      	ldr	r3, [pc, #172]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0f0      	beq.n	800149a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b8:	4b28      	ldr	r3, [pc, #160]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	4925      	ldr	r1, [pc, #148]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	600b      	str	r3, [r1, #0]
 80014cc:	e015      	b.n	80014fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ce:	4b24      	ldr	r3, [pc, #144]	; (8001560 <HAL_RCC_OscConfig+0x244>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d4:	f7ff fc78 	bl	8000dc8 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014dc:	f7ff fc74 	bl	8000dc8 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e187      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ee:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	2b00      	cmp	r3, #0
 8001504:	d036      	beq.n	8001574 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d016      	beq.n	800153c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_RCC_OscConfig+0x248>)
 8001510:	2201      	movs	r2, #1
 8001512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001514:	f7ff fc58 	bl	8000dc8 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800151c:	f7ff fc54 	bl	8000dc8 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e167      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_RCC_OscConfig+0x240>)
 8001530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0x200>
 800153a:	e01b      	b.n	8001574 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_RCC_OscConfig+0x248>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001542:	f7ff fc41 	bl	8000dc8 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001548:	e00e      	b.n	8001568 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800154a:	f7ff fc3d 	bl	8000dc8 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d907      	bls.n	8001568 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e150      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
 800155c:	40023800 	.word	0x40023800
 8001560:	42470000 	.word	0x42470000
 8001564:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001568:	4b88      	ldr	r3, [pc, #544]	; (800178c <HAL_RCC_OscConfig+0x470>)
 800156a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1ea      	bne.n	800154a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 8097 	beq.w	80016b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001586:	4b81      	ldr	r3, [pc, #516]	; (800178c <HAL_RCC_OscConfig+0x470>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10f      	bne.n	80015b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	4b7d      	ldr	r3, [pc, #500]	; (800178c <HAL_RCC_OscConfig+0x470>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a7c      	ldr	r2, [pc, #496]	; (800178c <HAL_RCC_OscConfig+0x470>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b7a      	ldr	r3, [pc, #488]	; (800178c <HAL_RCC_OscConfig+0x470>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ae:	2301      	movs	r3, #1
 80015b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b2:	4b77      	ldr	r3, [pc, #476]	; (8001790 <HAL_RCC_OscConfig+0x474>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d118      	bne.n	80015f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015be:	4b74      	ldr	r3, [pc, #464]	; (8001790 <HAL_RCC_OscConfig+0x474>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a73      	ldr	r2, [pc, #460]	; (8001790 <HAL_RCC_OscConfig+0x474>)
 80015c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fbfd 	bl	8000dc8 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d2:	f7ff fbf9 	bl	8000dc8 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e10c      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e4:	4b6a      	ldr	r3, [pc, #424]	; (8001790 <HAL_RCC_OscConfig+0x474>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f0      	beq.n	80015d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d106      	bne.n	8001606 <HAL_RCC_OscConfig+0x2ea>
 80015f8:	4b64      	ldr	r3, [pc, #400]	; (800178c <HAL_RCC_OscConfig+0x470>)
 80015fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fc:	4a63      	ldr	r2, [pc, #396]	; (800178c <HAL_RCC_OscConfig+0x470>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6713      	str	r3, [r2, #112]	; 0x70
 8001604:	e01c      	b.n	8001640 <HAL_RCC_OscConfig+0x324>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2b05      	cmp	r3, #5
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x30c>
 800160e:	4b5f      	ldr	r3, [pc, #380]	; (800178c <HAL_RCC_OscConfig+0x470>)
 8001610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001612:	4a5e      	ldr	r2, [pc, #376]	; (800178c <HAL_RCC_OscConfig+0x470>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	6713      	str	r3, [r2, #112]	; 0x70
 800161a:	4b5c      	ldr	r3, [pc, #368]	; (800178c <HAL_RCC_OscConfig+0x470>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161e:	4a5b      	ldr	r2, [pc, #364]	; (800178c <HAL_RCC_OscConfig+0x470>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6713      	str	r3, [r2, #112]	; 0x70
 8001626:	e00b      	b.n	8001640 <HAL_RCC_OscConfig+0x324>
 8001628:	4b58      	ldr	r3, [pc, #352]	; (800178c <HAL_RCC_OscConfig+0x470>)
 800162a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162c:	4a57      	ldr	r2, [pc, #348]	; (800178c <HAL_RCC_OscConfig+0x470>)
 800162e:	f023 0301 	bic.w	r3, r3, #1
 8001632:	6713      	str	r3, [r2, #112]	; 0x70
 8001634:	4b55      	ldr	r3, [pc, #340]	; (800178c <HAL_RCC_OscConfig+0x470>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001638:	4a54      	ldr	r2, [pc, #336]	; (800178c <HAL_RCC_OscConfig+0x470>)
 800163a:	f023 0304 	bic.w	r3, r3, #4
 800163e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d015      	beq.n	8001674 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001648:	f7ff fbbe 	bl	8000dc8 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164e:	e00a      	b.n	8001666 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001650:	f7ff fbba 	bl	8000dc8 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f241 3288 	movw	r2, #5000	; 0x1388
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e0cb      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001666:	4b49      	ldr	r3, [pc, #292]	; (800178c <HAL_RCC_OscConfig+0x470>)
 8001668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0ee      	beq.n	8001650 <HAL_RCC_OscConfig+0x334>
 8001672:	e014      	b.n	800169e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001674:	f7ff fba8 	bl	8000dc8 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167a:	e00a      	b.n	8001692 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800167c:	f7ff fba4 	bl	8000dc8 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	; 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e0b5      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001692:	4b3e      	ldr	r3, [pc, #248]	; (800178c <HAL_RCC_OscConfig+0x470>)
 8001694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1ee      	bne.n	800167c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800169e:	7dfb      	ldrb	r3, [r7, #23]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d105      	bne.n	80016b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a4:	4b39      	ldr	r3, [pc, #228]	; (800178c <HAL_RCC_OscConfig+0x470>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	4a38      	ldr	r2, [pc, #224]	; (800178c <HAL_RCC_OscConfig+0x470>)
 80016aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 80a1 	beq.w	80017fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016ba:	4b34      	ldr	r3, [pc, #208]	; (800178c <HAL_RCC_OscConfig+0x470>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	d05c      	beq.n	8001780 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d141      	bne.n	8001752 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ce:	4b31      	ldr	r3, [pc, #196]	; (8001794 <HAL_RCC_OscConfig+0x478>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fb78 	bl	8000dc8 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016dc:	f7ff fb74 	bl	8000dc8 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e087      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ee:	4b27      	ldr	r3, [pc, #156]	; (800178c <HAL_RCC_OscConfig+0x470>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69da      	ldr	r2, [r3, #28]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	019b      	lsls	r3, r3, #6
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	085b      	lsrs	r3, r3, #1
 8001712:	3b01      	subs	r3, #1
 8001714:	041b      	lsls	r3, r3, #16
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	061b      	lsls	r3, r3, #24
 800171e:	491b      	ldr	r1, [pc, #108]	; (800178c <HAL_RCC_OscConfig+0x470>)
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_RCC_OscConfig+0x478>)
 8001726:	2201      	movs	r2, #1
 8001728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172a:	f7ff fb4d 	bl	8000dc8 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001732:	f7ff fb49 	bl	8000dc8 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e05c      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <HAL_RCC_OscConfig+0x470>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x416>
 8001750:	e054      	b.n	80017fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_RCC_OscConfig+0x478>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff fb36 	bl	8000dc8 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001760:	f7ff fb32 	bl	8000dc8 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e045      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_RCC_OscConfig+0x470>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0x444>
 800177e:	e03d      	b.n	80017fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d107      	bne.n	8001798 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e038      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
 800178c:	40023800 	.word	0x40023800
 8001790:	40007000 	.word	0x40007000
 8001794:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <HAL_RCC_OscConfig+0x4ec>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d028      	beq.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d121      	bne.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017be:	429a      	cmp	r2, r3
 80017c0:	d11a      	bne.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017c8:	4013      	ands	r3, r2
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d111      	bne.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017de:	085b      	lsrs	r3, r3, #1
 80017e0:	3b01      	subs	r3, #1
 80017e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d107      	bne.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800

0800180c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0cc      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001820:	4b68      	ldr	r3, [pc, #416]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d90c      	bls.n	8001848 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182e:	4b65      	ldr	r3, [pc, #404]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001836:	4b63      	ldr	r3, [pc, #396]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d001      	beq.n	8001848 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e0b8      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d020      	beq.n	8001896 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001860:	4b59      	ldr	r3, [pc, #356]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	4a58      	ldr	r2, [pc, #352]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800186a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001878:	4b53      	ldr	r3, [pc, #332]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	4a52      	ldr	r2, [pc, #328]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001882:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001884:	4b50      	ldr	r3, [pc, #320]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	494d      	ldr	r1, [pc, #308]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	4313      	orrs	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d044      	beq.n	800192c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d107      	bne.n	80018ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018aa:	4b47      	ldr	r3, [pc, #284]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d119      	bne.n	80018ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e07f      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d003      	beq.n	80018ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d107      	bne.n	80018da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ca:	4b3f      	ldr	r3, [pc, #252]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d109      	bne.n	80018ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e06f      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018da:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e067      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ea:	4b37      	ldr	r3, [pc, #220]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f023 0203 	bic.w	r2, r3, #3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	4934      	ldr	r1, [pc, #208]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018fc:	f7ff fa64 	bl	8000dc8 <HAL_GetTick>
 8001900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001902:	e00a      	b.n	800191a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001904:	f7ff fa60 	bl	8000dc8 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e04f      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191a:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 020c 	and.w	r2, r3, #12
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	429a      	cmp	r2, r3
 800192a:	d1eb      	bne.n	8001904 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800192c:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d20c      	bcs.n	8001954 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e032      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4916      	ldr	r1, [pc, #88]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	4313      	orrs	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d009      	beq.n	8001992 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	490e      	ldr	r1, [pc, #56]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001992:	f000 f821 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 8001996:	4602      	mov	r2, r0
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	490a      	ldr	r1, [pc, #40]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 80019a4:	5ccb      	ldrb	r3, [r1, r3]
 80019a6:	fa22 f303 	lsr.w	r3, r2, r3
 80019aa:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_RCC_ClockConfig+0x1c8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff f9c4 	bl	8000d40 <HAL_InitTick>

  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023c00 	.word	0x40023c00
 80019c8:	40023800 	.word	0x40023800
 80019cc:	0800614c 	.word	0x0800614c
 80019d0:	20000000 	.word	0x20000000
 80019d4:	20000004 	.word	0x20000004

080019d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019dc:	b094      	sub	sp, #80	; 0x50
 80019de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	647b      	str	r3, [r7, #68]	; 0x44
 80019e4:	2300      	movs	r3, #0
 80019e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019e8:	2300      	movs	r3, #0
 80019ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019f0:	4b79      	ldr	r3, [pc, #484]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 030c 	and.w	r3, r3, #12
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d00d      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0x40>
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	f200 80e1 	bhi.w	8001bc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d002      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0x34>
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d003      	beq.n	8001a12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a0a:	e0db      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a0c:	4b73      	ldr	r3, [pc, #460]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x204>)
 8001a0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a10:	e0db      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a12:	4b73      	ldr	r3, [pc, #460]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a16:	e0d8      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a18:	4b6f      	ldr	r3, [pc, #444]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a22:	4b6d      	ldr	r3, [pc, #436]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d063      	beq.n	8001af6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2e:	4b6a      	ldr	r3, [pc, #424]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	099b      	lsrs	r3, r3, #6
 8001a34:	2200      	movs	r2, #0
 8001a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a40:	633b      	str	r3, [r7, #48]	; 0x30
 8001a42:	2300      	movs	r3, #0
 8001a44:	637b      	str	r3, [r7, #52]	; 0x34
 8001a46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a4a:	4622      	mov	r2, r4
 8001a4c:	462b      	mov	r3, r5
 8001a4e:	f04f 0000 	mov.w	r0, #0
 8001a52:	f04f 0100 	mov.w	r1, #0
 8001a56:	0159      	lsls	r1, r3, #5
 8001a58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a5c:	0150      	lsls	r0, r2, #5
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4621      	mov	r1, r4
 8001a64:	1a51      	subs	r1, r2, r1
 8001a66:	6139      	str	r1, [r7, #16]
 8001a68:	4629      	mov	r1, r5
 8001a6a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a7c:	4659      	mov	r1, fp
 8001a7e:	018b      	lsls	r3, r1, #6
 8001a80:	4651      	mov	r1, sl
 8001a82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a86:	4651      	mov	r1, sl
 8001a88:	018a      	lsls	r2, r1, #6
 8001a8a:	4651      	mov	r1, sl
 8001a8c:	ebb2 0801 	subs.w	r8, r2, r1
 8001a90:	4659      	mov	r1, fp
 8001a92:	eb63 0901 	sbc.w	r9, r3, r1
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001aa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aaa:	4690      	mov	r8, r2
 8001aac:	4699      	mov	r9, r3
 8001aae:	4623      	mov	r3, r4
 8001ab0:	eb18 0303 	adds.w	r3, r8, r3
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	462b      	mov	r3, r5
 8001ab8:	eb49 0303 	adc.w	r3, r9, r3
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001aca:	4629      	mov	r1, r5
 8001acc:	024b      	lsls	r3, r1, #9
 8001ace:	4621      	mov	r1, r4
 8001ad0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	024a      	lsls	r2, r1, #9
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ade:	2200      	movs	r2, #0
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ae2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ae4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ae8:	f7fe fbd2 	bl	8000290 <__aeabi_uldivmod>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4613      	mov	r3, r2
 8001af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001af4:	e058      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af6:	4b38      	ldr	r3, [pc, #224]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	099b      	lsrs	r3, r3, #6
 8001afc:	2200      	movs	r2, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	4611      	mov	r1, r2
 8001b02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b06:	623b      	str	r3, [r7, #32]
 8001b08:	2300      	movs	r3, #0
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b10:	4642      	mov	r2, r8
 8001b12:	464b      	mov	r3, r9
 8001b14:	f04f 0000 	mov.w	r0, #0
 8001b18:	f04f 0100 	mov.w	r1, #0
 8001b1c:	0159      	lsls	r1, r3, #5
 8001b1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b22:	0150      	lsls	r0, r2, #5
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4641      	mov	r1, r8
 8001b2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b2e:	4649      	mov	r1, r9
 8001b30:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b48:	ebb2 040a 	subs.w	r4, r2, sl
 8001b4c:	eb63 050b 	sbc.w	r5, r3, fp
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	00eb      	lsls	r3, r5, #3
 8001b5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b5e:	00e2      	lsls	r2, r4, #3
 8001b60:	4614      	mov	r4, r2
 8001b62:	461d      	mov	r5, r3
 8001b64:	4643      	mov	r3, r8
 8001b66:	18e3      	adds	r3, r4, r3
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	464b      	mov	r3, r9
 8001b6c:	eb45 0303 	adc.w	r3, r5, r3
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b7e:	4629      	mov	r1, r5
 8001b80:	028b      	lsls	r3, r1, #10
 8001b82:	4621      	mov	r1, r4
 8001b84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b88:	4621      	mov	r1, r4
 8001b8a:	028a      	lsls	r2, r1, #10
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b92:	2200      	movs	r2, #0
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	61fa      	str	r2, [r7, #28]
 8001b98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b9c:	f7fe fb78 	bl	8000290 <__aeabi_uldivmod>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	0c1b      	lsrs	r3, r3, #16
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bc2:	e002      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x204>)
 8001bc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3750      	adds	r7, #80	; 0x50
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	00f42400 	.word	0x00f42400
 8001be0:	007a1200 	.word	0x007a1200

08001be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000000 	.word	0x20000000

08001bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c00:	f7ff fff0 	bl	8001be4 <HAL_RCC_GetHCLKFreq>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	0a9b      	lsrs	r3, r3, #10
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	4903      	ldr	r1, [pc, #12]	; (8001c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c12:	5ccb      	ldrb	r3, [r1, r3]
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	0800615c 	.word	0x0800615c

08001c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c28:	f7ff ffdc 	bl	8001be4 <HAL_RCC_GetHCLKFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	0b5b      	lsrs	r3, r3, #13
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	4903      	ldr	r1, [pc, #12]	; (8001c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40023800 	.word	0x40023800
 8001c48:	0800615c 	.word	0x0800615c

08001c4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e03f      	b.n	8001cde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d106      	bne.n	8001c78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7fe ff64 	bl	8000b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2224      	movs	r2, #36	; 0x24
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f929 	bl	8001ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	695a      	ldr	r2, [r3, #20]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b08a      	sub	sp, #40	; 0x28
 8001cea:	af02      	add	r7, sp, #8
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b20      	cmp	r3, #32
 8001d04:	d17c      	bne.n	8001e00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d002      	beq.n	8001d12 <HAL_UART_Transmit+0x2c>
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e075      	b.n	8001e02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_UART_Transmit+0x3e>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e06e      	b.n	8001e02 <HAL_UART_Transmit+0x11c>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2221      	movs	r2, #33	; 0x21
 8001d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d3a:	f7ff f845 	bl	8000dc8 <HAL_GetTick>
 8001d3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	88fa      	ldrh	r2, [r7, #6]
 8001d44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	88fa      	ldrh	r2, [r7, #6]
 8001d4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d54:	d108      	bne.n	8001d68 <HAL_UART_Transmit+0x82>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d104      	bne.n	8001d68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	e003      	b.n	8001d70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d78:	e02a      	b.n	8001dd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2200      	movs	r2, #0
 8001d82:	2180      	movs	r1, #128	; 0x80
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 f840 	bl	8001e0a <UART_WaitOnFlagUntilTimeout>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e036      	b.n	8001e02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10b      	bne.n	8001db2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001da8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	3302      	adds	r3, #2
 8001dae:	61bb      	str	r3, [r7, #24]
 8001db0:	e007      	b.n	8001dc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	781a      	ldrb	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1cf      	bne.n	8001d7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2200      	movs	r2, #0
 8001de2:	2140      	movs	r1, #64	; 0x40
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f000 f810 	bl	8001e0a <UART_WaitOnFlagUntilTimeout>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e006      	b.n	8001e02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2220      	movs	r2, #32
 8001df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	e000      	b.n	8001e02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e00:	2302      	movs	r3, #2
  }
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3720      	adds	r7, #32
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b090      	sub	sp, #64	; 0x40
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	4613      	mov	r3, r2
 8001e18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e1a:	e050      	b.n	8001ebe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e22:	d04c      	beq.n	8001ebe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <UART_WaitOnFlagUntilTimeout+0x30>
 8001e2a:	f7fe ffcd 	bl	8000dc8 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d241      	bcs.n	8001ebe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	330c      	adds	r3, #12
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e44:	e853 3f00 	ldrex	r3, [r3]
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	330c      	adds	r3, #12
 8001e58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e5a:	637a      	str	r2, [r7, #52]	; 0x34
 8001e5c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e62:	e841 2300 	strex	r3, r2, [r1]
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1e5      	bne.n	8001e3a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	3314      	adds	r3, #20
 8001e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	e853 3f00 	ldrex	r3, [r3]
 8001e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	3314      	adds	r3, #20
 8001e8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e8e:	623a      	str	r2, [r7, #32]
 8001e90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e92:	69f9      	ldr	r1, [r7, #28]
 8001e94:	6a3a      	ldr	r2, [r7, #32]
 8001e96:	e841 2300 	strex	r3, r2, [r1]
 8001e9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1e5      	bne.n	8001e6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2220      	movs	r2, #32
 8001eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e00f      	b.n	8001ede <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	bf0c      	ite	eq
 8001ece:	2301      	moveq	r3, #1
 8001ed0:	2300      	movne	r3, #0
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d09f      	beq.n	8001e1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3740      	adds	r7, #64	; 0x40
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eec:	b0c0      	sub	sp, #256	; 0x100
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f04:	68d9      	ldr	r1, [r3, #12]
 8001f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	ea40 0301 	orr.w	r3, r0, r1
 8001f10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	431a      	orrs	r2, r3
 8001f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001f40:	f021 010c 	bic.w	r1, r1, #12
 8001f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f62:	6999      	ldr	r1, [r3, #24]
 8001f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	ea40 0301 	orr.w	r3, r0, r1
 8001f6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4b8f      	ldr	r3, [pc, #572]	; (80021b4 <UART_SetConfig+0x2cc>)
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d005      	beq.n	8001f88 <UART_SetConfig+0xa0>
 8001f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	4b8d      	ldr	r3, [pc, #564]	; (80021b8 <UART_SetConfig+0x2d0>)
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d104      	bne.n	8001f92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f88:	f7ff fe4c 	bl	8001c24 <HAL_RCC_GetPCLK2Freq>
 8001f8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001f90:	e003      	b.n	8001f9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f92:	f7ff fe33 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 8001f96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fa4:	f040 810c 	bne.w	80021c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fac:	2200      	movs	r2, #0
 8001fae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001fb2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001fb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001fba:	4622      	mov	r2, r4
 8001fbc:	462b      	mov	r3, r5
 8001fbe:	1891      	adds	r1, r2, r2
 8001fc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8001fc2:	415b      	adcs	r3, r3
 8001fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fca:	4621      	mov	r1, r4
 8001fcc:	eb12 0801 	adds.w	r8, r2, r1
 8001fd0:	4629      	mov	r1, r5
 8001fd2:	eb43 0901 	adc.w	r9, r3, r1
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	f04f 0300 	mov.w	r3, #0
 8001fde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fe2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fe6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fea:	4690      	mov	r8, r2
 8001fec:	4699      	mov	r9, r3
 8001fee:	4623      	mov	r3, r4
 8001ff0:	eb18 0303 	adds.w	r3, r8, r3
 8001ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001ff8:	462b      	mov	r3, r5
 8001ffa:	eb49 0303 	adc.w	r3, r9, r3
 8001ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800200e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002012:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002016:	460b      	mov	r3, r1
 8002018:	18db      	adds	r3, r3, r3
 800201a:	653b      	str	r3, [r7, #80]	; 0x50
 800201c:	4613      	mov	r3, r2
 800201e:	eb42 0303 	adc.w	r3, r2, r3
 8002022:	657b      	str	r3, [r7, #84]	; 0x54
 8002024:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002028:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800202c:	f7fe f930 	bl	8000290 <__aeabi_uldivmod>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4b61      	ldr	r3, [pc, #388]	; (80021bc <UART_SetConfig+0x2d4>)
 8002036:	fba3 2302 	umull	r2, r3, r3, r2
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	011c      	lsls	r4, r3, #4
 800203e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002042:	2200      	movs	r2, #0
 8002044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002048:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800204c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002050:	4642      	mov	r2, r8
 8002052:	464b      	mov	r3, r9
 8002054:	1891      	adds	r1, r2, r2
 8002056:	64b9      	str	r1, [r7, #72]	; 0x48
 8002058:	415b      	adcs	r3, r3
 800205a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800205c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002060:	4641      	mov	r1, r8
 8002062:	eb12 0a01 	adds.w	sl, r2, r1
 8002066:	4649      	mov	r1, r9
 8002068:	eb43 0b01 	adc.w	fp, r3, r1
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002078:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800207c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002080:	4692      	mov	sl, r2
 8002082:	469b      	mov	fp, r3
 8002084:	4643      	mov	r3, r8
 8002086:	eb1a 0303 	adds.w	r3, sl, r3
 800208a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800208e:	464b      	mov	r3, r9
 8002090:	eb4b 0303 	adc.w	r3, fp, r3
 8002094:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80020a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80020a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80020ac:	460b      	mov	r3, r1
 80020ae:	18db      	adds	r3, r3, r3
 80020b0:	643b      	str	r3, [r7, #64]	; 0x40
 80020b2:	4613      	mov	r3, r2
 80020b4:	eb42 0303 	adc.w	r3, r2, r3
 80020b8:	647b      	str	r3, [r7, #68]	; 0x44
 80020ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80020c2:	f7fe f8e5 	bl	8000290 <__aeabi_uldivmod>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4611      	mov	r1, r2
 80020cc:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <UART_SetConfig+0x2d4>)
 80020ce:	fba3 2301 	umull	r2, r3, r3, r1
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	2264      	movs	r2, #100	; 0x64
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	1acb      	subs	r3, r1, r3
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80020e2:	4b36      	ldr	r3, [pc, #216]	; (80021bc <UART_SetConfig+0x2d4>)
 80020e4:	fba3 2302 	umull	r2, r3, r3, r2
 80020e8:	095b      	lsrs	r3, r3, #5
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020f0:	441c      	add	r4, r3
 80020f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020f6:	2200      	movs	r2, #0
 80020f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002100:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002104:	4642      	mov	r2, r8
 8002106:	464b      	mov	r3, r9
 8002108:	1891      	adds	r1, r2, r2
 800210a:	63b9      	str	r1, [r7, #56]	; 0x38
 800210c:	415b      	adcs	r3, r3
 800210e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002110:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002114:	4641      	mov	r1, r8
 8002116:	1851      	adds	r1, r2, r1
 8002118:	6339      	str	r1, [r7, #48]	; 0x30
 800211a:	4649      	mov	r1, r9
 800211c:	414b      	adcs	r3, r1
 800211e:	637b      	str	r3, [r7, #52]	; 0x34
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800212c:	4659      	mov	r1, fp
 800212e:	00cb      	lsls	r3, r1, #3
 8002130:	4651      	mov	r1, sl
 8002132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002136:	4651      	mov	r1, sl
 8002138:	00ca      	lsls	r2, r1, #3
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	4603      	mov	r3, r0
 8002140:	4642      	mov	r2, r8
 8002142:	189b      	adds	r3, r3, r2
 8002144:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002148:	464b      	mov	r3, r9
 800214a:	460a      	mov	r2, r1
 800214c:	eb42 0303 	adc.w	r3, r2, r3
 8002150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002160:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002164:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002168:	460b      	mov	r3, r1
 800216a:	18db      	adds	r3, r3, r3
 800216c:	62bb      	str	r3, [r7, #40]	; 0x28
 800216e:	4613      	mov	r3, r2
 8002170:	eb42 0303 	adc.w	r3, r2, r3
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002176:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800217a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800217e:	f7fe f887 	bl	8000290 <__aeabi_uldivmod>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <UART_SetConfig+0x2d4>)
 8002188:	fba3 1302 	umull	r1, r3, r3, r2
 800218c:	095b      	lsrs	r3, r3, #5
 800218e:	2164      	movs	r1, #100	; 0x64
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	3332      	adds	r3, #50	; 0x32
 800219a:	4a08      	ldr	r2, [pc, #32]	; (80021bc <UART_SetConfig+0x2d4>)
 800219c:	fba2 2303 	umull	r2, r3, r2, r3
 80021a0:	095b      	lsrs	r3, r3, #5
 80021a2:	f003 0207 	and.w	r2, r3, #7
 80021a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4422      	add	r2, r4
 80021ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80021b0:	e105      	b.n	80023be <UART_SetConfig+0x4d6>
 80021b2:	bf00      	nop
 80021b4:	40011000 	.word	0x40011000
 80021b8:	40011400 	.word	0x40011400
 80021bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021c4:	2200      	movs	r2, #0
 80021c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80021ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80021ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80021d2:	4642      	mov	r2, r8
 80021d4:	464b      	mov	r3, r9
 80021d6:	1891      	adds	r1, r2, r2
 80021d8:	6239      	str	r1, [r7, #32]
 80021da:	415b      	adcs	r3, r3
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
 80021de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021e2:	4641      	mov	r1, r8
 80021e4:	1854      	adds	r4, r2, r1
 80021e6:	4649      	mov	r1, r9
 80021e8:	eb43 0501 	adc.w	r5, r3, r1
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	00eb      	lsls	r3, r5, #3
 80021f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021fa:	00e2      	lsls	r2, r4, #3
 80021fc:	4614      	mov	r4, r2
 80021fe:	461d      	mov	r5, r3
 8002200:	4643      	mov	r3, r8
 8002202:	18e3      	adds	r3, r4, r3
 8002204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002208:	464b      	mov	r3, r9
 800220a:	eb45 0303 	adc.w	r3, r5, r3
 800220e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800221e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800222e:	4629      	mov	r1, r5
 8002230:	008b      	lsls	r3, r1, #2
 8002232:	4621      	mov	r1, r4
 8002234:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002238:	4621      	mov	r1, r4
 800223a:	008a      	lsls	r2, r1, #2
 800223c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002240:	f7fe f826 	bl	8000290 <__aeabi_uldivmod>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4b60      	ldr	r3, [pc, #384]	; (80023cc <UART_SetConfig+0x4e4>)
 800224a:	fba3 2302 	umull	r2, r3, r3, r2
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	011c      	lsls	r4, r3, #4
 8002252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002256:	2200      	movs	r2, #0
 8002258:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800225c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002260:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002264:	4642      	mov	r2, r8
 8002266:	464b      	mov	r3, r9
 8002268:	1891      	adds	r1, r2, r2
 800226a:	61b9      	str	r1, [r7, #24]
 800226c:	415b      	adcs	r3, r3
 800226e:	61fb      	str	r3, [r7, #28]
 8002270:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002274:	4641      	mov	r1, r8
 8002276:	1851      	adds	r1, r2, r1
 8002278:	6139      	str	r1, [r7, #16]
 800227a:	4649      	mov	r1, r9
 800227c:	414b      	adcs	r3, r1
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800228c:	4659      	mov	r1, fp
 800228e:	00cb      	lsls	r3, r1, #3
 8002290:	4651      	mov	r1, sl
 8002292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002296:	4651      	mov	r1, sl
 8002298:	00ca      	lsls	r2, r1, #3
 800229a:	4610      	mov	r0, r2
 800229c:	4619      	mov	r1, r3
 800229e:	4603      	mov	r3, r0
 80022a0:	4642      	mov	r2, r8
 80022a2:	189b      	adds	r3, r3, r2
 80022a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022a8:	464b      	mov	r3, r9
 80022aa:	460a      	mov	r2, r1
 80022ac:	eb42 0303 	adc.w	r3, r2, r3
 80022b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80022b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80022be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80022cc:	4649      	mov	r1, r9
 80022ce:	008b      	lsls	r3, r1, #2
 80022d0:	4641      	mov	r1, r8
 80022d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022d6:	4641      	mov	r1, r8
 80022d8:	008a      	lsls	r2, r1, #2
 80022da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80022de:	f7fd ffd7 	bl	8000290 <__aeabi_uldivmod>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4b39      	ldr	r3, [pc, #228]	; (80023cc <UART_SetConfig+0x4e4>)
 80022e8:	fba3 1302 	umull	r1, r3, r3, r2
 80022ec:	095b      	lsrs	r3, r3, #5
 80022ee:	2164      	movs	r1, #100	; 0x64
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	3332      	adds	r3, #50	; 0x32
 80022fa:	4a34      	ldr	r2, [pc, #208]	; (80023cc <UART_SetConfig+0x4e4>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002306:	441c      	add	r4, r3
 8002308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800230c:	2200      	movs	r2, #0
 800230e:	673b      	str	r3, [r7, #112]	; 0x70
 8002310:	677a      	str	r2, [r7, #116]	; 0x74
 8002312:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002316:	4642      	mov	r2, r8
 8002318:	464b      	mov	r3, r9
 800231a:	1891      	adds	r1, r2, r2
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	415b      	adcs	r3, r3
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002326:	4641      	mov	r1, r8
 8002328:	1851      	adds	r1, r2, r1
 800232a:	6039      	str	r1, [r7, #0]
 800232c:	4649      	mov	r1, r9
 800232e:	414b      	adcs	r3, r1
 8002330:	607b      	str	r3, [r7, #4]
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800233e:	4659      	mov	r1, fp
 8002340:	00cb      	lsls	r3, r1, #3
 8002342:	4651      	mov	r1, sl
 8002344:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002348:	4651      	mov	r1, sl
 800234a:	00ca      	lsls	r2, r1, #3
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	4603      	mov	r3, r0
 8002352:	4642      	mov	r2, r8
 8002354:	189b      	adds	r3, r3, r2
 8002356:	66bb      	str	r3, [r7, #104]	; 0x68
 8002358:	464b      	mov	r3, r9
 800235a:	460a      	mov	r2, r1
 800235c:	eb42 0303 	adc.w	r3, r2, r3
 8002360:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	663b      	str	r3, [r7, #96]	; 0x60
 800236c:	667a      	str	r2, [r7, #100]	; 0x64
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800237a:	4649      	mov	r1, r9
 800237c:	008b      	lsls	r3, r1, #2
 800237e:	4641      	mov	r1, r8
 8002380:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002384:	4641      	mov	r1, r8
 8002386:	008a      	lsls	r2, r1, #2
 8002388:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800238c:	f7fd ff80 	bl	8000290 <__aeabi_uldivmod>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <UART_SetConfig+0x4e4>)
 8002396:	fba3 1302 	umull	r1, r3, r3, r2
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	2164      	movs	r1, #100	; 0x64
 800239e:	fb01 f303 	mul.w	r3, r1, r3
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	3332      	adds	r3, #50	; 0x32
 80023a8:	4a08      	ldr	r2, [pc, #32]	; (80023cc <UART_SetConfig+0x4e4>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	f003 020f 	and.w	r2, r3, #15
 80023b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4422      	add	r2, r4
 80023bc:	609a      	str	r2, [r3, #8]
}
 80023be:	bf00      	nop
 80023c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80023c4:	46bd      	mov	sp, r7
 80023c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023ca:	bf00      	nop
 80023cc:	51eb851f 	.word	0x51eb851f

080023d0 <__NVIC_SetPriority>:
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	db0a      	blt.n	80023fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	490c      	ldr	r1, [pc, #48]	; (800241c <__NVIC_SetPriority+0x4c>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	0112      	lsls	r2, r2, #4
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	440b      	add	r3, r1
 80023f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023f8:	e00a      	b.n	8002410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4908      	ldr	r1, [pc, #32]	; (8002420 <__NVIC_SetPriority+0x50>)
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	3b04      	subs	r3, #4
 8002408:	0112      	lsls	r2, r2, #4
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	440b      	add	r3, r1
 800240e:	761a      	strb	r2, [r3, #24]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000e100 	.word	0xe000e100
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002428:	2100      	movs	r1, #0
 800242a:	f06f 0004 	mvn.w	r0, #4
 800242e:	f7ff ffcf 	bl	80023d0 <__NVIC_SetPriority>
#endif
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800243e:	f3ef 8305 	mrs	r3, IPSR
 8002442:	603b      	str	r3, [r7, #0]
  return(result);
 8002444:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800244a:	f06f 0305 	mvn.w	r3, #5
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	e00c      	b.n	800246c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <osKernelInitialize+0x44>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d105      	bne.n	8002466 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800245a:	4b08      	ldr	r3, [pc, #32]	; (800247c <osKernelInitialize+0x44>)
 800245c:	2201      	movs	r2, #1
 800245e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002460:	2300      	movs	r3, #0
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	e002      	b.n	800246c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002466:	f04f 33ff 	mov.w	r3, #4294967295
 800246a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800246c:	687b      	ldr	r3, [r7, #4]
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000348 	.word	0x20000348

08002480 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002486:	f3ef 8305 	mrs	r3, IPSR
 800248a:	603b      	str	r3, [r7, #0]
  return(result);
 800248c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002492:	f06f 0305 	mvn.w	r3, #5
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	e010      	b.n	80024bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800249a:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <osKernelStart+0x48>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d109      	bne.n	80024b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80024a2:	f7ff ffbf 	bl	8002424 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <osKernelStart+0x48>)
 80024a8:	2202      	movs	r2, #2
 80024aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80024ac:	f001 fbb4 	bl	8003c18 <vTaskStartScheduler>
      stat = osOK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	607b      	str	r3, [r7, #4]
 80024b4:	e002      	b.n	80024bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80024bc:	687b      	ldr	r3, [r7, #4]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000348 	.word	0x20000348

080024cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08e      	sub	sp, #56	; 0x38
 80024d0:	af04      	add	r7, sp, #16
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024dc:	f3ef 8305 	mrs	r3, IPSR
 80024e0:	617b      	str	r3, [r7, #20]
  return(result);
 80024e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d17e      	bne.n	80025e6 <osThreadNew+0x11a>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d07b      	beq.n	80025e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80024f2:	2318      	movs	r3, #24
 80024f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80024fa:	f04f 33ff 	mov.w	r3, #4294967295
 80024fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d045      	beq.n	8002592 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <osThreadNew+0x48>
        name = attr->name;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <osThreadNew+0x6e>
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2b38      	cmp	r3, #56	; 0x38
 800252c:	d805      	bhi.n	800253a <osThreadNew+0x6e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <osThreadNew+0x72>
        return (NULL);
 800253a:	2300      	movs	r3, #0
 800253c:	e054      	b.n	80025e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00e      	beq.n	8002574 <osThreadNew+0xa8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2b5b      	cmp	r3, #91	; 0x5b
 800255c:	d90a      	bls.n	8002574 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002562:	2b00      	cmp	r3, #0
 8002564:	d006      	beq.n	8002574 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <osThreadNew+0xa8>
        mem = 1;
 800256e:	2301      	movs	r3, #1
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	e010      	b.n	8002596 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10c      	bne.n	8002596 <osThreadNew+0xca>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d108      	bne.n	8002596 <osThreadNew+0xca>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d104      	bne.n	8002596 <osThreadNew+0xca>
          mem = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	61bb      	str	r3, [r7, #24]
 8002590:	e001      	b.n	8002596 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d110      	bne.n	80025be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80025a4:	9202      	str	r2, [sp, #8]
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	6a3a      	ldr	r2, [r7, #32]
 80025b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f001 f95a 	bl	800386c <xTaskCreateStatic>
 80025b8:	4603      	mov	r3, r0
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	e013      	b.n	80025e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d110      	bne.n	80025e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	f107 0310 	add.w	r3, r7, #16
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f001 f9a5 	bl	8003926 <xTaskCreate>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d001      	beq.n	80025e6 <osThreadNew+0x11a>
            hTask = NULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80025e6:	693b      	ldr	r3, [r7, #16]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3728      	adds	r7, #40	; 0x28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025f8:	f3ef 8305 	mrs	r3, IPSR
 80025fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80025fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <osDelay+0x1c>
    stat = osErrorISR;
 8002604:	f06f 0305 	mvn.w	r3, #5
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	e007      	b.n	800261c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f001 faca 	bl	8003bb0 <vTaskDelay>
    }
  }

  return (stat);
 800261c:	68fb      	ldr	r3, [r7, #12]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f002 fc02 	bl	8004e38 <pvTimerGetTimerID>
 8002634:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <TimerCallback+0x22>
    callb->func (callb->arg);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	6852      	ldr	r2, [r2, #4]
 8002644:	4610      	mov	r0, r2
 8002646:	4798      	blx	r3
  }
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b08c      	sub	sp, #48	; 0x30
 8002654:	af02      	add	r7, sp, #8
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	460b      	mov	r3, r1
 800265e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8002660:	2300      	movs	r3, #0
 8002662:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002664:	f3ef 8305 	mrs	r3, IPSR
 8002668:	613b      	str	r3, [r7, #16]
  return(result);
 800266a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800266c:	2b00      	cmp	r3, #0
 800266e:	d163      	bne.n	8002738 <osTimerNew+0xe8>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d060      	beq.n	8002738 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8002676:	2008      	movs	r0, #8
 8002678:	f002 fe4e 	bl	8005318 <pvPortMalloc>
 800267c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d059      	beq.n	8002738 <osTimerNew+0xe8>
      callb->func = func;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8002690:	7afb      	ldrb	r3, [r7, #11]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d102      	bne.n	800269c <osTimerNew+0x4c>
        reload = pdFALSE;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
 800269a:	e001      	b.n	80026a0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800269c:	2301      	movs	r3, #1
 800269e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80026a0:	f04f 33ff 	mov.w	r3, #4294967295
 80026a4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d01c      	beq.n	80026ea <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <osTimerNew+0x6e>
          name = attr->name;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d006      	beq.n	80026d4 <osTimerNew+0x84>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2b2b      	cmp	r3, #43	; 0x2b
 80026cc:	d902      	bls.n	80026d4 <osTimerNew+0x84>
          mem = 1;
 80026ce:	2301      	movs	r3, #1
 80026d0:	61bb      	str	r3, [r7, #24]
 80026d2:	e00c      	b.n	80026ee <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d108      	bne.n	80026ee <osTimerNew+0x9e>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d104      	bne.n	80026ee <osTimerNew+0x9e>
            mem = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	e001      	b.n	80026ee <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d10c      	bne.n	800270e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	4b12      	ldr	r3, [pc, #72]	; (8002744 <osTimerNew+0xf4>)
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	69fa      	ldr	r2, [r7, #28]
 8002702:	2101      	movs	r1, #1
 8002704:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002706:	f002 f818 	bl	800473a <xTimerCreateStatic>
 800270a:	6238      	str	r0, [r7, #32]
 800270c:	e00b      	b.n	8002726 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d108      	bne.n	8002726 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <osTimerNew+0xf4>)
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	2101      	movs	r1, #1
 800271e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002720:	f001 ffea 	bl	80046f8 <xTimerCreate>
 8002724:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d105      	bne.n	8002738 <osTimerNew+0xe8>
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <osTimerNew+0xe8>
        vPortFree (callb);
 8002732:	6978      	ldr	r0, [r7, #20]
 8002734:	f002 febc 	bl	80054b0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8002738:	6a3b      	ldr	r3, [r7, #32]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3728      	adds	r7, #40	; 0x28
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	08002627 	.word	0x08002627

08002748 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8002750:	2300      	movs	r3, #0
 8002752:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002754:	f3ef 8305 	mrs	r3, IPSR
 8002758:	60bb      	str	r3, [r7, #8]
  return(result);
 800275a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800275c:	2b00      	cmp	r3, #0
 800275e:	d174      	bne.n	800284a <osMutexNew+0x102>
    if (attr != NULL) {
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <osMutexNew+0x26>
      type = attr->attr_bits;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	e001      	b.n	8002772 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <osMutexNew+0x3a>
      rmtx = 1U;
 800277c:	2301      	movs	r3, #1
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	e001      	b.n	8002786 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b00      	cmp	r3, #0
 800278e:	d15c      	bne.n	800284a <osMutexNew+0x102>
      mem = -1;
 8002790:	f04f 33ff 	mov.w	r3, #4294967295
 8002794:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d015      	beq.n	80027c8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d006      	beq.n	80027b2 <osMutexNew+0x6a>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b4f      	cmp	r3, #79	; 0x4f
 80027aa:	d902      	bls.n	80027b2 <osMutexNew+0x6a>
          mem = 1;
 80027ac:	2301      	movs	r3, #1
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	e00c      	b.n	80027cc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d108      	bne.n	80027cc <osMutexNew+0x84>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d104      	bne.n	80027cc <osMutexNew+0x84>
            mem = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	e001      	b.n	80027cc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d112      	bne.n	80027f8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d007      	beq.n	80027e8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	4619      	mov	r1, r3
 80027de:	2004      	movs	r0, #4
 80027e0:	f000 fbc1 	bl	8002f66 <xQueueCreateMutexStatic>
 80027e4:	61f8      	str	r0, [r7, #28]
 80027e6:	e016      	b.n	8002816 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	4619      	mov	r1, r3
 80027ee:	2001      	movs	r0, #1
 80027f0:	f000 fbb9 	bl	8002f66 <xQueueCreateMutexStatic>
 80027f4:	61f8      	str	r0, [r7, #28]
 80027f6:	e00e      	b.n	8002816 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10b      	bne.n	8002816 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d004      	beq.n	800280e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8002804:	2004      	movs	r0, #4
 8002806:	f000 fb96 	bl	8002f36 <xQueueCreateMutex>
 800280a:	61f8      	str	r0, [r7, #28]
 800280c:	e003      	b.n	8002816 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800280e:	2001      	movs	r0, #1
 8002810:	f000 fb91 	bl	8002f36 <xQueueCreateMutex>
 8002814:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00c      	beq.n	8002836 <osMutexNew+0xee>
        if (attr != NULL) {
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <osMutexNew+0xe2>
          name = attr->name;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	e001      	b.n	800282e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800282e:	68f9      	ldr	r1, [r7, #12]
 8002830:	69f8      	ldr	r0, [r7, #28]
 8002832:	f000 ffbd 	bl	80037b0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d006      	beq.n	800284a <osMutexNew+0x102>
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800284a:	69fb      	ldr	r3, [r7, #28]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3720      	adds	r7, #32
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	; 0x28
 8002858:	af02      	add	r7, sp, #8
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002864:	f3ef 8305 	mrs	r3, IPSR
 8002868:	613b      	str	r3, [r7, #16]
  return(result);
 800286a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800286c:	2b00      	cmp	r3, #0
 800286e:	d15f      	bne.n	8002930 <osMessageQueueNew+0xdc>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d05c      	beq.n	8002930 <osMessageQueueNew+0xdc>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d059      	beq.n	8002930 <osMessageQueueNew+0xdc>
    mem = -1;
 800287c:	f04f 33ff 	mov.w	r3, #4294967295
 8002880:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d029      	beq.n	80028dc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d012      	beq.n	80028b6 <osMessageQueueNew+0x62>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b4f      	cmp	r3, #79	; 0x4f
 8002896:	d90e      	bls.n	80028b6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	695a      	ldr	r2, [r3, #20]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d302      	bcc.n	80028b6 <osMessageQueueNew+0x62>
        mem = 1;
 80028b0:	2301      	movs	r3, #1
 80028b2:	61bb      	str	r3, [r7, #24]
 80028b4:	e014      	b.n	80028e0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d110      	bne.n	80028e0 <osMessageQueueNew+0x8c>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10c      	bne.n	80028e0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d108      	bne.n	80028e0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d104      	bne.n	80028e0 <osMessageQueueNew+0x8c>
          mem = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	e001      	b.n	80028e0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d10b      	bne.n	80028fe <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691a      	ldr	r2, [r3, #16]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2100      	movs	r1, #0
 80028f0:	9100      	str	r1, [sp, #0]
 80028f2:	68b9      	ldr	r1, [r7, #8]
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 fa2f 	bl	8002d58 <xQueueGenericCreateStatic>
 80028fa:	61f8      	str	r0, [r7, #28]
 80028fc:	e008      	b.n	8002910 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d105      	bne.n	8002910 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8002904:	2200      	movs	r2, #0
 8002906:	68b9      	ldr	r1, [r7, #8]
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 fa9d 	bl	8002e48 <xQueueGenericCreate>
 800290e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00c      	beq.n	8002930 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <osMessageQueueNew+0xd0>
        name = attr->name;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	e001      	b.n	8002928 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8002928:	6979      	ldr	r1, [r7, #20]
 800292a:	69f8      	ldr	r0, [r7, #28]
 800292c:	f000 ff40 	bl	80037b0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002930:	69fb      	ldr	r3, [r7, #28]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3720      	adds	r7, #32
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002950:	2300      	movs	r3, #0
 8002952:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002954:	f3ef 8305 	mrs	r3, IPSR
 8002958:	617b      	str	r3, [r7, #20]
  return(result);
 800295a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800295c:	2b00      	cmp	r3, #0
 800295e:	d028      	beq.n	80029b2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <osMessageQueuePut+0x36>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <osMessageQueuePut+0x36>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8002972:	f06f 0303 	mvn.w	r3, #3
 8002976:	61fb      	str	r3, [r7, #28]
 8002978:	e038      	b.n	80029ec <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800297e:	f107 0210 	add.w	r2, r7, #16
 8002982:	2300      	movs	r3, #0
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	69b8      	ldr	r0, [r7, #24]
 8002988:	f000 fc06 	bl	8003198 <xQueueGenericSendFromISR>
 800298c:	4603      	mov	r3, r0
 800298e:	2b01      	cmp	r3, #1
 8002990:	d003      	beq.n	800299a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8002992:	f06f 0302 	mvn.w	r3, #2
 8002996:	61fb      	str	r3, [r7, #28]
 8002998:	e028      	b.n	80029ec <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d025      	beq.n	80029ec <osMessageQueuePut+0xb0>
 80029a0:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <osMessageQueuePut+0xbc>)
 80029a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	f3bf 8f4f 	dsb	sy
 80029ac:	f3bf 8f6f 	isb	sy
 80029b0:	e01c      	b.n	80029ec <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <osMessageQueuePut+0x82>
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d103      	bne.n	80029c6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80029be:	f06f 0303 	mvn.w	r3, #3
 80029c2:	61fb      	str	r3, [r7, #28]
 80029c4:	e012      	b.n	80029ec <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80029c6:	2300      	movs	r3, #0
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	69b8      	ldr	r0, [r7, #24]
 80029ce:	f000 fae5 	bl	8002f9c <xQueueGenericSend>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d009      	beq.n	80029ec <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80029de:	f06f 0301 	mvn.w	r3, #1
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	e002      	b.n	80029ec <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80029e6:	f06f 0302 	mvn.w	r3, #2
 80029ea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80029ec:	69fb      	ldr	r3, [r7, #28]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	e000ed04 	.word	0xe000ed04

080029fc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a12:	f3ef 8305 	mrs	r3, IPSR
 8002a16:	617b      	str	r3, [r7, #20]
  return(result);
 8002a18:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d028      	beq.n	8002a70 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <osMessageQueueGet+0x34>
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <osMessageQueueGet+0x34>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8002a30:	f06f 0303 	mvn.w	r3, #3
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	e037      	b.n	8002aa8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002a3c:	f107 0310 	add.w	r3, r7, #16
 8002a40:	461a      	mov	r2, r3
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	69b8      	ldr	r0, [r7, #24]
 8002a46:	f000 fd23 	bl	8003490 <xQueueReceiveFromISR>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d003      	beq.n	8002a58 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8002a50:	f06f 0302 	mvn.w	r3, #2
 8002a54:	61fb      	str	r3, [r7, #28]
 8002a56:	e027      	b.n	8002aa8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d024      	beq.n	8002aa8 <osMessageQueueGet+0xac>
 8002a5e:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <osMessageQueueGet+0xb8>)
 8002a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	f3bf 8f4f 	dsb	sy
 8002a6a:	f3bf 8f6f 	isb	sy
 8002a6e:	e01b      	b.n	8002aa8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <osMessageQueueGet+0x80>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d103      	bne.n	8002a84 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8002a7c:	f06f 0303 	mvn.w	r3, #3
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	e011      	b.n	8002aa8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	68b9      	ldr	r1, [r7, #8]
 8002a88:	69b8      	ldr	r0, [r7, #24]
 8002a8a:	f000 fc21 	bl	80032d0 <xQueueReceive>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d009      	beq.n	8002aa8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8002a9a:	f06f 0301 	mvn.w	r3, #1
 8002a9e:	61fb      	str	r3, [r7, #28]
 8002aa0:	e002      	b.n	8002aa8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8002aa2:	f06f 0302 	mvn.w	r3, #2
 8002aa6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002aa8:	69fb      	ldr	r3, [r7, #28]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	e000ed04 	.word	0xe000ed04

08002ab8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4a07      	ldr	r2, [pc, #28]	; (8002ae4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002ac8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	4a06      	ldr	r2, [pc, #24]	; (8002ae8 <vApplicationGetIdleTaskMemory+0x30>)
 8002ace:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2280      	movs	r2, #128	; 0x80
 8002ad4:	601a      	str	r2, [r3, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	2000034c 	.word	0x2000034c
 8002ae8:	200003a8 	.word	0x200003a8

08002aec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <vApplicationGetTimerTaskMemory+0x2c>)
 8002afc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	4a06      	ldr	r2, [pc, #24]	; (8002b1c <vApplicationGetTimerTaskMemory+0x30>)
 8002b02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b0a:	601a      	str	r2, [r3, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	200005a8 	.word	0x200005a8
 8002b1c:	20000604 	.word	0x20000604

08002b20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f103 0208 	add.w	r2, r3, #8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f04f 32ff 	mov.w	r2, #4294967295
 8002b38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f103 0208 	add.w	r2, r3, #8
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f103 0208 	add.w	r2, r3, #8
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	601a      	str	r2, [r3, #0]
}
 8002bb6:	bf00      	nop
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b085      	sub	sp, #20
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd8:	d103      	bne.n	8002be2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	e00c      	b.n	8002bfc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3308      	adds	r3, #8
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	e002      	b.n	8002bf0 <vListInsert+0x2e>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d2f6      	bcs.n	8002bea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	601a      	str	r2, [r3, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6892      	ldr	r2, [r2, #8]
 8002c4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6852      	ldr	r2, [r2, #4]
 8002c54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d103      	bne.n	8002c68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	1e5a      	subs	r2, r3, #1
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10a      	bne.n	8002cb2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca0:	f383 8811 	msr	BASEPRI, r3
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002cae:	bf00      	nop
 8002cb0:	e7fe      	b.n	8002cb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002cb2:	f002 fa0f 	bl	80050d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbe:	68f9      	ldr	r1, [r7, #12]
 8002cc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	441a      	add	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	68f9      	ldr	r1, [r7, #12]
 8002ce6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	441a      	add	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	22ff      	movs	r2, #255	; 0xff
 8002cf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	22ff      	movs	r2, #255	; 0xff
 8002cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d114      	bne.n	8002d32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d01a      	beq.n	8002d46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	3310      	adds	r3, #16
 8002d14:	4618      	mov	r0, r3
 8002d16:	f001 fa09 	bl	800412c <xTaskRemoveFromEventList>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d012      	beq.n	8002d46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d20:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <xQueueGenericReset+0xcc>)
 8002d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	e009      	b.n	8002d46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3310      	adds	r3, #16
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fef2 	bl	8002b20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	3324      	adds	r3, #36	; 0x24
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff feed 	bl	8002b20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d46:	f002 f9f5 	bl	8005134 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d4a:	2301      	movs	r3, #1
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	e000ed04 	.word	0xe000ed04

08002d58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08e      	sub	sp, #56	; 0x38
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d7e:	bf00      	nop
 8002d80:	e7fe      	b.n	8002d80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10a      	bne.n	8002d9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d9a:	bf00      	nop
 8002d9c:	e7fe      	b.n	8002d9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <xQueueGenericCreateStatic+0x52>
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <xQueueGenericCreateStatic+0x56>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <xQueueGenericCreateStatic+0x58>
 8002dae:	2300      	movs	r3, #0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10a      	bne.n	8002dca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	623b      	str	r3, [r7, #32]
}
 8002dc6:	bf00      	nop
 8002dc8:	e7fe      	b.n	8002dc8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <xQueueGenericCreateStatic+0x7e>
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <xQueueGenericCreateStatic+0x82>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <xQueueGenericCreateStatic+0x84>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10a      	bne.n	8002df6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	61fb      	str	r3, [r7, #28]
}
 8002df2:	bf00      	nop
 8002df4:	e7fe      	b.n	8002df4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002df6:	2350      	movs	r3, #80	; 0x50
 8002df8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2b50      	cmp	r3, #80	; 0x50
 8002dfe:	d00a      	beq.n	8002e16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e04:	f383 8811 	msr	BASEPRI, r3
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	61bb      	str	r3, [r7, #24]
}
 8002e12:	bf00      	nop
 8002e14:	e7fe      	b.n	8002e14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002e16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00d      	beq.n	8002e3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	4613      	mov	r3, r2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f83f 	bl	8002ebc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3730      	adds	r7, #48	; 0x30
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	; 0x28
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	4613      	mov	r3, r2
 8002e54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10a      	bne.n	8002e72 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	613b      	str	r3, [r7, #16]
}
 8002e6e:	bf00      	nop
 8002e70:	e7fe      	b.n	8002e70 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	fb02 f303 	mul.w	r3, r2, r3
 8002e7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	3350      	adds	r3, #80	; 0x50
 8002e80:	4618      	mov	r0, r3
 8002e82:	f002 fa49 	bl	8005318 <pvPortMalloc>
 8002e86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d011      	beq.n	8002eb2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	3350      	adds	r3, #80	; 0x50
 8002e96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ea0:	79fa      	ldrb	r2, [r7, #7]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	68b9      	ldr	r1, [r7, #8]
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 f805 	bl	8002ebc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002eb2:	69bb      	ldr	r3, [r7, #24]
	}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3720      	adds	r7, #32
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d103      	bne.n	8002ed8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	e002      	b.n	8002ede <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002eea:	2101      	movs	r1, #1
 8002eec:	69b8      	ldr	r0, [r7, #24]
 8002eee:	f7ff fecb 	bl	8002c88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	78fa      	ldrb	r2, [r7, #3]
 8002ef6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00e      	beq.n	8002f2e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002f22:	2300      	movs	r3, #0
 8002f24:	2200      	movs	r2, #0
 8002f26:	2100      	movs	r1, #0
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f837 	bl	8002f9c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b086      	sub	sp, #24
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002f40:	2301      	movs	r3, #1
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	2300      	movs	r3, #0
 8002f46:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	6939      	ldr	r1, [r7, #16]
 8002f4e:	6978      	ldr	r0, [r7, #20]
 8002f50:	f7ff ff7a 	bl	8002e48 <xQueueGenericCreate>
 8002f54:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f7ff ffd3 	bl	8002f02 <prvInitialiseMutex>

		return xNewQueue;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
	}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b088      	sub	sp, #32
 8002f6a:	af02      	add	r7, sp, #8
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	6039      	str	r1, [r7, #0]
 8002f70:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002f72:	2301      	movs	r3, #1
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2200      	movs	r2, #0
 8002f82:	6939      	ldr	r1, [r7, #16]
 8002f84:	6978      	ldr	r0, [r7, #20]
 8002f86:	f7ff fee7 	bl	8002d58 <xQueueGenericCreateStatic>
 8002f8a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f7ff ffb8 	bl	8002f02 <prvInitialiseMutex>

		return xNewQueue;
 8002f92:	68fb      	ldr	r3, [r7, #12]
	}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08e      	sub	sp, #56	; 0x38
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002faa:	2300      	movs	r3, #0
 8002fac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10a      	bne.n	8002fce <xQueueGenericSend+0x32>
	__asm volatile
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002fca:	bf00      	nop
 8002fcc:	e7fe      	b.n	8002fcc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d103      	bne.n	8002fdc <xQueueGenericSend+0x40>
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <xQueueGenericSend+0x44>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <xQueueGenericSend+0x46>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10a      	bne.n	8002ffc <xQueueGenericSend+0x60>
	__asm volatile
 8002fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ff8:	bf00      	nop
 8002ffa:	e7fe      	b.n	8002ffa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d103      	bne.n	800300a <xQueueGenericSend+0x6e>
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <xQueueGenericSend+0x72>
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <xQueueGenericSend+0x74>
 800300e:	2300      	movs	r3, #0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10a      	bne.n	800302a <xQueueGenericSend+0x8e>
	__asm volatile
 8003014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003018:	f383 8811 	msr	BASEPRI, r3
 800301c:	f3bf 8f6f 	isb	sy
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	623b      	str	r3, [r7, #32]
}
 8003026:	bf00      	nop
 8003028:	e7fe      	b.n	8003028 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800302a:	f001 fa3d 	bl	80044a8 <xTaskGetSchedulerState>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d102      	bne.n	800303a <xQueueGenericSend+0x9e>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <xQueueGenericSend+0xa2>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <xQueueGenericSend+0xa4>
 800303e:	2300      	movs	r3, #0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10a      	bne.n	800305a <xQueueGenericSend+0xbe>
	__asm volatile
 8003044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	61fb      	str	r3, [r7, #28]
}
 8003056:	bf00      	nop
 8003058:	e7fe      	b.n	8003058 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800305a:	f002 f83b 	bl	80050d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003066:	429a      	cmp	r2, r3
 8003068:	d302      	bcc.n	8003070 <xQueueGenericSend+0xd4>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d129      	bne.n	80030c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	68b9      	ldr	r1, [r7, #8]
 8003074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003076:	f000 fa8b 	bl	8003590 <prvCopyDataToQueue>
 800307a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800307c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	2b00      	cmp	r3, #0
 8003082:	d010      	beq.n	80030a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	3324      	adds	r3, #36	; 0x24
 8003088:	4618      	mov	r0, r3
 800308a:	f001 f84f 	bl	800412c <xTaskRemoveFromEventList>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d013      	beq.n	80030bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003094:	4b3f      	ldr	r3, [pc, #252]	; (8003194 <xQueueGenericSend+0x1f8>)
 8003096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	e00a      	b.n	80030bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030ac:	4b39      	ldr	r3, [pc, #228]	; (8003194 <xQueueGenericSend+0x1f8>)
 80030ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	f3bf 8f4f 	dsb	sy
 80030b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030bc:	f002 f83a 	bl	8005134 <vPortExitCritical>
				return pdPASS;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e063      	b.n	800318c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d103      	bne.n	80030d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030ca:	f002 f833 	bl	8005134 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	e05c      	b.n	800318c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d106      	bne.n	80030e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030d8:	f107 0314 	add.w	r3, r7, #20
 80030dc:	4618      	mov	r0, r3
 80030de:	f001 f889 	bl	80041f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030e2:	2301      	movs	r3, #1
 80030e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030e6:	f002 f825 	bl	8005134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030ea:	f000 fdfb 	bl	8003ce4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030ee:	f001 fff1 	bl	80050d4 <vPortEnterCritical>
 80030f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030f8:	b25b      	sxtb	r3, r3
 80030fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fe:	d103      	bne.n	8003108 <xQueueGenericSend+0x16c>
 8003100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800310e:	b25b      	sxtb	r3, r3
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003114:	d103      	bne.n	800311e <xQueueGenericSend+0x182>
 8003116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800311e:	f002 f809 	bl	8005134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003122:	1d3a      	adds	r2, r7, #4
 8003124:	f107 0314 	add.w	r3, r7, #20
 8003128:	4611      	mov	r1, r2
 800312a:	4618      	mov	r0, r3
 800312c:	f001 f878 	bl	8004220 <xTaskCheckForTimeOut>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d124      	bne.n	8003180 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003136:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003138:	f000 fb22 	bl	8003780 <prvIsQueueFull>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d018      	beq.n	8003174 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	3310      	adds	r3, #16
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f000 ff9e 	bl	800408c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003152:	f000 faad 	bl	80036b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003156:	f000 fdd3 	bl	8003d00 <xTaskResumeAll>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	f47f af7c 	bne.w	800305a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003162:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <xQueueGenericSend+0x1f8>)
 8003164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	f3bf 8f6f 	isb	sy
 8003172:	e772      	b.n	800305a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003176:	f000 fa9b 	bl	80036b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800317a:	f000 fdc1 	bl	8003d00 <xTaskResumeAll>
 800317e:	e76c      	b.n	800305a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003182:	f000 fa95 	bl	80036b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003186:	f000 fdbb 	bl	8003d00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800318a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800318c:	4618      	mov	r0, r3
 800318e:	3738      	adds	r7, #56	; 0x38
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	e000ed04 	.word	0xe000ed04

08003198 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b090      	sub	sp, #64	; 0x40
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80031aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10a      	bne.n	80031c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80031b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b4:	f383 8811 	msr	BASEPRI, r3
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031c2:	bf00      	nop
 80031c4:	e7fe      	b.n	80031c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d103      	bne.n	80031d4 <xQueueGenericSendFromISR+0x3c>
 80031cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <xQueueGenericSendFromISR+0x40>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <xQueueGenericSendFromISR+0x42>
 80031d8:	2300      	movs	r3, #0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10a      	bne.n	80031f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80031de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031f0:	bf00      	nop
 80031f2:	e7fe      	b.n	80031f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d103      	bne.n	8003202 <xQueueGenericSendFromISR+0x6a>
 80031fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <xQueueGenericSendFromISR+0x6e>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <xQueueGenericSendFromISR+0x70>
 8003206:	2300      	movs	r3, #0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10a      	bne.n	8003222 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	623b      	str	r3, [r7, #32]
}
 800321e:	bf00      	nop
 8003220:	e7fe      	b.n	8003220 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003222:	f002 f839 	bl	8005298 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003226:	f3ef 8211 	mrs	r2, BASEPRI
 800322a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322e:	f383 8811 	msr	BASEPRI, r3
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	61fa      	str	r2, [r7, #28]
 800323c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800323e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003240:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324a:	429a      	cmp	r2, r3
 800324c:	d302      	bcc.n	8003254 <xQueueGenericSendFromISR+0xbc>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d12f      	bne.n	80032b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003256:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800325a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800325e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003262:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	68b9      	ldr	r1, [r7, #8]
 8003268:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800326a:	f000 f991 	bl	8003590 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800326e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003276:	d112      	bne.n	800329e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	2b00      	cmp	r3, #0
 800327e:	d016      	beq.n	80032ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003282:	3324      	adds	r3, #36	; 0x24
 8003284:	4618      	mov	r0, r3
 8003286:	f000 ff51 	bl	800412c <xTaskRemoveFromEventList>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00e      	beq.n	80032ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00b      	beq.n	80032ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	e007      	b.n	80032ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800329e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80032a2:	3301      	adds	r3, #1
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	b25a      	sxtb	r2, r3
 80032a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80032ae:	2301      	movs	r3, #1
 80032b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80032b2:	e001      	b.n	80032b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80032c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3740      	adds	r7, #64	; 0x40
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08c      	sub	sp, #48	; 0x30
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80032dc:	2300      	movs	r3, #0
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10a      	bne.n	8003300 <xQueueReceive+0x30>
	__asm volatile
 80032ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	623b      	str	r3, [r7, #32]
}
 80032fc:	bf00      	nop
 80032fe:	e7fe      	b.n	80032fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d103      	bne.n	800330e <xQueueReceive+0x3e>
 8003306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <xQueueReceive+0x42>
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <xQueueReceive+0x44>
 8003312:	2300      	movs	r3, #0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10a      	bne.n	800332e <xQueueReceive+0x5e>
	__asm volatile
 8003318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331c:	f383 8811 	msr	BASEPRI, r3
 8003320:	f3bf 8f6f 	isb	sy
 8003324:	f3bf 8f4f 	dsb	sy
 8003328:	61fb      	str	r3, [r7, #28]
}
 800332a:	bf00      	nop
 800332c:	e7fe      	b.n	800332c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800332e:	f001 f8bb 	bl	80044a8 <xTaskGetSchedulerState>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d102      	bne.n	800333e <xQueueReceive+0x6e>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <xQueueReceive+0x72>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <xQueueReceive+0x74>
 8003342:	2300      	movs	r3, #0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10a      	bne.n	800335e <xQueueReceive+0x8e>
	__asm volatile
 8003348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	61bb      	str	r3, [r7, #24]
}
 800335a:	bf00      	nop
 800335c:	e7fe      	b.n	800335c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800335e:	f001 feb9 	bl	80050d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003366:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	2b00      	cmp	r3, #0
 800336c:	d01f      	beq.n	80033ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003372:	f000 f977 	bl	8003664 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	1e5a      	subs	r2, r3, #1
 800337a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00f      	beq.n	80033a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	3310      	adds	r3, #16
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fece 	bl	800412c <xTaskRemoveFromEventList>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d007      	beq.n	80033a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003396:	4b3d      	ldr	r3, [pc, #244]	; (800348c <xQueueReceive+0x1bc>)
 8003398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033a6:	f001 fec5 	bl	8005134 <vPortExitCritical>
				return pdPASS;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e069      	b.n	8003482 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d103      	bne.n	80033bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033b4:	f001 febe 	bl	8005134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033b8:	2300      	movs	r3, #0
 80033ba:	e062      	b.n	8003482 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033c2:	f107 0310 	add.w	r3, r7, #16
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 ff14 	bl	80041f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033cc:	2301      	movs	r3, #1
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033d0:	f001 feb0 	bl	8005134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033d4:	f000 fc86 	bl	8003ce4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033d8:	f001 fe7c 	bl	80050d4 <vPortEnterCritical>
 80033dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033e2:	b25b      	sxtb	r3, r3
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e8:	d103      	bne.n	80033f2 <xQueueReceive+0x122>
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033f8:	b25b      	sxtb	r3, r3
 80033fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fe:	d103      	bne.n	8003408 <xQueueReceive+0x138>
 8003400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003408:	f001 fe94 	bl	8005134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800340c:	1d3a      	adds	r2, r7, #4
 800340e:	f107 0310 	add.w	r3, r7, #16
 8003412:	4611      	mov	r1, r2
 8003414:	4618      	mov	r0, r3
 8003416:	f000 ff03 	bl	8004220 <xTaskCheckForTimeOut>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d123      	bne.n	8003468 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003422:	f000 f997 	bl	8003754 <prvIsQueueEmpty>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d017      	beq.n	800345c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342e:	3324      	adds	r3, #36	; 0x24
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f000 fe29 	bl	800408c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800343a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800343c:	f000 f938 	bl	80036b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003440:	f000 fc5e 	bl	8003d00 <xTaskResumeAll>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d189      	bne.n	800335e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800344a:	4b10      	ldr	r3, [pc, #64]	; (800348c <xQueueReceive+0x1bc>)
 800344c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	e780      	b.n	800335e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800345c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800345e:	f000 f927 	bl	80036b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003462:	f000 fc4d 	bl	8003d00 <xTaskResumeAll>
 8003466:	e77a      	b.n	800335e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800346a:	f000 f921 	bl	80036b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800346e:	f000 fc47 	bl	8003d00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003474:	f000 f96e 	bl	8003754 <prvIsQueueEmpty>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	f43f af6f 	beq.w	800335e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003480:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003482:	4618      	mov	r0, r3
 8003484:	3730      	adds	r7, #48	; 0x30
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	e000ed04 	.word	0xe000ed04

08003490 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08e      	sub	sp, #56	; 0x38
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10a      	bne.n	80034bc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80034a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034aa:	f383 8811 	msr	BASEPRI, r3
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	623b      	str	r3, [r7, #32]
}
 80034b8:	bf00      	nop
 80034ba:	e7fe      	b.n	80034ba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d103      	bne.n	80034ca <xQueueReceiveFromISR+0x3a>
 80034c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <xQueueReceiveFromISR+0x3e>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <xQueueReceiveFromISR+0x40>
 80034ce:	2300      	movs	r3, #0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10a      	bne.n	80034ea <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80034d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d8:	f383 8811 	msr	BASEPRI, r3
 80034dc:	f3bf 8f6f 	isb	sy
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	61fb      	str	r3, [r7, #28]
}
 80034e6:	bf00      	nop
 80034e8:	e7fe      	b.n	80034e8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034ea:	f001 fed5 	bl	8005298 <vPortValidateInterruptPriority>
	__asm volatile
 80034ee:	f3ef 8211 	mrs	r2, BASEPRI
 80034f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	61ba      	str	r2, [r7, #24]
 8003504:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003506:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800350a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003512:	2b00      	cmp	r3, #0
 8003514:	d02f      	beq.n	8003576 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003518:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800351c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003524:	f000 f89e 	bl	8003664 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352a:	1e5a      	subs	r2, r3, #1
 800352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003530:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d112      	bne.n	8003560 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d016      	beq.n	8003570 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	3310      	adds	r3, #16
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fdf0 	bl	800412c <xTaskRemoveFromEventList>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00e      	beq.n	8003570 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00b      	beq.n	8003570 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	e007      	b.n	8003570 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003564:	3301      	adds	r3, #1
 8003566:	b2db      	uxtb	r3, r3
 8003568:	b25a      	sxtb	r2, r3
 800356a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003570:	2301      	movs	r3, #1
 8003572:	637b      	str	r3, [r7, #52]	; 0x34
 8003574:	e001      	b.n	800357a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003576:	2300      	movs	r3, #0
 8003578:	637b      	str	r3, [r7, #52]	; 0x34
 800357a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f383 8811 	msr	BASEPRI, r3
}
 8003584:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003588:	4618      	mov	r0, r3
 800358a:	3738      	adds	r7, #56	; 0x38
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10d      	bne.n	80035ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d14d      	bne.n	8003652 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 ff92 	bl	80044e4 <xTaskPriorityDisinherit>
 80035c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	609a      	str	r2, [r3, #8]
 80035c8:	e043      	b.n	8003652 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d119      	bne.n	8003604 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6858      	ldr	r0, [r3, #4]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	461a      	mov	r2, r3
 80035da:	68b9      	ldr	r1, [r7, #8]
 80035dc:	f002 f8b0 	bl	8005740 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	441a      	add	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d32b      	bcc.n	8003652 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	e026      	b.n	8003652 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	68d8      	ldr	r0, [r3, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	461a      	mov	r2, r3
 800360e:	68b9      	ldr	r1, [r7, #8]
 8003610:	f002 f896 	bl	8005740 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	425b      	negs	r3, r3
 800361e:	441a      	add	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d207      	bcs.n	8003640 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	425b      	negs	r3, r3
 800363a:	441a      	add	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d105      	bne.n	8003652 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	3b01      	subs	r3, #1
 8003650:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800365a:	697b      	ldr	r3, [r7, #20]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	2b00      	cmp	r3, #0
 8003674:	d018      	beq.n	80036a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	441a      	add	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	429a      	cmp	r2, r3
 800368e:	d303      	bcc.n	8003698 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68d9      	ldr	r1, [r3, #12]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	461a      	mov	r2, r3
 80036a2:	6838      	ldr	r0, [r7, #0]
 80036a4:	f002 f84c 	bl	8005740 <memcpy>
	}
}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80036b8:	f001 fd0c 	bl	80050d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036c4:	e011      	b.n	80036ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d012      	beq.n	80036f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3324      	adds	r3, #36	; 0x24
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fd2a 	bl	800412c <xTaskRemoveFromEventList>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80036de:	f000 fe01 	bl	80042e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	dce9      	bgt.n	80036c6 <prvUnlockQueue+0x16>
 80036f2:	e000      	b.n	80036f6 <prvUnlockQueue+0x46>
					break;
 80036f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	22ff      	movs	r2, #255	; 0xff
 80036fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80036fe:	f001 fd19 	bl	8005134 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003702:	f001 fce7 	bl	80050d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800370c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800370e:	e011      	b.n	8003734 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d012      	beq.n	800373e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3310      	adds	r3, #16
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fd05 	bl	800412c <xTaskRemoveFromEventList>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003728:	f000 fddc 	bl	80042e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800372c:	7bbb      	ldrb	r3, [r7, #14]
 800372e:	3b01      	subs	r3, #1
 8003730:	b2db      	uxtb	r3, r3
 8003732:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003734:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003738:	2b00      	cmp	r3, #0
 800373a:	dce9      	bgt.n	8003710 <prvUnlockQueue+0x60>
 800373c:	e000      	b.n	8003740 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800373e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	22ff      	movs	r2, #255	; 0xff
 8003744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003748:	f001 fcf4 	bl	8005134 <vPortExitCritical>
}
 800374c:	bf00      	nop
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800375c:	f001 fcba 	bl	80050d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	2b00      	cmp	r3, #0
 8003766:	d102      	bne.n	800376e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003768:	2301      	movs	r3, #1
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	e001      	b.n	8003772 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003772:	f001 fcdf 	bl	8005134 <vPortExitCritical>

	return xReturn;
 8003776:	68fb      	ldr	r3, [r7, #12]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003788:	f001 fca4 	bl	80050d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003794:	429a      	cmp	r2, r3
 8003796:	d102      	bne.n	800379e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003798:	2301      	movs	r3, #1
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	e001      	b.n	80037a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80037a2:	f001 fcc7 	bl	8005134 <vPortExitCritical>

	return xReturn;
 80037a6:	68fb      	ldr	r3, [r7, #12]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	e014      	b.n	80037ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80037c0:	4a0f      	ldr	r2, [pc, #60]	; (8003800 <vQueueAddToRegistry+0x50>)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10b      	bne.n	80037e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80037cc:	490c      	ldr	r1, [pc, #48]	; (8003800 <vQueueAddToRegistry+0x50>)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80037d6:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <vQueueAddToRegistry+0x50>)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4413      	add	r3, r2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80037e2:	e006      	b.n	80037f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	3301      	adds	r3, #1
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b07      	cmp	r3, #7
 80037ee:	d9e7      	bls.n	80037c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80037f0:	bf00      	nop
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	20000a04 	.word	0x20000a04

08003804 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003814:	f001 fc5e 	bl	80050d4 <vPortEnterCritical>
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800381e:	b25b      	sxtb	r3, r3
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003824:	d103      	bne.n	800382e <vQueueWaitForMessageRestricted+0x2a>
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003834:	b25b      	sxtb	r3, r3
 8003836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383a:	d103      	bne.n	8003844 <vQueueWaitForMessageRestricted+0x40>
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003844:	f001 fc76 	bl	8005134 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	2b00      	cmp	r3, #0
 800384e:	d106      	bne.n	800385e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	3324      	adds	r3, #36	; 0x24
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fc3b 	bl	80040d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800385e:	6978      	ldr	r0, [r7, #20]
 8003860:	f7ff ff26 	bl	80036b0 <prvUnlockQueue>
	}
 8003864:	bf00      	nop
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08e      	sub	sp, #56	; 0x38
 8003870:	af04      	add	r7, sp, #16
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800387a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10a      	bne.n	8003896 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003884:	f383 8811 	msr	BASEPRI, r3
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	623b      	str	r3, [r7, #32]
}
 8003892:	bf00      	nop
 8003894:	e7fe      	b.n	8003894 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10a      	bne.n	80038b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	61fb      	str	r3, [r7, #28]
}
 80038ae:	bf00      	nop
 80038b0:	e7fe      	b.n	80038b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80038b2:	235c      	movs	r3, #92	; 0x5c
 80038b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	2b5c      	cmp	r3, #92	; 0x5c
 80038ba:	d00a      	beq.n	80038d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	61bb      	str	r3, [r7, #24]
}
 80038ce:	bf00      	nop
 80038d0:	e7fe      	b.n	80038d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80038d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80038d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d01e      	beq.n	8003918 <xTaskCreateStatic+0xac>
 80038da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01b      	beq.n	8003918 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	2202      	movs	r2, #2
 80038ee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038f2:	2300      	movs	r3, #0
 80038f4:	9303      	str	r3, [sp, #12]
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	9302      	str	r3, [sp, #8]
 80038fa:	f107 0314 	add.w	r3, r7, #20
 80038fe:	9301      	str	r3, [sp, #4]
 8003900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f850 	bl	80039b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003910:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003912:	f000 f8dd 	bl	8003ad0 <prvAddNewTaskToReadyList>
 8003916:	e001      	b.n	800391c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800391c:	697b      	ldr	r3, [r7, #20]
	}
 800391e:	4618      	mov	r0, r3
 8003920:	3728      	adds	r7, #40	; 0x28
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003926:	b580      	push	{r7, lr}
 8003928:	b08c      	sub	sp, #48	; 0x30
 800392a:	af04      	add	r7, sp, #16
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	603b      	str	r3, [r7, #0]
 8003932:	4613      	mov	r3, r2
 8003934:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003936:	88fb      	ldrh	r3, [r7, #6]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4618      	mov	r0, r3
 800393c:	f001 fcec 	bl	8005318 <pvPortMalloc>
 8003940:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00e      	beq.n	8003966 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003948:	205c      	movs	r0, #92	; 0x5c
 800394a:	f001 fce5 	bl	8005318 <pvPortMalloc>
 800394e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	631a      	str	r2, [r3, #48]	; 0x30
 800395c:	e005      	b.n	800396a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800395e:	6978      	ldr	r0, [r7, #20]
 8003960:	f001 fda6 	bl	80054b0 <vPortFree>
 8003964:	e001      	b.n	800396a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d017      	beq.n	80039a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003978:	88fa      	ldrh	r2, [r7, #6]
 800397a:	2300      	movs	r3, #0
 800397c:	9303      	str	r3, [sp, #12]
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	9302      	str	r3, [sp, #8]
 8003982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003984:	9301      	str	r3, [sp, #4]
 8003986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68b9      	ldr	r1, [r7, #8]
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 f80e 	bl	80039b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003994:	69f8      	ldr	r0, [r7, #28]
 8003996:	f000 f89b 	bl	8003ad0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800399a:	2301      	movs	r3, #1
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	e002      	b.n	80039a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039a0:	f04f 33ff 	mov.w	r3, #4294967295
 80039a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039a6:	69bb      	ldr	r3, [r7, #24]
	}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3720      	adds	r7, #32
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80039be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	461a      	mov	r2, r3
 80039c8:	21a5      	movs	r1, #165	; 0xa5
 80039ca:	f001 fec7 	bl	800575c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039d8:	3b01      	subs	r3, #1
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	f023 0307 	bic.w	r3, r3, #7
 80039e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <prvInitialiseNewTask+0x58>
	__asm volatile
 80039f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	617b      	str	r3, [r7, #20]
}
 8003a04:	bf00      	nop
 8003a06:	e7fe      	b.n	8003a06 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d01f      	beq.n	8003a4e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	e012      	b.n	8003a3a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	4413      	add	r3, r2
 8003a1a:	7819      	ldrb	r1, [r3, #0]
 8003a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	4413      	add	r3, r2
 8003a22:	3334      	adds	r3, #52	; 0x34
 8003a24:	460a      	mov	r2, r1
 8003a26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d006      	beq.n	8003a42 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	3301      	adds	r3, #1
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	2b0f      	cmp	r3, #15
 8003a3e:	d9e9      	bls.n	8003a14 <prvInitialiseNewTask+0x64>
 8003a40:	e000      	b.n	8003a44 <prvInitialiseNewTask+0x94>
			{
				break;
 8003a42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a4c:	e003      	b.n	8003a56 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a58:	2b37      	cmp	r3, #55	; 0x37
 8003a5a:	d901      	bls.n	8003a60 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a5c:	2337      	movs	r3, #55	; 0x37
 8003a5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a6a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6e:	2200      	movs	r2, #0
 8003a70:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a74:	3304      	adds	r3, #4
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff f872 	bl	8002b60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7e:	3318      	adds	r3, #24
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff f86d 	bl	8002b60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	68f9      	ldr	r1, [r7, #12]
 8003aae:	69b8      	ldr	r0, [r7, #24]
 8003ab0:	f001 f9e2 	bl	8004e78 <pxPortInitialiseStack>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ac4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ac6:	bf00      	nop
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ad8:	f001 fafc 	bl	80050d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003adc:	4b2d      	ldr	r3, [pc, #180]	; (8003b94 <prvAddNewTaskToReadyList+0xc4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	4a2c      	ldr	r2, [pc, #176]	; (8003b94 <prvAddNewTaskToReadyList+0xc4>)
 8003ae4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ae6:	4b2c      	ldr	r3, [pc, #176]	; (8003b98 <prvAddNewTaskToReadyList+0xc8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d109      	bne.n	8003b02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003aee:	4a2a      	ldr	r2, [pc, #168]	; (8003b98 <prvAddNewTaskToReadyList+0xc8>)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003af4:	4b27      	ldr	r3, [pc, #156]	; (8003b94 <prvAddNewTaskToReadyList+0xc4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d110      	bne.n	8003b1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003afc:	f000 fc16 	bl	800432c <prvInitialiseTaskLists>
 8003b00:	e00d      	b.n	8003b1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b02:	4b26      	ldr	r3, [pc, #152]	; (8003b9c <prvAddNewTaskToReadyList+0xcc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b0a:	4b23      	ldr	r3, [pc, #140]	; (8003b98 <prvAddNewTaskToReadyList+0xc8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d802      	bhi.n	8003b1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b18:	4a1f      	ldr	r2, [pc, #124]	; (8003b98 <prvAddNewTaskToReadyList+0xc8>)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b1e:	4b20      	ldr	r3, [pc, #128]	; (8003ba0 <prvAddNewTaskToReadyList+0xd0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3301      	adds	r3, #1
 8003b24:	4a1e      	ldr	r2, [pc, #120]	; (8003ba0 <prvAddNewTaskToReadyList+0xd0>)
 8003b26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b28:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <prvAddNewTaskToReadyList+0xd0>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b34:	4b1b      	ldr	r3, [pc, #108]	; (8003ba4 <prvAddNewTaskToReadyList+0xd4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d903      	bls.n	8003b44 <prvAddNewTaskToReadyList+0x74>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	4a18      	ldr	r2, [pc, #96]	; (8003ba4 <prvAddNewTaskToReadyList+0xd4>)
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4a15      	ldr	r2, [pc, #84]	; (8003ba8 <prvAddNewTaskToReadyList+0xd8>)
 8003b52:	441a      	add	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	f7ff f80d 	bl	8002b7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b60:	f001 fae8 	bl	8005134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b64:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <prvAddNewTaskToReadyList+0xcc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00e      	beq.n	8003b8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <prvAddNewTaskToReadyList+0xc8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d207      	bcs.n	8003b8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <prvAddNewTaskToReadyList+0xdc>)
 8003b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000f18 	.word	0x20000f18
 8003b98:	20000a44 	.word	0x20000a44
 8003b9c:	20000f24 	.word	0x20000f24
 8003ba0:	20000f34 	.word	0x20000f34
 8003ba4:	20000f20 	.word	0x20000f20
 8003ba8:	20000a48 	.word	0x20000a48
 8003bac:	e000ed04 	.word	0xe000ed04

08003bb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d017      	beq.n	8003bf2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003bc2:	4b13      	ldr	r3, [pc, #76]	; (8003c10 <vTaskDelay+0x60>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <vTaskDelay+0x30>
	__asm volatile
 8003bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	60bb      	str	r3, [r7, #8]
}
 8003bdc:	bf00      	nop
 8003bde:	e7fe      	b.n	8003bde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003be0:	f000 f880 	bl	8003ce4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003be4:	2100      	movs	r1, #0
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 fcea 	bl	80045c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003bec:	f000 f888 	bl	8003d00 <xTaskResumeAll>
 8003bf0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d107      	bne.n	8003c08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <vTaskDelay+0x64>)
 8003bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c08:	bf00      	nop
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20000f40 	.word	0x20000f40
 8003c14:	e000ed04 	.word	0xe000ed04

08003c18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08a      	sub	sp, #40	; 0x28
 8003c1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c26:	463a      	mov	r2, r7
 8003c28:	1d39      	adds	r1, r7, #4
 8003c2a:	f107 0308 	add.w	r3, r7, #8
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe ff42 	bl	8002ab8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c34:	6839      	ldr	r1, [r7, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	9202      	str	r2, [sp, #8]
 8003c3c:	9301      	str	r3, [sp, #4]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	2300      	movs	r3, #0
 8003c44:	460a      	mov	r2, r1
 8003c46:	4921      	ldr	r1, [pc, #132]	; (8003ccc <vTaskStartScheduler+0xb4>)
 8003c48:	4821      	ldr	r0, [pc, #132]	; (8003cd0 <vTaskStartScheduler+0xb8>)
 8003c4a:	f7ff fe0f 	bl	800386c <xTaskCreateStatic>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	4a20      	ldr	r2, [pc, #128]	; (8003cd4 <vTaskStartScheduler+0xbc>)
 8003c52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c54:	4b1f      	ldr	r3, [pc, #124]	; (8003cd4 <vTaskStartScheduler+0xbc>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	e001      	b.n	8003c66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d102      	bne.n	8003c72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c6c:	f000 fcfc 	bl	8004668 <xTimerCreateTimerTask>
 8003c70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d116      	bne.n	8003ca6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7c:	f383 8811 	msr	BASEPRI, r3
 8003c80:	f3bf 8f6f 	isb	sy
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	613b      	str	r3, [r7, #16]
}
 8003c8a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c8c:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <vTaskStartScheduler+0xc0>)
 8003c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c94:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <vTaskStartScheduler+0xc4>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c9a:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <vTaskStartScheduler+0xc8>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ca0:	f001 f976 	bl	8004f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ca4:	e00e      	b.n	8003cc4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cac:	d10a      	bne.n	8003cc4 <vTaskStartScheduler+0xac>
	__asm volatile
 8003cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	60fb      	str	r3, [r7, #12]
}
 8003cc0:	bf00      	nop
 8003cc2:	e7fe      	b.n	8003cc2 <vTaskStartScheduler+0xaa>
}
 8003cc4:	bf00      	nop
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	080060a8 	.word	0x080060a8
 8003cd0:	080042fd 	.word	0x080042fd
 8003cd4:	20000f3c 	.word	0x20000f3c
 8003cd8:	20000f38 	.word	0x20000f38
 8003cdc:	20000f24 	.word	0x20000f24
 8003ce0:	20000f1c 	.word	0x20000f1c

08003ce4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ce8:	4b04      	ldr	r3, [pc, #16]	; (8003cfc <vTaskSuspendAll+0x18>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3301      	adds	r3, #1
 8003cee:	4a03      	ldr	r2, [pc, #12]	; (8003cfc <vTaskSuspendAll+0x18>)
 8003cf0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003cf2:	bf00      	nop
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	20000f40 	.word	0x20000f40

08003d00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d0e:	4b42      	ldr	r3, [pc, #264]	; (8003e18 <xTaskResumeAll+0x118>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10a      	bne.n	8003d2c <xTaskResumeAll+0x2c>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	603b      	str	r3, [r7, #0]
}
 8003d28:	bf00      	nop
 8003d2a:	e7fe      	b.n	8003d2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d2c:	f001 f9d2 	bl	80050d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d30:	4b39      	ldr	r3, [pc, #228]	; (8003e18 <xTaskResumeAll+0x118>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	4a38      	ldr	r2, [pc, #224]	; (8003e18 <xTaskResumeAll+0x118>)
 8003d38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d3a:	4b37      	ldr	r3, [pc, #220]	; (8003e18 <xTaskResumeAll+0x118>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d162      	bne.n	8003e08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d42:	4b36      	ldr	r3, [pc, #216]	; (8003e1c <xTaskResumeAll+0x11c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d05e      	beq.n	8003e08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d4a:	e02f      	b.n	8003dac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d4c:	4b34      	ldr	r3, [pc, #208]	; (8003e20 <xTaskResumeAll+0x120>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	3318      	adds	r3, #24
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fe ff6b 	bl	8002c34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3304      	adds	r3, #4
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fe ff66 	bl	8002c34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6c:	4b2d      	ldr	r3, [pc, #180]	; (8003e24 <xTaskResumeAll+0x124>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d903      	bls.n	8003d7c <xTaskResumeAll+0x7c>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	4a2a      	ldr	r2, [pc, #168]	; (8003e24 <xTaskResumeAll+0x124>)
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4a27      	ldr	r2, [pc, #156]	; (8003e28 <xTaskResumeAll+0x128>)
 8003d8a:	441a      	add	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	4619      	mov	r1, r3
 8003d92:	4610      	mov	r0, r2
 8003d94:	f7fe fef1 	bl	8002b7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9c:	4b23      	ldr	r3, [pc, #140]	; (8003e2c <xTaskResumeAll+0x12c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d302      	bcc.n	8003dac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003da6:	4b22      	ldr	r3, [pc, #136]	; (8003e30 <xTaskResumeAll+0x130>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dac:	4b1c      	ldr	r3, [pc, #112]	; (8003e20 <xTaskResumeAll+0x120>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1cb      	bne.n	8003d4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003dba:	f000 fb55 	bl	8004468 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003dbe:	4b1d      	ldr	r3, [pc, #116]	; (8003e34 <xTaskResumeAll+0x134>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d010      	beq.n	8003dec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003dca:	f000 f847 	bl	8003e5c <xTaskIncrementTick>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003dd4:	4b16      	ldr	r3, [pc, #88]	; (8003e30 <xTaskResumeAll+0x130>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f1      	bne.n	8003dca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003de6:	4b13      	ldr	r3, [pc, #76]	; (8003e34 <xTaskResumeAll+0x134>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003dec:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <xTaskResumeAll+0x130>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d009      	beq.n	8003e08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003df4:	2301      	movs	r3, #1
 8003df6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003df8:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <xTaskResumeAll+0x138>)
 8003dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e08:	f001 f994 	bl	8005134 <vPortExitCritical>

	return xAlreadyYielded;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20000f40 	.word	0x20000f40
 8003e1c:	20000f18 	.word	0x20000f18
 8003e20:	20000ed8 	.word	0x20000ed8
 8003e24:	20000f20 	.word	0x20000f20
 8003e28:	20000a48 	.word	0x20000a48
 8003e2c:	20000a44 	.word	0x20000a44
 8003e30:	20000f2c 	.word	0x20000f2c
 8003e34:	20000f28 	.word	0x20000f28
 8003e38:	e000ed04 	.word	0xe000ed04

08003e3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e42:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <xTaskGetTickCount+0x1c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e48:	687b      	ldr	r3, [r7, #4]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20000f1c 	.word	0x20000f1c

08003e5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e66:	4b4f      	ldr	r3, [pc, #316]	; (8003fa4 <xTaskIncrementTick+0x148>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f040 808f 	bne.w	8003f8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e70:	4b4d      	ldr	r3, [pc, #308]	; (8003fa8 <xTaskIncrementTick+0x14c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3301      	adds	r3, #1
 8003e76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e78:	4a4b      	ldr	r2, [pc, #300]	; (8003fa8 <xTaskIncrementTick+0x14c>)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d120      	bne.n	8003ec6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e84:	4b49      	ldr	r3, [pc, #292]	; (8003fac <xTaskIncrementTick+0x150>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <xTaskIncrementTick+0x48>
	__asm volatile
 8003e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	603b      	str	r3, [r7, #0]
}
 8003ea0:	bf00      	nop
 8003ea2:	e7fe      	b.n	8003ea2 <xTaskIncrementTick+0x46>
 8003ea4:	4b41      	ldr	r3, [pc, #260]	; (8003fac <xTaskIncrementTick+0x150>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	4b41      	ldr	r3, [pc, #260]	; (8003fb0 <xTaskIncrementTick+0x154>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a3f      	ldr	r2, [pc, #252]	; (8003fac <xTaskIncrementTick+0x150>)
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	4a3f      	ldr	r2, [pc, #252]	; (8003fb0 <xTaskIncrementTick+0x154>)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6013      	str	r3, [r2, #0]
 8003eb8:	4b3e      	ldr	r3, [pc, #248]	; (8003fb4 <xTaskIncrementTick+0x158>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	4a3d      	ldr	r2, [pc, #244]	; (8003fb4 <xTaskIncrementTick+0x158>)
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	f000 fad1 	bl	8004468 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ec6:	4b3c      	ldr	r3, [pc, #240]	; (8003fb8 <xTaskIncrementTick+0x15c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d349      	bcc.n	8003f64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ed0:	4b36      	ldr	r3, [pc, #216]	; (8003fac <xTaskIncrementTick+0x150>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d104      	bne.n	8003ee4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eda:	4b37      	ldr	r3, [pc, #220]	; (8003fb8 <xTaskIncrementTick+0x15c>)
 8003edc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee0:	601a      	str	r2, [r3, #0]
					break;
 8003ee2:	e03f      	b.n	8003f64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ee4:	4b31      	ldr	r3, [pc, #196]	; (8003fac <xTaskIncrementTick+0x150>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d203      	bcs.n	8003f04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003efc:	4a2e      	ldr	r2, [pc, #184]	; (8003fb8 <xTaskIncrementTick+0x15c>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f02:	e02f      	b.n	8003f64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	3304      	adds	r3, #4
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fe fe93 	bl	8002c34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d004      	beq.n	8003f20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	3318      	adds	r3, #24
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fe fe8a 	bl	8002c34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f24:	4b25      	ldr	r3, [pc, #148]	; (8003fbc <xTaskIncrementTick+0x160>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d903      	bls.n	8003f34 <xTaskIncrementTick+0xd8>
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	4a22      	ldr	r2, [pc, #136]	; (8003fbc <xTaskIncrementTick+0x160>)
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f38:	4613      	mov	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4a1f      	ldr	r2, [pc, #124]	; (8003fc0 <xTaskIncrementTick+0x164>)
 8003f42:	441a      	add	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	f7fe fe15 	bl	8002b7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f54:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <xTaskIncrementTick+0x168>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d3b8      	bcc.n	8003ed0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f62:	e7b5      	b.n	8003ed0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f64:	4b17      	ldr	r3, [pc, #92]	; (8003fc4 <xTaskIncrementTick+0x168>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6a:	4915      	ldr	r1, [pc, #84]	; (8003fc0 <xTaskIncrementTick+0x164>)
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d901      	bls.n	8003f80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f80:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <xTaskIncrementTick+0x16c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d007      	beq.n	8003f98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	e004      	b.n	8003f98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f8e:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <xTaskIncrementTick+0x170>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3301      	adds	r3, #1
 8003f94:	4a0d      	ldr	r2, [pc, #52]	; (8003fcc <xTaskIncrementTick+0x170>)
 8003f96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f98:	697b      	ldr	r3, [r7, #20]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000f40 	.word	0x20000f40
 8003fa8:	20000f1c 	.word	0x20000f1c
 8003fac:	20000ed0 	.word	0x20000ed0
 8003fb0:	20000ed4 	.word	0x20000ed4
 8003fb4:	20000f30 	.word	0x20000f30
 8003fb8:	20000f38 	.word	0x20000f38
 8003fbc:	20000f20 	.word	0x20000f20
 8003fc0:	20000a48 	.word	0x20000a48
 8003fc4:	20000a44 	.word	0x20000a44
 8003fc8:	20000f2c 	.word	0x20000f2c
 8003fcc:	20000f28 	.word	0x20000f28

08003fd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fd6:	4b28      	ldr	r3, [pc, #160]	; (8004078 <vTaskSwitchContext+0xa8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003fde:	4b27      	ldr	r3, [pc, #156]	; (800407c <vTaskSwitchContext+0xac>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003fe4:	e041      	b.n	800406a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003fe6:	4b25      	ldr	r3, [pc, #148]	; (800407c <vTaskSwitchContext+0xac>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fec:	4b24      	ldr	r3, [pc, #144]	; (8004080 <vTaskSwitchContext+0xb0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	e010      	b.n	8004016 <vTaskSwitchContext+0x46>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10a      	bne.n	8004010 <vTaskSwitchContext+0x40>
	__asm volatile
 8003ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	607b      	str	r3, [r7, #4]
}
 800400c:	bf00      	nop
 800400e:	e7fe      	b.n	800400e <vTaskSwitchContext+0x3e>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3b01      	subs	r3, #1
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	491b      	ldr	r1, [pc, #108]	; (8004084 <vTaskSwitchContext+0xb4>)
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4613      	mov	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0e4      	beq.n	8003ff4 <vTaskSwitchContext+0x24>
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4a13      	ldr	r2, [pc, #76]	; (8004084 <vTaskSwitchContext+0xb4>)
 8004036:	4413      	add	r3, r2
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	605a      	str	r2, [r3, #4]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	3308      	adds	r3, #8
 800404c:	429a      	cmp	r2, r3
 800404e:	d104      	bne.n	800405a <vTaskSwitchContext+0x8a>
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	4a09      	ldr	r2, [pc, #36]	; (8004088 <vTaskSwitchContext+0xb8>)
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	4a06      	ldr	r2, [pc, #24]	; (8004080 <vTaskSwitchContext+0xb0>)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6013      	str	r3, [r2, #0]
}
 800406a:	bf00      	nop
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	20000f40 	.word	0x20000f40
 800407c:	20000f2c 	.word	0x20000f2c
 8004080:	20000f20 	.word	0x20000f20
 8004084:	20000a48 	.word	0x20000a48
 8004088:	20000a44 	.word	0x20000a44

0800408c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	60fb      	str	r3, [r7, #12]
}
 80040ae:	bf00      	nop
 80040b0:	e7fe      	b.n	80040b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040b2:	4b07      	ldr	r3, [pc, #28]	; (80040d0 <vTaskPlaceOnEventList+0x44>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3318      	adds	r3, #24
 80040b8:	4619      	mov	r1, r3
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fe fd81 	bl	8002bc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040c0:	2101      	movs	r1, #1
 80040c2:	6838      	ldr	r0, [r7, #0]
 80040c4:	f000 fa7c 	bl	80045c0 <prvAddCurrentTaskToDelayedList>
}
 80040c8:	bf00      	nop
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20000a44 	.word	0x20000a44

080040d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10a      	bne.n	80040fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80040e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ea:	f383 8811 	msr	BASEPRI, r3
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	617b      	str	r3, [r7, #20]
}
 80040f8:	bf00      	nop
 80040fa:	e7fe      	b.n	80040fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040fc:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <vTaskPlaceOnEventListRestricted+0x54>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3318      	adds	r3, #24
 8004102:	4619      	mov	r1, r3
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f7fe fd38 	bl	8002b7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004110:	f04f 33ff 	mov.w	r3, #4294967295
 8004114:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	68b8      	ldr	r0, [r7, #8]
 800411a:	f000 fa51 	bl	80045c0 <prvAddCurrentTaskToDelayedList>
	}
 800411e:	bf00      	nop
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20000a44 	.word	0x20000a44

0800412c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10a      	bne.n	8004158 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	60fb      	str	r3, [r7, #12]
}
 8004154:	bf00      	nop
 8004156:	e7fe      	b.n	8004156 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	3318      	adds	r3, #24
 800415c:	4618      	mov	r0, r3
 800415e:	f7fe fd69 	bl	8002c34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004162:	4b1e      	ldr	r3, [pc, #120]	; (80041dc <xTaskRemoveFromEventList+0xb0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d11d      	bne.n	80041a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	3304      	adds	r3, #4
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe fd60 	bl	8002c34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004178:	4b19      	ldr	r3, [pc, #100]	; (80041e0 <xTaskRemoveFromEventList+0xb4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d903      	bls.n	8004188 <xTaskRemoveFromEventList+0x5c>
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	4a16      	ldr	r2, [pc, #88]	; (80041e0 <xTaskRemoveFromEventList+0xb4>)
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4a13      	ldr	r2, [pc, #76]	; (80041e4 <xTaskRemoveFromEventList+0xb8>)
 8004196:	441a      	add	r2, r3
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	3304      	adds	r3, #4
 800419c:	4619      	mov	r1, r3
 800419e:	4610      	mov	r0, r2
 80041a0:	f7fe fceb 	bl	8002b7a <vListInsertEnd>
 80041a4:	e005      	b.n	80041b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	3318      	adds	r3, #24
 80041aa:	4619      	mov	r1, r3
 80041ac:	480e      	ldr	r0, [pc, #56]	; (80041e8 <xTaskRemoveFromEventList+0xbc>)
 80041ae:	f7fe fce4 	bl	8002b7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b6:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <xTaskRemoveFromEventList+0xc0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	429a      	cmp	r2, r3
 80041be:	d905      	bls.n	80041cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041c0:	2301      	movs	r3, #1
 80041c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041c4:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <xTaskRemoveFromEventList+0xc4>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	e001      	b.n	80041d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80041d0:	697b      	ldr	r3, [r7, #20]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000f40 	.word	0x20000f40
 80041e0:	20000f20 	.word	0x20000f20
 80041e4:	20000a48 	.word	0x20000a48
 80041e8:	20000ed8 	.word	0x20000ed8
 80041ec:	20000a44 	.word	0x20000a44
 80041f0:	20000f2c 	.word	0x20000f2c

080041f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041fc:	4b06      	ldr	r3, [pc, #24]	; (8004218 <vTaskInternalSetTimeOutState+0x24>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004204:	4b05      	ldr	r3, [pc, #20]	; (800421c <vTaskInternalSetTimeOutState+0x28>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	605a      	str	r2, [r3, #4]
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	20000f30 	.word	0x20000f30
 800421c:	20000f1c 	.word	0x20000f1c

08004220 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	613b      	str	r3, [r7, #16]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10a      	bne.n	8004262 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	60fb      	str	r3, [r7, #12]
}
 800425e:	bf00      	nop
 8004260:	e7fe      	b.n	8004260 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004262:	f000 ff37 	bl	80050d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004266:	4b1d      	ldr	r3, [pc, #116]	; (80042dc <xTaskCheckForTimeOut+0xbc>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427e:	d102      	bne.n	8004286 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004280:	2300      	movs	r3, #0
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	e023      	b.n	80042ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <xTaskCheckForTimeOut+0xc0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d007      	beq.n	80042a2 <xTaskCheckForTimeOut+0x82>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	429a      	cmp	r2, r3
 800429a:	d302      	bcc.n	80042a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800429c:	2301      	movs	r3, #1
 800429e:	61fb      	str	r3, [r7, #28]
 80042a0:	e015      	b.n	80042ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d20b      	bcs.n	80042c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	1ad2      	subs	r2, r2, r3
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff ff9b 	bl	80041f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042be:	2300      	movs	r3, #0
 80042c0:	61fb      	str	r3, [r7, #28]
 80042c2:	e004      	b.n	80042ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042ca:	2301      	movs	r3, #1
 80042cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042ce:	f000 ff31 	bl	8005134 <vPortExitCritical>

	return xReturn;
 80042d2:	69fb      	ldr	r3, [r7, #28]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3720      	adds	r7, #32
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	20000f1c 	.word	0x20000f1c
 80042e0:	20000f30 	.word	0x20000f30

080042e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042e8:	4b03      	ldr	r3, [pc, #12]	; (80042f8 <vTaskMissedYield+0x14>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
}
 80042ee:	bf00      	nop
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	20000f2c 	.word	0x20000f2c

080042fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004304:	f000 f852 	bl	80043ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004308:	4b06      	ldr	r3, [pc, #24]	; (8004324 <prvIdleTask+0x28>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d9f9      	bls.n	8004304 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004310:	4b05      	ldr	r3, [pc, #20]	; (8004328 <prvIdleTask+0x2c>)
 8004312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004320:	e7f0      	b.n	8004304 <prvIdleTask+0x8>
 8004322:	bf00      	nop
 8004324:	20000a48 	.word	0x20000a48
 8004328:	e000ed04 	.word	0xe000ed04

0800432c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004332:	2300      	movs	r3, #0
 8004334:	607b      	str	r3, [r7, #4]
 8004336:	e00c      	b.n	8004352 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4a12      	ldr	r2, [pc, #72]	; (800438c <prvInitialiseTaskLists+0x60>)
 8004344:	4413      	add	r3, r2
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe fbea 	bl	8002b20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3301      	adds	r3, #1
 8004350:	607b      	str	r3, [r7, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b37      	cmp	r3, #55	; 0x37
 8004356:	d9ef      	bls.n	8004338 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004358:	480d      	ldr	r0, [pc, #52]	; (8004390 <prvInitialiseTaskLists+0x64>)
 800435a:	f7fe fbe1 	bl	8002b20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800435e:	480d      	ldr	r0, [pc, #52]	; (8004394 <prvInitialiseTaskLists+0x68>)
 8004360:	f7fe fbde 	bl	8002b20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004364:	480c      	ldr	r0, [pc, #48]	; (8004398 <prvInitialiseTaskLists+0x6c>)
 8004366:	f7fe fbdb 	bl	8002b20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800436a:	480c      	ldr	r0, [pc, #48]	; (800439c <prvInitialiseTaskLists+0x70>)
 800436c:	f7fe fbd8 	bl	8002b20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004370:	480b      	ldr	r0, [pc, #44]	; (80043a0 <prvInitialiseTaskLists+0x74>)
 8004372:	f7fe fbd5 	bl	8002b20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <prvInitialiseTaskLists+0x78>)
 8004378:	4a05      	ldr	r2, [pc, #20]	; (8004390 <prvInitialiseTaskLists+0x64>)
 800437a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <prvInitialiseTaskLists+0x7c>)
 800437e:	4a05      	ldr	r2, [pc, #20]	; (8004394 <prvInitialiseTaskLists+0x68>)
 8004380:	601a      	str	r2, [r3, #0]
}
 8004382:	bf00      	nop
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20000a48 	.word	0x20000a48
 8004390:	20000ea8 	.word	0x20000ea8
 8004394:	20000ebc 	.word	0x20000ebc
 8004398:	20000ed8 	.word	0x20000ed8
 800439c:	20000eec 	.word	0x20000eec
 80043a0:	20000f04 	.word	0x20000f04
 80043a4:	20000ed0 	.word	0x20000ed0
 80043a8:	20000ed4 	.word	0x20000ed4

080043ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043b2:	e019      	b.n	80043e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043b4:	f000 fe8e 	bl	80050d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043b8:	4b10      	ldr	r3, [pc, #64]	; (80043fc <prvCheckTasksWaitingTermination+0x50>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fe fc35 	bl	8002c34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043ca:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <prvCheckTasksWaitingTermination+0x54>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	4a0b      	ldr	r2, [pc, #44]	; (8004400 <prvCheckTasksWaitingTermination+0x54>)
 80043d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043d4:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <prvCheckTasksWaitingTermination+0x58>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3b01      	subs	r3, #1
 80043da:	4a0a      	ldr	r2, [pc, #40]	; (8004404 <prvCheckTasksWaitingTermination+0x58>)
 80043dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043de:	f000 fea9 	bl	8005134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f810 	bl	8004408 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043e8:	4b06      	ldr	r3, [pc, #24]	; (8004404 <prvCheckTasksWaitingTermination+0x58>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e1      	bne.n	80043b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043f0:	bf00      	nop
 80043f2:	bf00      	nop
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20000eec 	.word	0x20000eec
 8004400:	20000f18 	.word	0x20000f18
 8004404:	20000f00 	.word	0x20000f00

08004408 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004416:	2b00      	cmp	r3, #0
 8004418:	d108      	bne.n	800442c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	4618      	mov	r0, r3
 8004420:	f001 f846 	bl	80054b0 <vPortFree>
				vPortFree( pxTCB );
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f001 f843 	bl	80054b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800442a:	e018      	b.n	800445e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004432:	2b01      	cmp	r3, #1
 8004434:	d103      	bne.n	800443e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f001 f83a 	bl	80054b0 <vPortFree>
	}
 800443c:	e00f      	b.n	800445e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004444:	2b02      	cmp	r3, #2
 8004446:	d00a      	beq.n	800445e <prvDeleteTCB+0x56>
	__asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	60fb      	str	r3, [r7, #12]
}
 800445a:	bf00      	nop
 800445c:	e7fe      	b.n	800445c <prvDeleteTCB+0x54>
	}
 800445e:	bf00      	nop
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800446e:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <prvResetNextTaskUnblockTime+0x38>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d104      	bne.n	8004482 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <prvResetNextTaskUnblockTime+0x3c>)
 800447a:	f04f 32ff 	mov.w	r2, #4294967295
 800447e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004480:	e008      	b.n	8004494 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004482:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <prvResetNextTaskUnblockTime+0x38>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	4a04      	ldr	r2, [pc, #16]	; (80044a4 <prvResetNextTaskUnblockTime+0x3c>)
 8004492:	6013      	str	r3, [r2, #0]
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	20000ed0 	.word	0x20000ed0
 80044a4:	20000f38 	.word	0x20000f38

080044a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044ae:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <xTaskGetSchedulerState+0x34>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d102      	bne.n	80044bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044b6:	2301      	movs	r3, #1
 80044b8:	607b      	str	r3, [r7, #4]
 80044ba:	e008      	b.n	80044ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044bc:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <xTaskGetSchedulerState+0x38>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d102      	bne.n	80044ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044c4:	2302      	movs	r3, #2
 80044c6:	607b      	str	r3, [r7, #4]
 80044c8:	e001      	b.n	80044ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044ca:	2300      	movs	r3, #0
 80044cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044ce:	687b      	ldr	r3, [r7, #4]
	}
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	20000f24 	.word	0x20000f24
 80044e0:	20000f40 	.word	0x20000f40

080044e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80044f0:	2300      	movs	r3, #0
 80044f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d056      	beq.n	80045a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80044fa:	4b2e      	ldr	r3, [pc, #184]	; (80045b4 <xTaskPriorityDisinherit+0xd0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	429a      	cmp	r2, r3
 8004502:	d00a      	beq.n	800451a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	60fb      	str	r3, [r7, #12]
}
 8004516:	bf00      	nop
 8004518:	e7fe      	b.n	8004518 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10a      	bne.n	8004538 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	60bb      	str	r3, [r7, #8]
}
 8004534:	bf00      	nop
 8004536:	e7fe      	b.n	8004536 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453c:	1e5a      	subs	r2, r3, #1
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454a:	429a      	cmp	r2, r3
 800454c:	d02c      	beq.n	80045a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004552:	2b00      	cmp	r3, #0
 8004554:	d128      	bne.n	80045a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	3304      	adds	r3, #4
 800455a:	4618      	mov	r0, r3
 800455c:	f7fe fb6a 	bl	8002c34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004578:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <xTaskPriorityDisinherit+0xd4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d903      	bls.n	8004588 <xTaskPriorityDisinherit+0xa4>
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	4a0c      	ldr	r2, [pc, #48]	; (80045b8 <xTaskPriorityDisinherit+0xd4>)
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4a09      	ldr	r2, [pc, #36]	; (80045bc <xTaskPriorityDisinherit+0xd8>)
 8004596:	441a      	add	r2, r3
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	3304      	adds	r3, #4
 800459c:	4619      	mov	r1, r3
 800459e:	4610      	mov	r0, r2
 80045a0:	f7fe faeb 	bl	8002b7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80045a4:	2301      	movs	r3, #1
 80045a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045a8:	697b      	ldr	r3, [r7, #20]
	}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000a44 	.word	0x20000a44
 80045b8:	20000f20 	.word	0x20000f20
 80045bc:	20000a48 	.word	0x20000a48

080045c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045ca:	4b21      	ldr	r3, [pc, #132]	; (8004650 <prvAddCurrentTaskToDelayedList+0x90>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045d0:	4b20      	ldr	r3, [pc, #128]	; (8004654 <prvAddCurrentTaskToDelayedList+0x94>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3304      	adds	r3, #4
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fe fb2c 	bl	8002c34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e2:	d10a      	bne.n	80045fa <prvAddCurrentTaskToDelayedList+0x3a>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045ea:	4b1a      	ldr	r3, [pc, #104]	; (8004654 <prvAddCurrentTaskToDelayedList+0x94>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4619      	mov	r1, r3
 80045f2:	4819      	ldr	r0, [pc, #100]	; (8004658 <prvAddCurrentTaskToDelayedList+0x98>)
 80045f4:	f7fe fac1 	bl	8002b7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045f8:	e026      	b.n	8004648 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4413      	add	r3, r2
 8004600:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004602:	4b14      	ldr	r3, [pc, #80]	; (8004654 <prvAddCurrentTaskToDelayedList+0x94>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	429a      	cmp	r2, r3
 8004610:	d209      	bcs.n	8004626 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004612:	4b12      	ldr	r3, [pc, #72]	; (800465c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	4b0f      	ldr	r3, [pc, #60]	; (8004654 <prvAddCurrentTaskToDelayedList+0x94>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3304      	adds	r3, #4
 800461c:	4619      	mov	r1, r3
 800461e:	4610      	mov	r0, r2
 8004620:	f7fe facf 	bl	8002bc2 <vListInsert>
}
 8004624:	e010      	b.n	8004648 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004626:	4b0e      	ldr	r3, [pc, #56]	; (8004660 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	4b0a      	ldr	r3, [pc, #40]	; (8004654 <prvAddCurrentTaskToDelayedList+0x94>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3304      	adds	r3, #4
 8004630:	4619      	mov	r1, r3
 8004632:	4610      	mov	r0, r2
 8004634:	f7fe fac5 	bl	8002bc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004638:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <prvAddCurrentTaskToDelayedList+0xa4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	429a      	cmp	r2, r3
 8004640:	d202      	bcs.n	8004648 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004642:	4a08      	ldr	r2, [pc, #32]	; (8004664 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	6013      	str	r3, [r2, #0]
}
 8004648:	bf00      	nop
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20000f1c 	.word	0x20000f1c
 8004654:	20000a44 	.word	0x20000a44
 8004658:	20000f04 	.word	0x20000f04
 800465c:	20000ed4 	.word	0x20000ed4
 8004660:	20000ed0 	.word	0x20000ed0
 8004664:	20000f38 	.word	0x20000f38

08004668 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08a      	sub	sp, #40	; 0x28
 800466c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800466e:	2300      	movs	r3, #0
 8004670:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004672:	f000 fba1 	bl	8004db8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004676:	4b1c      	ldr	r3, [pc, #112]	; (80046e8 <xTimerCreateTimerTask+0x80>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d021      	beq.n	80046c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004682:	2300      	movs	r3, #0
 8004684:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004686:	1d3a      	adds	r2, r7, #4
 8004688:	f107 0108 	add.w	r1, r7, #8
 800468c:	f107 030c 	add.w	r3, r7, #12
 8004690:	4618      	mov	r0, r3
 8004692:	f7fe fa2b 	bl	8002aec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	9202      	str	r2, [sp, #8]
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	2302      	movs	r3, #2
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	2300      	movs	r3, #0
 80046a6:	460a      	mov	r2, r1
 80046a8:	4910      	ldr	r1, [pc, #64]	; (80046ec <xTimerCreateTimerTask+0x84>)
 80046aa:	4811      	ldr	r0, [pc, #68]	; (80046f0 <xTimerCreateTimerTask+0x88>)
 80046ac:	f7ff f8de 	bl	800386c <xTaskCreateStatic>
 80046b0:	4603      	mov	r3, r0
 80046b2:	4a10      	ldr	r2, [pc, #64]	; (80046f4 <xTimerCreateTimerTask+0x8c>)
 80046b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80046b6:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <xTimerCreateTimerTask+0x8c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80046be:	2301      	movs	r3, #1
 80046c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10a      	bne.n	80046de <xTimerCreateTimerTask+0x76>
	__asm volatile
 80046c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046cc:	f383 8811 	msr	BASEPRI, r3
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	613b      	str	r3, [r7, #16]
}
 80046da:	bf00      	nop
 80046dc:	e7fe      	b.n	80046dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80046de:	697b      	ldr	r3, [r7, #20]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	20000f74 	.word	0x20000f74
 80046ec:	080060b0 	.word	0x080060b0
 80046f0:	08004961 	.word	0x08004961
 80046f4:	20000f78 	.word	0x20000f78

080046f8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af02      	add	r7, sp, #8
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004706:	202c      	movs	r0, #44	; 0x2c
 8004708:	f000 fe06 	bl	8005318 <pvPortMalloc>
 800470c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00d      	beq.n	8004730 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	9301      	str	r3, [sp, #4]
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 f843 	bl	80047b6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004730:	697b      	ldr	r3, [r7, #20]
	}
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800473a:	b580      	push	{r7, lr}
 800473c:	b08a      	sub	sp, #40	; 0x28
 800473e:	af02      	add	r7, sp, #8
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
 8004746:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8004748:	232c      	movs	r3, #44	; 0x2c
 800474a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	2b2c      	cmp	r3, #44	; 0x2c
 8004750:	d00a      	beq.n	8004768 <xTimerCreateStatic+0x2e>
	__asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	61bb      	str	r3, [r7, #24]
}
 8004764:	bf00      	nop
 8004766:	e7fe      	b.n	8004766 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004768:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10a      	bne.n	8004786 <xTimerCreateStatic+0x4c>
	__asm volatile
 8004770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	617b      	str	r3, [r7, #20]
}
 8004782:	bf00      	nop
 8004784:	e7fe      	b.n	8004784 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8004786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004788:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00d      	beq.n	80047ac <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	9301      	str	r3, [sp, #4]
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	68b9      	ldr	r1, [r7, #8]
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 f805 	bl	80047b6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80047ac:	69fb      	ldr	r3, [r7, #28]
	}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3720      	adds	r7, #32
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b086      	sub	sp, #24
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	607a      	str	r2, [r7, #4]
 80047c2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10a      	bne.n	80047e0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	617b      	str	r3, [r7, #20]
}
 80047dc:	bf00      	nop
 80047de:	e7fe      	b.n	80047de <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d01e      	beq.n	8004824 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80047e6:	f000 fae7 	bl	8004db8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	6a3a      	ldr	r2, [r7, #32]
 8004800:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	3304      	adds	r3, #4
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe f9aa 	bl	8002b60 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d008      	beq.n	8004824 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004818:	f043 0304 	orr.w	r3, r3, #4
 800481c:	b2da      	uxtb	r2, r3
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004824:	bf00      	nop
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08a      	sub	sp, #40	; 0x28
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800483a:	2300      	movs	r3, #0
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10a      	bne.n	800485a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	623b      	str	r3, [r7, #32]
}
 8004856:	bf00      	nop
 8004858:	e7fe      	b.n	8004858 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800485a:	4b1a      	ldr	r3, [pc, #104]	; (80048c4 <xTimerGenericCommand+0x98>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d02a      	beq.n	80048b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b05      	cmp	r3, #5
 8004872:	dc18      	bgt.n	80048a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004874:	f7ff fe18 	bl	80044a8 <xTaskGetSchedulerState>
 8004878:	4603      	mov	r3, r0
 800487a:	2b02      	cmp	r3, #2
 800487c:	d109      	bne.n	8004892 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800487e:	4b11      	ldr	r3, [pc, #68]	; (80048c4 <xTimerGenericCommand+0x98>)
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	f107 0110 	add.w	r1, r7, #16
 8004886:	2300      	movs	r3, #0
 8004888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800488a:	f7fe fb87 	bl	8002f9c <xQueueGenericSend>
 800488e:	6278      	str	r0, [r7, #36]	; 0x24
 8004890:	e012      	b.n	80048b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004892:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <xTimerGenericCommand+0x98>)
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	f107 0110 	add.w	r1, r7, #16
 800489a:	2300      	movs	r3, #0
 800489c:	2200      	movs	r2, #0
 800489e:	f7fe fb7d 	bl	8002f9c <xQueueGenericSend>
 80048a2:	6278      	str	r0, [r7, #36]	; 0x24
 80048a4:	e008      	b.n	80048b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80048a6:	4b07      	ldr	r3, [pc, #28]	; (80048c4 <xTimerGenericCommand+0x98>)
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	f107 0110 	add.w	r1, r7, #16
 80048ae:	2300      	movs	r3, #0
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	f7fe fc71 	bl	8003198 <xQueueGenericSendFromISR>
 80048b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3728      	adds	r7, #40	; 0x28
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20000f74 	.word	0x20000f74

080048c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b088      	sub	sp, #32
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048d2:	4b22      	ldr	r3, [pc, #136]	; (800495c <prvProcessExpiredTimer+0x94>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	3304      	adds	r3, #4
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fe f9a7 	bl	8002c34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d022      	beq.n	800493a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	699a      	ldr	r2, [r3, #24]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	18d1      	adds	r1, r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	6978      	ldr	r0, [r7, #20]
 8004902:	f000 f8d1 	bl	8004aa8 <prvInsertTimerInActiveList>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01f      	beq.n	800494c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800490c:	2300      	movs	r3, #0
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	2300      	movs	r3, #0
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	2100      	movs	r1, #0
 8004916:	6978      	ldr	r0, [r7, #20]
 8004918:	f7ff ff88 	bl	800482c <xTimerGenericCommand>
 800491c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d113      	bne.n	800494c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	60fb      	str	r3, [r7, #12]
}
 8004936:	bf00      	nop
 8004938:	e7fe      	b.n	8004938 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004940:	f023 0301 	bic.w	r3, r3, #1
 8004944:	b2da      	uxtb	r2, r3
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	6978      	ldr	r0, [r7, #20]
 8004952:	4798      	blx	r3
}
 8004954:	bf00      	nop
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	20000f6c 	.word	0x20000f6c

08004960 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004968:	f107 0308 	add.w	r3, r7, #8
 800496c:	4618      	mov	r0, r3
 800496e:	f000 f857 	bl	8004a20 <prvGetNextExpireTime>
 8004972:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4619      	mov	r1, r3
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f803 	bl	8004984 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800497e:	f000 f8d5 	bl	8004b2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004982:	e7f1      	b.n	8004968 <prvTimerTask+0x8>

08004984 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800498e:	f7ff f9a9 	bl	8003ce4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004992:	f107 0308 	add.w	r3, r7, #8
 8004996:	4618      	mov	r0, r3
 8004998:	f000 f866 	bl	8004a68 <prvSampleTimeNow>
 800499c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d130      	bne.n	8004a06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10a      	bne.n	80049c0 <prvProcessTimerOrBlockTask+0x3c>
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d806      	bhi.n	80049c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80049b2:	f7ff f9a5 	bl	8003d00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80049b6:	68f9      	ldr	r1, [r7, #12]
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7ff ff85 	bl	80048c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80049be:	e024      	b.n	8004a0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d008      	beq.n	80049d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80049c6:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <prvProcessTimerOrBlockTask+0x90>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <prvProcessTimerOrBlockTask+0x50>
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <prvProcessTimerOrBlockTask+0x52>
 80049d4:	2300      	movs	r3, #0
 80049d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80049d8:	4b0f      	ldr	r3, [pc, #60]	; (8004a18 <prvProcessTimerOrBlockTask+0x94>)
 80049da:	6818      	ldr	r0, [r3, #0]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	4619      	mov	r1, r3
 80049e6:	f7fe ff0d 	bl	8003804 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80049ea:	f7ff f989 	bl	8003d00 <xTaskResumeAll>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80049f4:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <prvProcessTimerOrBlockTask+0x98>)
 80049f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	f3bf 8f6f 	isb	sy
}
 8004a04:	e001      	b.n	8004a0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a06:	f7ff f97b 	bl	8003d00 <xTaskResumeAll>
}
 8004a0a:	bf00      	nop
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000f70 	.word	0x20000f70
 8004a18:	20000f74 	.word	0x20000f74
 8004a1c:	e000ed04 	.word	0xe000ed04

08004a20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a28:	4b0e      	ldr	r3, [pc, #56]	; (8004a64 <prvGetNextExpireTime+0x44>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <prvGetNextExpireTime+0x16>
 8004a32:	2201      	movs	r2, #1
 8004a34:	e000      	b.n	8004a38 <prvGetNextExpireTime+0x18>
 8004a36:	2200      	movs	r2, #0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d105      	bne.n	8004a50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a44:	4b07      	ldr	r3, [pc, #28]	; (8004a64 <prvGetNextExpireTime+0x44>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	e001      	b.n	8004a54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a54:	68fb      	ldr	r3, [r7, #12]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20000f6c 	.word	0x20000f6c

08004a68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a70:	f7ff f9e4 	bl	8003e3c <xTaskGetTickCount>
 8004a74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a76:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <prvSampleTimeNow+0x3c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d205      	bcs.n	8004a8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a80:	f000 f936 	bl	8004cf0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	e002      	b.n	8004a92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a92:	4a04      	ldr	r2, [pc, #16]	; (8004aa4 <prvSampleTimeNow+0x3c>)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a98:	68fb      	ldr	r3, [r7, #12]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000f7c 	.word	0x20000f7c

08004aa8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d812      	bhi.n	8004af4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	1ad2      	subs	r2, r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d302      	bcc.n	8004ae2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004adc:	2301      	movs	r3, #1
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	e01b      	b.n	8004b1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ae2:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <prvInsertTimerInActiveList+0x7c>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3304      	adds	r3, #4
 8004aea:	4619      	mov	r1, r3
 8004aec:	4610      	mov	r0, r2
 8004aee:	f7fe f868 	bl	8002bc2 <vListInsert>
 8004af2:	e012      	b.n	8004b1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d206      	bcs.n	8004b0a <prvInsertTimerInActiveList+0x62>
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d302      	bcc.n	8004b0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004b04:	2301      	movs	r3, #1
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	e007      	b.n	8004b1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b0a:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <prvInsertTimerInActiveList+0x80>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3304      	adds	r3, #4
 8004b12:	4619      	mov	r1, r3
 8004b14:	4610      	mov	r0, r2
 8004b16:	f7fe f854 	bl	8002bc2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b1a:	697b      	ldr	r3, [r7, #20]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20000f70 	.word	0x20000f70
 8004b28:	20000f6c 	.word	0x20000f6c

08004b2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08e      	sub	sp, #56	; 0x38
 8004b30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b32:	e0ca      	b.n	8004cca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	da18      	bge.n	8004b6c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004b3a:	1d3b      	adds	r3, r7, #4
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10a      	bne.n	8004b5c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	61fb      	str	r3, [r7, #28]
}
 8004b58:	bf00      	nop
 8004b5a:	e7fe      	b.n	8004b5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b62:	6850      	ldr	r0, [r2, #4]
 8004b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b66:	6892      	ldr	r2, [r2, #8]
 8004b68:	4611      	mov	r1, r2
 8004b6a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f2c0 80aa 	blt.w	8004cc8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d004      	beq.n	8004b8a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b82:	3304      	adds	r3, #4
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fe f855 	bl	8002c34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b8a:	463b      	mov	r3, r7
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff ff6b 	bl	8004a68 <prvSampleTimeNow>
 8004b92:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b09      	cmp	r3, #9
 8004b98:	f200 8097 	bhi.w	8004cca <prvProcessReceivedCommands+0x19e>
 8004b9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <prvProcessReceivedCommands+0x78>)
 8004b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba2:	bf00      	nop
 8004ba4:	08004bcd 	.word	0x08004bcd
 8004ba8:	08004bcd 	.word	0x08004bcd
 8004bac:	08004bcd 	.word	0x08004bcd
 8004bb0:	08004c41 	.word	0x08004c41
 8004bb4:	08004c55 	.word	0x08004c55
 8004bb8:	08004c9f 	.word	0x08004c9f
 8004bbc:	08004bcd 	.word	0x08004bcd
 8004bc0:	08004bcd 	.word	0x08004bcd
 8004bc4:	08004c41 	.word	0x08004c41
 8004bc8:	08004c55 	.word	0x08004c55
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	18d1      	adds	r1, r2, r3
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bec:	f7ff ff5c 	bl	8004aa8 <prvInsertTimerInActiveList>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d069      	beq.n	8004cca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bfc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d05e      	beq.n	8004cca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	441a      	add	r2, r3
 8004c14:	2300      	movs	r3, #0
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	2300      	movs	r3, #0
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c1e:	f7ff fe05 	bl	800482c <xTimerGenericCommand>
 8004c22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d14f      	bne.n	8004cca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	61bb      	str	r3, [r7, #24]
}
 8004c3c:	bf00      	nop
 8004c3e:	e7fe      	b.n	8004c3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004c52:	e03a      	b.n	8004cca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c5a:	f043 0301 	orr.w	r3, r3, #1
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10a      	bne.n	8004c8a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	617b      	str	r3, [r7, #20]
}
 8004c86:	bf00      	nop
 8004c88:	e7fe      	b.n	8004c88 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8c:	699a      	ldr	r2, [r3, #24]
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	18d1      	adds	r1, r2, r3
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c98:	f7ff ff06 	bl	8004aa8 <prvInsertTimerInActiveList>
					break;
 8004c9c:	e015      	b.n	8004cca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d103      	bne.n	8004cb4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cae:	f000 fbff 	bl	80054b0 <vPortFree>
 8004cb2:	e00a      	b.n	8004cca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cba:	f023 0301 	bic.w	r3, r3, #1
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004cc6:	e000      	b.n	8004cca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004cc8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cca:	4b08      	ldr	r3, [pc, #32]	; (8004cec <prvProcessReceivedCommands+0x1c0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	1d39      	adds	r1, r7, #4
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fe fafc 	bl	80032d0 <xQueueReceive>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f47f af2a 	bne.w	8004b34 <prvProcessReceivedCommands+0x8>
	}
}
 8004ce0:	bf00      	nop
 8004ce2:	bf00      	nop
 8004ce4:	3730      	adds	r7, #48	; 0x30
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000f74 	.word	0x20000f74

08004cf0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cf6:	e048      	b.n	8004d8a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cf8:	4b2d      	ldr	r3, [pc, #180]	; (8004db0 <prvSwitchTimerLists+0xc0>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d02:	4b2b      	ldr	r3, [pc, #172]	; (8004db0 <prvSwitchTimerLists+0xc0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fd ff8f 	bl	8002c34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d02e      	beq.n	8004d8a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4413      	add	r3, r2
 8004d34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d90e      	bls.n	8004d5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d4a:	4b19      	ldr	r3, [pc, #100]	; (8004db0 <prvSwitchTimerLists+0xc0>)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3304      	adds	r3, #4
 8004d52:	4619      	mov	r1, r3
 8004d54:	4610      	mov	r0, r2
 8004d56:	f7fd ff34 	bl	8002bc2 <vListInsert>
 8004d5a:	e016      	b.n	8004d8a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	2300      	movs	r3, #0
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	2100      	movs	r1, #0
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f7ff fd60 	bl	800482c <xTimerGenericCommand>
 8004d6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10a      	bne.n	8004d8a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	603b      	str	r3, [r7, #0]
}
 8004d86:	bf00      	nop
 8004d88:	e7fe      	b.n	8004d88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d8a:	4b09      	ldr	r3, [pc, #36]	; (8004db0 <prvSwitchTimerLists+0xc0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1b1      	bne.n	8004cf8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d94:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <prvSwitchTimerLists+0xc0>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d9a:	4b06      	ldr	r3, [pc, #24]	; (8004db4 <prvSwitchTimerLists+0xc4>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a04      	ldr	r2, [pc, #16]	; (8004db0 <prvSwitchTimerLists+0xc0>)
 8004da0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004da2:	4a04      	ldr	r2, [pc, #16]	; (8004db4 <prvSwitchTimerLists+0xc4>)
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	6013      	str	r3, [r2, #0]
}
 8004da8:	bf00      	nop
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	20000f6c 	.word	0x20000f6c
 8004db4:	20000f70 	.word	0x20000f70

08004db8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004dbe:	f000 f989 	bl	80050d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004dc2:	4b15      	ldr	r3, [pc, #84]	; (8004e18 <prvCheckForValidListAndQueue+0x60>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d120      	bne.n	8004e0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004dca:	4814      	ldr	r0, [pc, #80]	; (8004e1c <prvCheckForValidListAndQueue+0x64>)
 8004dcc:	f7fd fea8 	bl	8002b20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004dd0:	4813      	ldr	r0, [pc, #76]	; (8004e20 <prvCheckForValidListAndQueue+0x68>)
 8004dd2:	f7fd fea5 	bl	8002b20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004dd6:	4b13      	ldr	r3, [pc, #76]	; (8004e24 <prvCheckForValidListAndQueue+0x6c>)
 8004dd8:	4a10      	ldr	r2, [pc, #64]	; (8004e1c <prvCheckForValidListAndQueue+0x64>)
 8004dda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ddc:	4b12      	ldr	r3, [pc, #72]	; (8004e28 <prvCheckForValidListAndQueue+0x70>)
 8004dde:	4a10      	ldr	r2, [pc, #64]	; (8004e20 <prvCheckForValidListAndQueue+0x68>)
 8004de0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004de2:	2300      	movs	r3, #0
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	4b11      	ldr	r3, [pc, #68]	; (8004e2c <prvCheckForValidListAndQueue+0x74>)
 8004de8:	4a11      	ldr	r2, [pc, #68]	; (8004e30 <prvCheckForValidListAndQueue+0x78>)
 8004dea:	2110      	movs	r1, #16
 8004dec:	200a      	movs	r0, #10
 8004dee:	f7fd ffb3 	bl	8002d58 <xQueueGenericCreateStatic>
 8004df2:	4603      	mov	r3, r0
 8004df4:	4a08      	ldr	r2, [pc, #32]	; (8004e18 <prvCheckForValidListAndQueue+0x60>)
 8004df6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004df8:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <prvCheckForValidListAndQueue+0x60>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <prvCheckForValidListAndQueue+0x60>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	490b      	ldr	r1, [pc, #44]	; (8004e34 <prvCheckForValidListAndQueue+0x7c>)
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fe fcd2 	bl	80037b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e0c:	f000 f992 	bl	8005134 <vPortExitCritical>
}
 8004e10:	bf00      	nop
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20000f74 	.word	0x20000f74
 8004e1c:	20000f44 	.word	0x20000f44
 8004e20:	20000f58 	.word	0x20000f58
 8004e24:	20000f6c 	.word	0x20000f6c
 8004e28:	20000f70 	.word	0x20000f70
 8004e2c:	20001020 	.word	0x20001020
 8004e30:	20000f80 	.word	0x20000f80
 8004e34:	080060b8 	.word	0x080060b8

08004e38 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10a      	bne.n	8004e60 <pvTimerGetTimerID+0x28>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	60fb      	str	r3, [r7, #12]
}
 8004e5c:	bf00      	nop
 8004e5e:	e7fe      	b.n	8004e5e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8004e60:	f000 f938 	bl	80050d4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8004e6a:	f000 f963 	bl	8005134 <vPortExitCritical>

	return pvReturn;
 8004e6e:	693b      	ldr	r3, [r7, #16]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	3b04      	subs	r3, #4
 8004e88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3b04      	subs	r3, #4
 8004e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f023 0201 	bic.w	r2, r3, #1
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	3b04      	subs	r3, #4
 8004ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ea8:	4a0c      	ldr	r2, [pc, #48]	; (8004edc <pxPortInitialiseStack+0x64>)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3b14      	subs	r3, #20
 8004eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3b04      	subs	r3, #4
 8004ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f06f 0202 	mvn.w	r2, #2
 8004ec6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	3b20      	subs	r3, #32
 8004ecc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ece:	68fb      	ldr	r3, [r7, #12]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	08004ee1 	.word	0x08004ee1

08004ee0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004eea:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <prvTaskExitError+0x54>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef2:	d00a      	beq.n	8004f0a <prvTaskExitError+0x2a>
	__asm volatile
 8004ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef8:	f383 8811 	msr	BASEPRI, r3
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	60fb      	str	r3, [r7, #12]
}
 8004f06:	bf00      	nop
 8004f08:	e7fe      	b.n	8004f08 <prvTaskExitError+0x28>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	60bb      	str	r3, [r7, #8]
}
 8004f1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f1e:	bf00      	nop
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0fc      	beq.n	8004f20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f26:	bf00      	nop
 8004f28:	bf00      	nop
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	2000000c 	.word	0x2000000c
	...

08004f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f40:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <pxCurrentTCBConst2>)
 8004f42:	6819      	ldr	r1, [r3, #0]
 8004f44:	6808      	ldr	r0, [r1, #0]
 8004f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f4a:	f380 8809 	msr	PSP, r0
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f04f 0000 	mov.w	r0, #0
 8004f56:	f380 8811 	msr	BASEPRI, r0
 8004f5a:	4770      	bx	lr
 8004f5c:	f3af 8000 	nop.w

08004f60 <pxCurrentTCBConst2>:
 8004f60:	20000a44 	.word	0x20000a44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f64:	bf00      	nop
 8004f66:	bf00      	nop

08004f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f68:	4808      	ldr	r0, [pc, #32]	; (8004f8c <prvPortStartFirstTask+0x24>)
 8004f6a:	6800      	ldr	r0, [r0, #0]
 8004f6c:	6800      	ldr	r0, [r0, #0]
 8004f6e:	f380 8808 	msr	MSP, r0
 8004f72:	f04f 0000 	mov.w	r0, #0
 8004f76:	f380 8814 	msr	CONTROL, r0
 8004f7a:	b662      	cpsie	i
 8004f7c:	b661      	cpsie	f
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	df00      	svc	0
 8004f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f8a:	bf00      	nop
 8004f8c:	e000ed08 	.word	0xe000ed08

08004f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f96:	4b46      	ldr	r3, [pc, #280]	; (80050b0 <xPortStartScheduler+0x120>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a46      	ldr	r2, [pc, #280]	; (80050b4 <xPortStartScheduler+0x124>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d10a      	bne.n	8004fb6 <xPortStartScheduler+0x26>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	613b      	str	r3, [r7, #16]
}
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004fb6:	4b3e      	ldr	r3, [pc, #248]	; (80050b0 <xPortStartScheduler+0x120>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a3f      	ldr	r2, [pc, #252]	; (80050b8 <xPortStartScheduler+0x128>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d10a      	bne.n	8004fd6 <xPortStartScheduler+0x46>
	__asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	60fb      	str	r3, [r7, #12]
}
 8004fd2:	bf00      	nop
 8004fd4:	e7fe      	b.n	8004fd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fd6:	4b39      	ldr	r3, [pc, #228]	; (80050bc <xPortStartScheduler+0x12c>)
 8004fd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	22ff      	movs	r2, #255	; 0xff
 8004fe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	4b31      	ldr	r3, [pc, #196]	; (80050c0 <xPortStartScheduler+0x130>)
 8004ffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ffe:	4b31      	ldr	r3, [pc, #196]	; (80050c4 <xPortStartScheduler+0x134>)
 8005000:	2207      	movs	r2, #7
 8005002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005004:	e009      	b.n	800501a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005006:	4b2f      	ldr	r3, [pc, #188]	; (80050c4 <xPortStartScheduler+0x134>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3b01      	subs	r3, #1
 800500c:	4a2d      	ldr	r2, [pc, #180]	; (80050c4 <xPortStartScheduler+0x134>)
 800500e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	b2db      	uxtb	r3, r3
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	b2db      	uxtb	r3, r3
 8005018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005022:	2b80      	cmp	r3, #128	; 0x80
 8005024:	d0ef      	beq.n	8005006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005026:	4b27      	ldr	r3, [pc, #156]	; (80050c4 <xPortStartScheduler+0x134>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f1c3 0307 	rsb	r3, r3, #7
 800502e:	2b04      	cmp	r3, #4
 8005030:	d00a      	beq.n	8005048 <xPortStartScheduler+0xb8>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	60bb      	str	r3, [r7, #8]
}
 8005044:	bf00      	nop
 8005046:	e7fe      	b.n	8005046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005048:	4b1e      	ldr	r3, [pc, #120]	; (80050c4 <xPortStartScheduler+0x134>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	021b      	lsls	r3, r3, #8
 800504e:	4a1d      	ldr	r2, [pc, #116]	; (80050c4 <xPortStartScheduler+0x134>)
 8005050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005052:	4b1c      	ldr	r3, [pc, #112]	; (80050c4 <xPortStartScheduler+0x134>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800505a:	4a1a      	ldr	r2, [pc, #104]	; (80050c4 <xPortStartScheduler+0x134>)
 800505c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	b2da      	uxtb	r2, r3
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005066:	4b18      	ldr	r3, [pc, #96]	; (80050c8 <xPortStartScheduler+0x138>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a17      	ldr	r2, [pc, #92]	; (80050c8 <xPortStartScheduler+0x138>)
 800506c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005072:	4b15      	ldr	r3, [pc, #84]	; (80050c8 <xPortStartScheduler+0x138>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a14      	ldr	r2, [pc, #80]	; (80050c8 <xPortStartScheduler+0x138>)
 8005078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800507c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800507e:	f000 f8dd 	bl	800523c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005082:	4b12      	ldr	r3, [pc, #72]	; (80050cc <xPortStartScheduler+0x13c>)
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005088:	f000 f8fc 	bl	8005284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800508c:	4b10      	ldr	r3, [pc, #64]	; (80050d0 <xPortStartScheduler+0x140>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a0f      	ldr	r2, [pc, #60]	; (80050d0 <xPortStartScheduler+0x140>)
 8005092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005098:	f7ff ff66 	bl	8004f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800509c:	f7fe ff98 	bl	8003fd0 <vTaskSwitchContext>
	prvTaskExitError();
 80050a0:	f7ff ff1e 	bl	8004ee0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	e000ed00 	.word	0xe000ed00
 80050b4:	410fc271 	.word	0x410fc271
 80050b8:	410fc270 	.word	0x410fc270
 80050bc:	e000e400 	.word	0xe000e400
 80050c0:	20001070 	.word	0x20001070
 80050c4:	20001074 	.word	0x20001074
 80050c8:	e000ed20 	.word	0xe000ed20
 80050cc:	2000000c 	.word	0x2000000c
 80050d0:	e000ef34 	.word	0xe000ef34

080050d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
	__asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	607b      	str	r3, [r7, #4]
}
 80050ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050ee:	4b0f      	ldr	r3, [pc, #60]	; (800512c <vPortEnterCritical+0x58>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3301      	adds	r3, #1
 80050f4:	4a0d      	ldr	r2, [pc, #52]	; (800512c <vPortEnterCritical+0x58>)
 80050f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050f8:	4b0c      	ldr	r3, [pc, #48]	; (800512c <vPortEnterCritical+0x58>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d10f      	bne.n	8005120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005100:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <vPortEnterCritical+0x5c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <vPortEnterCritical+0x4c>
	__asm volatile
 800510a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	603b      	str	r3, [r7, #0]
}
 800511c:	bf00      	nop
 800511e:	e7fe      	b.n	800511e <vPortEnterCritical+0x4a>
	}
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	2000000c 	.word	0x2000000c
 8005130:	e000ed04 	.word	0xe000ed04

08005134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800513a:	4b12      	ldr	r3, [pc, #72]	; (8005184 <vPortExitCritical+0x50>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10a      	bne.n	8005158 <vPortExitCritical+0x24>
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	607b      	str	r3, [r7, #4]
}
 8005154:	bf00      	nop
 8005156:	e7fe      	b.n	8005156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005158:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <vPortExitCritical+0x50>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3b01      	subs	r3, #1
 800515e:	4a09      	ldr	r2, [pc, #36]	; (8005184 <vPortExitCritical+0x50>)
 8005160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005162:	4b08      	ldr	r3, [pc, #32]	; (8005184 <vPortExitCritical+0x50>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d105      	bne.n	8005176 <vPortExitCritical+0x42>
 800516a:	2300      	movs	r3, #0
 800516c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	f383 8811 	msr	BASEPRI, r3
}
 8005174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	2000000c 	.word	0x2000000c
	...

08005190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005190:	f3ef 8009 	mrs	r0, PSP
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	4b15      	ldr	r3, [pc, #84]	; (80051f0 <pxCurrentTCBConst>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	f01e 0f10 	tst.w	lr, #16
 80051a0:	bf08      	it	eq
 80051a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051aa:	6010      	str	r0, [r2, #0]
 80051ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051b4:	f380 8811 	msr	BASEPRI, r0
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f7fe ff06 	bl	8003fd0 <vTaskSwitchContext>
 80051c4:	f04f 0000 	mov.w	r0, #0
 80051c8:	f380 8811 	msr	BASEPRI, r0
 80051cc:	bc09      	pop	{r0, r3}
 80051ce:	6819      	ldr	r1, [r3, #0]
 80051d0:	6808      	ldr	r0, [r1, #0]
 80051d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d6:	f01e 0f10 	tst.w	lr, #16
 80051da:	bf08      	it	eq
 80051dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051e0:	f380 8809 	msr	PSP, r0
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	f3af 8000 	nop.w

080051f0 <pxCurrentTCBConst>:
 80051f0:	20000a44 	.word	0x20000a44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop

080051f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	607b      	str	r3, [r7, #4]
}
 8005210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005212:	f7fe fe23 	bl	8003e5c <xTaskIncrementTick>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <xPortSysTickHandler+0x40>)
 800521e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	2300      	movs	r3, #0
 8005226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	f383 8811 	msr	BASEPRI, r3
}
 800522e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005230:	bf00      	nop
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	e000ed04 	.word	0xe000ed04

0800523c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005240:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <vPortSetupTimerInterrupt+0x34>)
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005246:	4b0b      	ldr	r3, [pc, #44]	; (8005274 <vPortSetupTimerInterrupt+0x38>)
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800524c:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <vPortSetupTimerInterrupt+0x3c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a0a      	ldr	r2, [pc, #40]	; (800527c <vPortSetupTimerInterrupt+0x40>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	099b      	lsrs	r3, r3, #6
 8005258:	4a09      	ldr	r2, [pc, #36]	; (8005280 <vPortSetupTimerInterrupt+0x44>)
 800525a:	3b01      	subs	r3, #1
 800525c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800525e:	4b04      	ldr	r3, [pc, #16]	; (8005270 <vPortSetupTimerInterrupt+0x34>)
 8005260:	2207      	movs	r2, #7
 8005262:	601a      	str	r2, [r3, #0]
}
 8005264:	bf00      	nop
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	e000e010 	.word	0xe000e010
 8005274:	e000e018 	.word	0xe000e018
 8005278:	20000000 	.word	0x20000000
 800527c:	10624dd3 	.word	0x10624dd3
 8005280:	e000e014 	.word	0xe000e014

08005284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005294 <vPortEnableVFP+0x10>
 8005288:	6801      	ldr	r1, [r0, #0]
 800528a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800528e:	6001      	str	r1, [r0, #0]
 8005290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005292:	bf00      	nop
 8005294:	e000ed88 	.word	0xe000ed88

08005298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800529e:	f3ef 8305 	mrs	r3, IPSR
 80052a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b0f      	cmp	r3, #15
 80052a8:	d914      	bls.n	80052d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052aa:	4a17      	ldr	r2, [pc, #92]	; (8005308 <vPortValidateInterruptPriority+0x70>)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80052b4:	4b15      	ldr	r3, [pc, #84]	; (800530c <vPortValidateInterruptPriority+0x74>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	7afa      	ldrb	r2, [r7, #11]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d20a      	bcs.n	80052d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	607b      	str	r3, [r7, #4]
}
 80052d0:	bf00      	nop
 80052d2:	e7fe      	b.n	80052d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052d4:	4b0e      	ldr	r3, [pc, #56]	; (8005310 <vPortValidateInterruptPriority+0x78>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052dc:	4b0d      	ldr	r3, [pc, #52]	; (8005314 <vPortValidateInterruptPriority+0x7c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d90a      	bls.n	80052fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80052e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	603b      	str	r3, [r7, #0]
}
 80052f6:	bf00      	nop
 80052f8:	e7fe      	b.n	80052f8 <vPortValidateInterruptPriority+0x60>
	}
 80052fa:	bf00      	nop
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	e000e3f0 	.word	0xe000e3f0
 800530c:	20001070 	.word	0x20001070
 8005310:	e000ed0c 	.word	0xe000ed0c
 8005314:	20001074 	.word	0x20001074

08005318 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08a      	sub	sp, #40	; 0x28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005320:	2300      	movs	r3, #0
 8005322:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005324:	f7fe fcde 	bl	8003ce4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005328:	4b5b      	ldr	r3, [pc, #364]	; (8005498 <pvPortMalloc+0x180>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005330:	f000 f920 	bl	8005574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005334:	4b59      	ldr	r3, [pc, #356]	; (800549c <pvPortMalloc+0x184>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4013      	ands	r3, r2
 800533c:	2b00      	cmp	r3, #0
 800533e:	f040 8093 	bne.w	8005468 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01d      	beq.n	8005384 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005348:	2208      	movs	r2, #8
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4413      	add	r3, r2
 800534e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	2b00      	cmp	r3, #0
 8005358:	d014      	beq.n	8005384 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f023 0307 	bic.w	r3, r3, #7
 8005360:	3308      	adds	r3, #8
 8005362:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <pvPortMalloc+0x6c>
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	617b      	str	r3, [r7, #20]
}
 8005380:	bf00      	nop
 8005382:	e7fe      	b.n	8005382 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d06e      	beq.n	8005468 <pvPortMalloc+0x150>
 800538a:	4b45      	ldr	r3, [pc, #276]	; (80054a0 <pvPortMalloc+0x188>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	429a      	cmp	r2, r3
 8005392:	d869      	bhi.n	8005468 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005394:	4b43      	ldr	r3, [pc, #268]	; (80054a4 <pvPortMalloc+0x18c>)
 8005396:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005398:	4b42      	ldr	r3, [pc, #264]	; (80054a4 <pvPortMalloc+0x18c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800539e:	e004      	b.n	80053aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d903      	bls.n	80053bc <pvPortMalloc+0xa4>
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1f1      	bne.n	80053a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053bc:	4b36      	ldr	r3, [pc, #216]	; (8005498 <pvPortMalloc+0x180>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d050      	beq.n	8005468 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2208      	movs	r2, #8
 80053cc:	4413      	add	r3, r2
 80053ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	1ad2      	subs	r2, r2, r3
 80053e0:	2308      	movs	r3, #8
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d91f      	bls.n	8005428 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4413      	add	r3, r2
 80053ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <pvPortMalloc+0xf8>
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	613b      	str	r3, [r7, #16]
}
 800540c:	bf00      	nop
 800540e:	e7fe      	b.n	800540e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	1ad2      	subs	r2, r2, r3
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005422:	69b8      	ldr	r0, [r7, #24]
 8005424:	f000 f908 	bl	8005638 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005428:	4b1d      	ldr	r3, [pc, #116]	; (80054a0 <pvPortMalloc+0x188>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	4a1b      	ldr	r2, [pc, #108]	; (80054a0 <pvPortMalloc+0x188>)
 8005434:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005436:	4b1a      	ldr	r3, [pc, #104]	; (80054a0 <pvPortMalloc+0x188>)
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	4b1b      	ldr	r3, [pc, #108]	; (80054a8 <pvPortMalloc+0x190>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	429a      	cmp	r2, r3
 8005440:	d203      	bcs.n	800544a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005442:	4b17      	ldr	r3, [pc, #92]	; (80054a0 <pvPortMalloc+0x188>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a18      	ldr	r2, [pc, #96]	; (80054a8 <pvPortMalloc+0x190>)
 8005448:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	4b13      	ldr	r3, [pc, #76]	; (800549c <pvPortMalloc+0x184>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	431a      	orrs	r2, r3
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800545e:	4b13      	ldr	r3, [pc, #76]	; (80054ac <pvPortMalloc+0x194>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3301      	adds	r3, #1
 8005464:	4a11      	ldr	r2, [pc, #68]	; (80054ac <pvPortMalloc+0x194>)
 8005466:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005468:	f7fe fc4a 	bl	8003d00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <pvPortMalloc+0x174>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	60fb      	str	r3, [r7, #12]
}
 8005488:	bf00      	nop
 800548a:	e7fe      	b.n	800548a <pvPortMalloc+0x172>
	return pvReturn;
 800548c:	69fb      	ldr	r3, [r7, #28]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3728      	adds	r7, #40	; 0x28
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20004c80 	.word	0x20004c80
 800549c:	20004c94 	.word	0x20004c94
 80054a0:	20004c84 	.word	0x20004c84
 80054a4:	20004c78 	.word	0x20004c78
 80054a8:	20004c88 	.word	0x20004c88
 80054ac:	20004c8c 	.word	0x20004c8c

080054b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d04d      	beq.n	800555e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054c2:	2308      	movs	r3, #8
 80054c4:	425b      	negs	r3, r3
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4413      	add	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	4b24      	ldr	r3, [pc, #144]	; (8005568 <vPortFree+0xb8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4013      	ands	r3, r2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10a      	bne.n	80054f4 <vPortFree+0x44>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	60fb      	str	r3, [r7, #12]
}
 80054f0:	bf00      	nop
 80054f2:	e7fe      	b.n	80054f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <vPortFree+0x62>
	__asm volatile
 80054fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	60bb      	str	r3, [r7, #8]
}
 800550e:	bf00      	nop
 8005510:	e7fe      	b.n	8005510 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	4b14      	ldr	r3, [pc, #80]	; (8005568 <vPortFree+0xb8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4013      	ands	r3, r2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01e      	beq.n	800555e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d11a      	bne.n	800555e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	4b0e      	ldr	r3, [pc, #56]	; (8005568 <vPortFree+0xb8>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	43db      	mvns	r3, r3
 8005532:	401a      	ands	r2, r3
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005538:	f7fe fbd4 	bl	8003ce4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	4b0a      	ldr	r3, [pc, #40]	; (800556c <vPortFree+0xbc>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4413      	add	r3, r2
 8005546:	4a09      	ldr	r2, [pc, #36]	; (800556c <vPortFree+0xbc>)
 8005548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800554a:	6938      	ldr	r0, [r7, #16]
 800554c:	f000 f874 	bl	8005638 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005550:	4b07      	ldr	r3, [pc, #28]	; (8005570 <vPortFree+0xc0>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3301      	adds	r3, #1
 8005556:	4a06      	ldr	r2, [pc, #24]	; (8005570 <vPortFree+0xc0>)
 8005558:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800555a:	f7fe fbd1 	bl	8003d00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800555e:	bf00      	nop
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20004c94 	.word	0x20004c94
 800556c:	20004c84 	.word	0x20004c84
 8005570:	20004c90 	.word	0x20004c90

08005574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800557a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800557e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005580:	4b27      	ldr	r3, [pc, #156]	; (8005620 <prvHeapInit+0xac>)
 8005582:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00c      	beq.n	80055a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3307      	adds	r3, #7
 8005592:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0307 	bic.w	r3, r3, #7
 800559a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	4a1f      	ldr	r2, [pc, #124]	; (8005620 <prvHeapInit+0xac>)
 80055a4:	4413      	add	r3, r2
 80055a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055ac:	4a1d      	ldr	r2, [pc, #116]	; (8005624 <prvHeapInit+0xb0>)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055b2:	4b1c      	ldr	r3, [pc, #112]	; (8005624 <prvHeapInit+0xb0>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	4413      	add	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055c0:	2208      	movs	r2, #8
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0307 	bic.w	r3, r3, #7
 80055ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4a15      	ldr	r2, [pc, #84]	; (8005628 <prvHeapInit+0xb4>)
 80055d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055d6:	4b14      	ldr	r3, [pc, #80]	; (8005628 <prvHeapInit+0xb4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2200      	movs	r2, #0
 80055dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055de:	4b12      	ldr	r3, [pc, #72]	; (8005628 <prvHeapInit+0xb4>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2200      	movs	r2, #0
 80055e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	1ad2      	subs	r2, r2, r3
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055f4:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <prvHeapInit+0xb4>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	4a0a      	ldr	r2, [pc, #40]	; (800562c <prvHeapInit+0xb8>)
 8005602:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	4a09      	ldr	r2, [pc, #36]	; (8005630 <prvHeapInit+0xbc>)
 800560a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800560c:	4b09      	ldr	r3, [pc, #36]	; (8005634 <prvHeapInit+0xc0>)
 800560e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005612:	601a      	str	r2, [r3, #0]
}
 8005614:	bf00      	nop
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	20001078 	.word	0x20001078
 8005624:	20004c78 	.word	0x20004c78
 8005628:	20004c80 	.word	0x20004c80
 800562c:	20004c88 	.word	0x20004c88
 8005630:	20004c84 	.word	0x20004c84
 8005634:	20004c94 	.word	0x20004c94

08005638 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005640:	4b28      	ldr	r3, [pc, #160]	; (80056e4 <prvInsertBlockIntoFreeList+0xac>)
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e002      	b.n	800564c <prvInsertBlockIntoFreeList+0x14>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	429a      	cmp	r2, r3
 8005654:	d8f7      	bhi.n	8005646 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	4413      	add	r3, r2
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	429a      	cmp	r2, r3
 8005666:	d108      	bne.n	800567a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	441a      	add	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	441a      	add	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d118      	bne.n	80056c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <prvInsertBlockIntoFreeList+0xb0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d00d      	beq.n	80056b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	441a      	add	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	e008      	b.n	80056c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056b6:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <prvInsertBlockIntoFreeList+0xb0>)
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	e003      	b.n	80056c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d002      	beq.n	80056d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056d6:	bf00      	nop
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20004c78 	.word	0x20004c78
 80056e8:	20004c80 	.word	0x20004c80

080056ec <__errno>:
 80056ec:	4b01      	ldr	r3, [pc, #4]	; (80056f4 <__errno+0x8>)
 80056ee:	6818      	ldr	r0, [r3, #0]
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	20000010 	.word	0x20000010

080056f8 <__libc_init_array>:
 80056f8:	b570      	push	{r4, r5, r6, lr}
 80056fa:	4d0d      	ldr	r5, [pc, #52]	; (8005730 <__libc_init_array+0x38>)
 80056fc:	4c0d      	ldr	r4, [pc, #52]	; (8005734 <__libc_init_array+0x3c>)
 80056fe:	1b64      	subs	r4, r4, r5
 8005700:	10a4      	asrs	r4, r4, #2
 8005702:	2600      	movs	r6, #0
 8005704:	42a6      	cmp	r6, r4
 8005706:	d109      	bne.n	800571c <__libc_init_array+0x24>
 8005708:	4d0b      	ldr	r5, [pc, #44]	; (8005738 <__libc_init_array+0x40>)
 800570a:	4c0c      	ldr	r4, [pc, #48]	; (800573c <__libc_init_array+0x44>)
 800570c:	f000 fc8e 	bl	800602c <_init>
 8005710:	1b64      	subs	r4, r4, r5
 8005712:	10a4      	asrs	r4, r4, #2
 8005714:	2600      	movs	r6, #0
 8005716:	42a6      	cmp	r6, r4
 8005718:	d105      	bne.n	8005726 <__libc_init_array+0x2e>
 800571a:	bd70      	pop	{r4, r5, r6, pc}
 800571c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005720:	4798      	blx	r3
 8005722:	3601      	adds	r6, #1
 8005724:	e7ee      	b.n	8005704 <__libc_init_array+0xc>
 8005726:	f855 3b04 	ldr.w	r3, [r5], #4
 800572a:	4798      	blx	r3
 800572c:	3601      	adds	r6, #1
 800572e:	e7f2      	b.n	8005716 <__libc_init_array+0x1e>
 8005730:	080061a0 	.word	0x080061a0
 8005734:	080061a0 	.word	0x080061a0
 8005738:	080061a0 	.word	0x080061a0
 800573c:	080061a4 	.word	0x080061a4

08005740 <memcpy>:
 8005740:	440a      	add	r2, r1
 8005742:	4291      	cmp	r1, r2
 8005744:	f100 33ff 	add.w	r3, r0, #4294967295
 8005748:	d100      	bne.n	800574c <memcpy+0xc>
 800574a:	4770      	bx	lr
 800574c:	b510      	push	{r4, lr}
 800574e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005752:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005756:	4291      	cmp	r1, r2
 8005758:	d1f9      	bne.n	800574e <memcpy+0xe>
 800575a:	bd10      	pop	{r4, pc}

0800575c <memset>:
 800575c:	4402      	add	r2, r0
 800575e:	4603      	mov	r3, r0
 8005760:	4293      	cmp	r3, r2
 8005762:	d100      	bne.n	8005766 <memset+0xa>
 8005764:	4770      	bx	lr
 8005766:	f803 1b01 	strb.w	r1, [r3], #1
 800576a:	e7f9      	b.n	8005760 <memset+0x4>

0800576c <siprintf>:
 800576c:	b40e      	push	{r1, r2, r3}
 800576e:	b500      	push	{lr}
 8005770:	b09c      	sub	sp, #112	; 0x70
 8005772:	ab1d      	add	r3, sp, #116	; 0x74
 8005774:	9002      	str	r0, [sp, #8]
 8005776:	9006      	str	r0, [sp, #24]
 8005778:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800577c:	4809      	ldr	r0, [pc, #36]	; (80057a4 <siprintf+0x38>)
 800577e:	9107      	str	r1, [sp, #28]
 8005780:	9104      	str	r1, [sp, #16]
 8005782:	4909      	ldr	r1, [pc, #36]	; (80057a8 <siprintf+0x3c>)
 8005784:	f853 2b04 	ldr.w	r2, [r3], #4
 8005788:	9105      	str	r1, [sp, #20]
 800578a:	6800      	ldr	r0, [r0, #0]
 800578c:	9301      	str	r3, [sp, #4]
 800578e:	a902      	add	r1, sp, #8
 8005790:	f000 f868 	bl	8005864 <_svfiprintf_r>
 8005794:	9b02      	ldr	r3, [sp, #8]
 8005796:	2200      	movs	r2, #0
 8005798:	701a      	strb	r2, [r3, #0]
 800579a:	b01c      	add	sp, #112	; 0x70
 800579c:	f85d eb04 	ldr.w	lr, [sp], #4
 80057a0:	b003      	add	sp, #12
 80057a2:	4770      	bx	lr
 80057a4:	20000010 	.word	0x20000010
 80057a8:	ffff0208 	.word	0xffff0208

080057ac <__ssputs_r>:
 80057ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057b0:	688e      	ldr	r6, [r1, #8]
 80057b2:	429e      	cmp	r6, r3
 80057b4:	4682      	mov	sl, r0
 80057b6:	460c      	mov	r4, r1
 80057b8:	4690      	mov	r8, r2
 80057ba:	461f      	mov	r7, r3
 80057bc:	d838      	bhi.n	8005830 <__ssputs_r+0x84>
 80057be:	898a      	ldrh	r2, [r1, #12]
 80057c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057c4:	d032      	beq.n	800582c <__ssputs_r+0x80>
 80057c6:	6825      	ldr	r5, [r4, #0]
 80057c8:	6909      	ldr	r1, [r1, #16]
 80057ca:	eba5 0901 	sub.w	r9, r5, r1
 80057ce:	6965      	ldr	r5, [r4, #20]
 80057d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057d8:	3301      	adds	r3, #1
 80057da:	444b      	add	r3, r9
 80057dc:	106d      	asrs	r5, r5, #1
 80057de:	429d      	cmp	r5, r3
 80057e0:	bf38      	it	cc
 80057e2:	461d      	movcc	r5, r3
 80057e4:	0553      	lsls	r3, r2, #21
 80057e6:	d531      	bpl.n	800584c <__ssputs_r+0xa0>
 80057e8:	4629      	mov	r1, r5
 80057ea:	f000 fb55 	bl	8005e98 <_malloc_r>
 80057ee:	4606      	mov	r6, r0
 80057f0:	b950      	cbnz	r0, 8005808 <__ssputs_r+0x5c>
 80057f2:	230c      	movs	r3, #12
 80057f4:	f8ca 3000 	str.w	r3, [sl]
 80057f8:	89a3      	ldrh	r3, [r4, #12]
 80057fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057fe:	81a3      	strh	r3, [r4, #12]
 8005800:	f04f 30ff 	mov.w	r0, #4294967295
 8005804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005808:	6921      	ldr	r1, [r4, #16]
 800580a:	464a      	mov	r2, r9
 800580c:	f7ff ff98 	bl	8005740 <memcpy>
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800581a:	81a3      	strh	r3, [r4, #12]
 800581c:	6126      	str	r6, [r4, #16]
 800581e:	6165      	str	r5, [r4, #20]
 8005820:	444e      	add	r6, r9
 8005822:	eba5 0509 	sub.w	r5, r5, r9
 8005826:	6026      	str	r6, [r4, #0]
 8005828:	60a5      	str	r5, [r4, #8]
 800582a:	463e      	mov	r6, r7
 800582c:	42be      	cmp	r6, r7
 800582e:	d900      	bls.n	8005832 <__ssputs_r+0x86>
 8005830:	463e      	mov	r6, r7
 8005832:	6820      	ldr	r0, [r4, #0]
 8005834:	4632      	mov	r2, r6
 8005836:	4641      	mov	r1, r8
 8005838:	f000 faa8 	bl	8005d8c <memmove>
 800583c:	68a3      	ldr	r3, [r4, #8]
 800583e:	1b9b      	subs	r3, r3, r6
 8005840:	60a3      	str	r3, [r4, #8]
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	4433      	add	r3, r6
 8005846:	6023      	str	r3, [r4, #0]
 8005848:	2000      	movs	r0, #0
 800584a:	e7db      	b.n	8005804 <__ssputs_r+0x58>
 800584c:	462a      	mov	r2, r5
 800584e:	f000 fb97 	bl	8005f80 <_realloc_r>
 8005852:	4606      	mov	r6, r0
 8005854:	2800      	cmp	r0, #0
 8005856:	d1e1      	bne.n	800581c <__ssputs_r+0x70>
 8005858:	6921      	ldr	r1, [r4, #16]
 800585a:	4650      	mov	r0, sl
 800585c:	f000 fab0 	bl	8005dc0 <_free_r>
 8005860:	e7c7      	b.n	80057f2 <__ssputs_r+0x46>
	...

08005864 <_svfiprintf_r>:
 8005864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005868:	4698      	mov	r8, r3
 800586a:	898b      	ldrh	r3, [r1, #12]
 800586c:	061b      	lsls	r3, r3, #24
 800586e:	b09d      	sub	sp, #116	; 0x74
 8005870:	4607      	mov	r7, r0
 8005872:	460d      	mov	r5, r1
 8005874:	4614      	mov	r4, r2
 8005876:	d50e      	bpl.n	8005896 <_svfiprintf_r+0x32>
 8005878:	690b      	ldr	r3, [r1, #16]
 800587a:	b963      	cbnz	r3, 8005896 <_svfiprintf_r+0x32>
 800587c:	2140      	movs	r1, #64	; 0x40
 800587e:	f000 fb0b 	bl	8005e98 <_malloc_r>
 8005882:	6028      	str	r0, [r5, #0]
 8005884:	6128      	str	r0, [r5, #16]
 8005886:	b920      	cbnz	r0, 8005892 <_svfiprintf_r+0x2e>
 8005888:	230c      	movs	r3, #12
 800588a:	603b      	str	r3, [r7, #0]
 800588c:	f04f 30ff 	mov.w	r0, #4294967295
 8005890:	e0d1      	b.n	8005a36 <_svfiprintf_r+0x1d2>
 8005892:	2340      	movs	r3, #64	; 0x40
 8005894:	616b      	str	r3, [r5, #20]
 8005896:	2300      	movs	r3, #0
 8005898:	9309      	str	r3, [sp, #36]	; 0x24
 800589a:	2320      	movs	r3, #32
 800589c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80058a4:	2330      	movs	r3, #48	; 0x30
 80058a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005a50 <_svfiprintf_r+0x1ec>
 80058aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058ae:	f04f 0901 	mov.w	r9, #1
 80058b2:	4623      	mov	r3, r4
 80058b4:	469a      	mov	sl, r3
 80058b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058ba:	b10a      	cbz	r2, 80058c0 <_svfiprintf_r+0x5c>
 80058bc:	2a25      	cmp	r2, #37	; 0x25
 80058be:	d1f9      	bne.n	80058b4 <_svfiprintf_r+0x50>
 80058c0:	ebba 0b04 	subs.w	fp, sl, r4
 80058c4:	d00b      	beq.n	80058de <_svfiprintf_r+0x7a>
 80058c6:	465b      	mov	r3, fp
 80058c8:	4622      	mov	r2, r4
 80058ca:	4629      	mov	r1, r5
 80058cc:	4638      	mov	r0, r7
 80058ce:	f7ff ff6d 	bl	80057ac <__ssputs_r>
 80058d2:	3001      	adds	r0, #1
 80058d4:	f000 80aa 	beq.w	8005a2c <_svfiprintf_r+0x1c8>
 80058d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058da:	445a      	add	r2, fp
 80058dc:	9209      	str	r2, [sp, #36]	; 0x24
 80058de:	f89a 3000 	ldrb.w	r3, [sl]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 80a2 	beq.w	8005a2c <_svfiprintf_r+0x1c8>
 80058e8:	2300      	movs	r3, #0
 80058ea:	f04f 32ff 	mov.w	r2, #4294967295
 80058ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058f2:	f10a 0a01 	add.w	sl, sl, #1
 80058f6:	9304      	str	r3, [sp, #16]
 80058f8:	9307      	str	r3, [sp, #28]
 80058fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058fe:	931a      	str	r3, [sp, #104]	; 0x68
 8005900:	4654      	mov	r4, sl
 8005902:	2205      	movs	r2, #5
 8005904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005908:	4851      	ldr	r0, [pc, #324]	; (8005a50 <_svfiprintf_r+0x1ec>)
 800590a:	f7fa fc71 	bl	80001f0 <memchr>
 800590e:	9a04      	ldr	r2, [sp, #16]
 8005910:	b9d8      	cbnz	r0, 800594a <_svfiprintf_r+0xe6>
 8005912:	06d0      	lsls	r0, r2, #27
 8005914:	bf44      	itt	mi
 8005916:	2320      	movmi	r3, #32
 8005918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800591c:	0711      	lsls	r1, r2, #28
 800591e:	bf44      	itt	mi
 8005920:	232b      	movmi	r3, #43	; 0x2b
 8005922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005926:	f89a 3000 	ldrb.w	r3, [sl]
 800592a:	2b2a      	cmp	r3, #42	; 0x2a
 800592c:	d015      	beq.n	800595a <_svfiprintf_r+0xf6>
 800592e:	9a07      	ldr	r2, [sp, #28]
 8005930:	4654      	mov	r4, sl
 8005932:	2000      	movs	r0, #0
 8005934:	f04f 0c0a 	mov.w	ip, #10
 8005938:	4621      	mov	r1, r4
 800593a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800593e:	3b30      	subs	r3, #48	; 0x30
 8005940:	2b09      	cmp	r3, #9
 8005942:	d94e      	bls.n	80059e2 <_svfiprintf_r+0x17e>
 8005944:	b1b0      	cbz	r0, 8005974 <_svfiprintf_r+0x110>
 8005946:	9207      	str	r2, [sp, #28]
 8005948:	e014      	b.n	8005974 <_svfiprintf_r+0x110>
 800594a:	eba0 0308 	sub.w	r3, r0, r8
 800594e:	fa09 f303 	lsl.w	r3, r9, r3
 8005952:	4313      	orrs	r3, r2
 8005954:	9304      	str	r3, [sp, #16]
 8005956:	46a2      	mov	sl, r4
 8005958:	e7d2      	b.n	8005900 <_svfiprintf_r+0x9c>
 800595a:	9b03      	ldr	r3, [sp, #12]
 800595c:	1d19      	adds	r1, r3, #4
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	9103      	str	r1, [sp, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	bfbb      	ittet	lt
 8005966:	425b      	neglt	r3, r3
 8005968:	f042 0202 	orrlt.w	r2, r2, #2
 800596c:	9307      	strge	r3, [sp, #28]
 800596e:	9307      	strlt	r3, [sp, #28]
 8005970:	bfb8      	it	lt
 8005972:	9204      	strlt	r2, [sp, #16]
 8005974:	7823      	ldrb	r3, [r4, #0]
 8005976:	2b2e      	cmp	r3, #46	; 0x2e
 8005978:	d10c      	bne.n	8005994 <_svfiprintf_r+0x130>
 800597a:	7863      	ldrb	r3, [r4, #1]
 800597c:	2b2a      	cmp	r3, #42	; 0x2a
 800597e:	d135      	bne.n	80059ec <_svfiprintf_r+0x188>
 8005980:	9b03      	ldr	r3, [sp, #12]
 8005982:	1d1a      	adds	r2, r3, #4
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	9203      	str	r2, [sp, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	bfb8      	it	lt
 800598c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005990:	3402      	adds	r4, #2
 8005992:	9305      	str	r3, [sp, #20]
 8005994:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005a60 <_svfiprintf_r+0x1fc>
 8005998:	7821      	ldrb	r1, [r4, #0]
 800599a:	2203      	movs	r2, #3
 800599c:	4650      	mov	r0, sl
 800599e:	f7fa fc27 	bl	80001f0 <memchr>
 80059a2:	b140      	cbz	r0, 80059b6 <_svfiprintf_r+0x152>
 80059a4:	2340      	movs	r3, #64	; 0x40
 80059a6:	eba0 000a 	sub.w	r0, r0, sl
 80059aa:	fa03 f000 	lsl.w	r0, r3, r0
 80059ae:	9b04      	ldr	r3, [sp, #16]
 80059b0:	4303      	orrs	r3, r0
 80059b2:	3401      	adds	r4, #1
 80059b4:	9304      	str	r3, [sp, #16]
 80059b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ba:	4826      	ldr	r0, [pc, #152]	; (8005a54 <_svfiprintf_r+0x1f0>)
 80059bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059c0:	2206      	movs	r2, #6
 80059c2:	f7fa fc15 	bl	80001f0 <memchr>
 80059c6:	2800      	cmp	r0, #0
 80059c8:	d038      	beq.n	8005a3c <_svfiprintf_r+0x1d8>
 80059ca:	4b23      	ldr	r3, [pc, #140]	; (8005a58 <_svfiprintf_r+0x1f4>)
 80059cc:	bb1b      	cbnz	r3, 8005a16 <_svfiprintf_r+0x1b2>
 80059ce:	9b03      	ldr	r3, [sp, #12]
 80059d0:	3307      	adds	r3, #7
 80059d2:	f023 0307 	bic.w	r3, r3, #7
 80059d6:	3308      	adds	r3, #8
 80059d8:	9303      	str	r3, [sp, #12]
 80059da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059dc:	4433      	add	r3, r6
 80059de:	9309      	str	r3, [sp, #36]	; 0x24
 80059e0:	e767      	b.n	80058b2 <_svfiprintf_r+0x4e>
 80059e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80059e6:	460c      	mov	r4, r1
 80059e8:	2001      	movs	r0, #1
 80059ea:	e7a5      	b.n	8005938 <_svfiprintf_r+0xd4>
 80059ec:	2300      	movs	r3, #0
 80059ee:	3401      	adds	r4, #1
 80059f0:	9305      	str	r3, [sp, #20]
 80059f2:	4619      	mov	r1, r3
 80059f4:	f04f 0c0a 	mov.w	ip, #10
 80059f8:	4620      	mov	r0, r4
 80059fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059fe:	3a30      	subs	r2, #48	; 0x30
 8005a00:	2a09      	cmp	r2, #9
 8005a02:	d903      	bls.n	8005a0c <_svfiprintf_r+0x1a8>
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d0c5      	beq.n	8005994 <_svfiprintf_r+0x130>
 8005a08:	9105      	str	r1, [sp, #20]
 8005a0a:	e7c3      	b.n	8005994 <_svfiprintf_r+0x130>
 8005a0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a10:	4604      	mov	r4, r0
 8005a12:	2301      	movs	r3, #1
 8005a14:	e7f0      	b.n	80059f8 <_svfiprintf_r+0x194>
 8005a16:	ab03      	add	r3, sp, #12
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	462a      	mov	r2, r5
 8005a1c:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <_svfiprintf_r+0x1f8>)
 8005a1e:	a904      	add	r1, sp, #16
 8005a20:	4638      	mov	r0, r7
 8005a22:	f3af 8000 	nop.w
 8005a26:	1c42      	adds	r2, r0, #1
 8005a28:	4606      	mov	r6, r0
 8005a2a:	d1d6      	bne.n	80059da <_svfiprintf_r+0x176>
 8005a2c:	89ab      	ldrh	r3, [r5, #12]
 8005a2e:	065b      	lsls	r3, r3, #25
 8005a30:	f53f af2c 	bmi.w	800588c <_svfiprintf_r+0x28>
 8005a34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a36:	b01d      	add	sp, #116	; 0x74
 8005a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a3c:	ab03      	add	r3, sp, #12
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	462a      	mov	r2, r5
 8005a42:	4b06      	ldr	r3, [pc, #24]	; (8005a5c <_svfiprintf_r+0x1f8>)
 8005a44:	a904      	add	r1, sp, #16
 8005a46:	4638      	mov	r0, r7
 8005a48:	f000 f87a 	bl	8005b40 <_printf_i>
 8005a4c:	e7eb      	b.n	8005a26 <_svfiprintf_r+0x1c2>
 8005a4e:	bf00      	nop
 8005a50:	08006164 	.word	0x08006164
 8005a54:	0800616e 	.word	0x0800616e
 8005a58:	00000000 	.word	0x00000000
 8005a5c:	080057ad 	.word	0x080057ad
 8005a60:	0800616a 	.word	0x0800616a

08005a64 <_printf_common>:
 8005a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a68:	4616      	mov	r6, r2
 8005a6a:	4699      	mov	r9, r3
 8005a6c:	688a      	ldr	r2, [r1, #8]
 8005a6e:	690b      	ldr	r3, [r1, #16]
 8005a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a74:	4293      	cmp	r3, r2
 8005a76:	bfb8      	it	lt
 8005a78:	4613      	movlt	r3, r2
 8005a7a:	6033      	str	r3, [r6, #0]
 8005a7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a80:	4607      	mov	r7, r0
 8005a82:	460c      	mov	r4, r1
 8005a84:	b10a      	cbz	r2, 8005a8a <_printf_common+0x26>
 8005a86:	3301      	adds	r3, #1
 8005a88:	6033      	str	r3, [r6, #0]
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	0699      	lsls	r1, r3, #26
 8005a8e:	bf42      	ittt	mi
 8005a90:	6833      	ldrmi	r3, [r6, #0]
 8005a92:	3302      	addmi	r3, #2
 8005a94:	6033      	strmi	r3, [r6, #0]
 8005a96:	6825      	ldr	r5, [r4, #0]
 8005a98:	f015 0506 	ands.w	r5, r5, #6
 8005a9c:	d106      	bne.n	8005aac <_printf_common+0x48>
 8005a9e:	f104 0a19 	add.w	sl, r4, #25
 8005aa2:	68e3      	ldr	r3, [r4, #12]
 8005aa4:	6832      	ldr	r2, [r6, #0]
 8005aa6:	1a9b      	subs	r3, r3, r2
 8005aa8:	42ab      	cmp	r3, r5
 8005aaa:	dc26      	bgt.n	8005afa <_printf_common+0x96>
 8005aac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ab0:	1e13      	subs	r3, r2, #0
 8005ab2:	6822      	ldr	r2, [r4, #0]
 8005ab4:	bf18      	it	ne
 8005ab6:	2301      	movne	r3, #1
 8005ab8:	0692      	lsls	r2, r2, #26
 8005aba:	d42b      	bmi.n	8005b14 <_printf_common+0xb0>
 8005abc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ac0:	4649      	mov	r1, r9
 8005ac2:	4638      	mov	r0, r7
 8005ac4:	47c0      	blx	r8
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	d01e      	beq.n	8005b08 <_printf_common+0xa4>
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	68e5      	ldr	r5, [r4, #12]
 8005ace:	6832      	ldr	r2, [r6, #0]
 8005ad0:	f003 0306 	and.w	r3, r3, #6
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	bf08      	it	eq
 8005ad8:	1aad      	subeq	r5, r5, r2
 8005ada:	68a3      	ldr	r3, [r4, #8]
 8005adc:	6922      	ldr	r2, [r4, #16]
 8005ade:	bf0c      	ite	eq
 8005ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ae4:	2500      	movne	r5, #0
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	bfc4      	itt	gt
 8005aea:	1a9b      	subgt	r3, r3, r2
 8005aec:	18ed      	addgt	r5, r5, r3
 8005aee:	2600      	movs	r6, #0
 8005af0:	341a      	adds	r4, #26
 8005af2:	42b5      	cmp	r5, r6
 8005af4:	d11a      	bne.n	8005b2c <_printf_common+0xc8>
 8005af6:	2000      	movs	r0, #0
 8005af8:	e008      	b.n	8005b0c <_printf_common+0xa8>
 8005afa:	2301      	movs	r3, #1
 8005afc:	4652      	mov	r2, sl
 8005afe:	4649      	mov	r1, r9
 8005b00:	4638      	mov	r0, r7
 8005b02:	47c0      	blx	r8
 8005b04:	3001      	adds	r0, #1
 8005b06:	d103      	bne.n	8005b10 <_printf_common+0xac>
 8005b08:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b10:	3501      	adds	r5, #1
 8005b12:	e7c6      	b.n	8005aa2 <_printf_common+0x3e>
 8005b14:	18e1      	adds	r1, r4, r3
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	2030      	movs	r0, #48	; 0x30
 8005b1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b1e:	4422      	add	r2, r4
 8005b20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b28:	3302      	adds	r3, #2
 8005b2a:	e7c7      	b.n	8005abc <_printf_common+0x58>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	4622      	mov	r2, r4
 8005b30:	4649      	mov	r1, r9
 8005b32:	4638      	mov	r0, r7
 8005b34:	47c0      	blx	r8
 8005b36:	3001      	adds	r0, #1
 8005b38:	d0e6      	beq.n	8005b08 <_printf_common+0xa4>
 8005b3a:	3601      	adds	r6, #1
 8005b3c:	e7d9      	b.n	8005af2 <_printf_common+0x8e>
	...

08005b40 <_printf_i>:
 8005b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b44:	7e0f      	ldrb	r7, [r1, #24]
 8005b46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b48:	2f78      	cmp	r7, #120	; 0x78
 8005b4a:	4691      	mov	r9, r2
 8005b4c:	4680      	mov	r8, r0
 8005b4e:	460c      	mov	r4, r1
 8005b50:	469a      	mov	sl, r3
 8005b52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b56:	d807      	bhi.n	8005b68 <_printf_i+0x28>
 8005b58:	2f62      	cmp	r7, #98	; 0x62
 8005b5a:	d80a      	bhi.n	8005b72 <_printf_i+0x32>
 8005b5c:	2f00      	cmp	r7, #0
 8005b5e:	f000 80d8 	beq.w	8005d12 <_printf_i+0x1d2>
 8005b62:	2f58      	cmp	r7, #88	; 0x58
 8005b64:	f000 80a3 	beq.w	8005cae <_printf_i+0x16e>
 8005b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b70:	e03a      	b.n	8005be8 <_printf_i+0xa8>
 8005b72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b76:	2b15      	cmp	r3, #21
 8005b78:	d8f6      	bhi.n	8005b68 <_printf_i+0x28>
 8005b7a:	a101      	add	r1, pc, #4	; (adr r1, 8005b80 <_printf_i+0x40>)
 8005b7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b80:	08005bd9 	.word	0x08005bd9
 8005b84:	08005bed 	.word	0x08005bed
 8005b88:	08005b69 	.word	0x08005b69
 8005b8c:	08005b69 	.word	0x08005b69
 8005b90:	08005b69 	.word	0x08005b69
 8005b94:	08005b69 	.word	0x08005b69
 8005b98:	08005bed 	.word	0x08005bed
 8005b9c:	08005b69 	.word	0x08005b69
 8005ba0:	08005b69 	.word	0x08005b69
 8005ba4:	08005b69 	.word	0x08005b69
 8005ba8:	08005b69 	.word	0x08005b69
 8005bac:	08005cf9 	.word	0x08005cf9
 8005bb0:	08005c1d 	.word	0x08005c1d
 8005bb4:	08005cdb 	.word	0x08005cdb
 8005bb8:	08005b69 	.word	0x08005b69
 8005bbc:	08005b69 	.word	0x08005b69
 8005bc0:	08005d1b 	.word	0x08005d1b
 8005bc4:	08005b69 	.word	0x08005b69
 8005bc8:	08005c1d 	.word	0x08005c1d
 8005bcc:	08005b69 	.word	0x08005b69
 8005bd0:	08005b69 	.word	0x08005b69
 8005bd4:	08005ce3 	.word	0x08005ce3
 8005bd8:	682b      	ldr	r3, [r5, #0]
 8005bda:	1d1a      	adds	r2, r3, #4
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	602a      	str	r2, [r5, #0]
 8005be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005be8:	2301      	movs	r3, #1
 8005bea:	e0a3      	b.n	8005d34 <_printf_i+0x1f4>
 8005bec:	6820      	ldr	r0, [r4, #0]
 8005bee:	6829      	ldr	r1, [r5, #0]
 8005bf0:	0606      	lsls	r6, r0, #24
 8005bf2:	f101 0304 	add.w	r3, r1, #4
 8005bf6:	d50a      	bpl.n	8005c0e <_printf_i+0xce>
 8005bf8:	680e      	ldr	r6, [r1, #0]
 8005bfa:	602b      	str	r3, [r5, #0]
 8005bfc:	2e00      	cmp	r6, #0
 8005bfe:	da03      	bge.n	8005c08 <_printf_i+0xc8>
 8005c00:	232d      	movs	r3, #45	; 0x2d
 8005c02:	4276      	negs	r6, r6
 8005c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c08:	485e      	ldr	r0, [pc, #376]	; (8005d84 <_printf_i+0x244>)
 8005c0a:	230a      	movs	r3, #10
 8005c0c:	e019      	b.n	8005c42 <_printf_i+0x102>
 8005c0e:	680e      	ldr	r6, [r1, #0]
 8005c10:	602b      	str	r3, [r5, #0]
 8005c12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c16:	bf18      	it	ne
 8005c18:	b236      	sxthne	r6, r6
 8005c1a:	e7ef      	b.n	8005bfc <_printf_i+0xbc>
 8005c1c:	682b      	ldr	r3, [r5, #0]
 8005c1e:	6820      	ldr	r0, [r4, #0]
 8005c20:	1d19      	adds	r1, r3, #4
 8005c22:	6029      	str	r1, [r5, #0]
 8005c24:	0601      	lsls	r1, r0, #24
 8005c26:	d501      	bpl.n	8005c2c <_printf_i+0xec>
 8005c28:	681e      	ldr	r6, [r3, #0]
 8005c2a:	e002      	b.n	8005c32 <_printf_i+0xf2>
 8005c2c:	0646      	lsls	r6, r0, #25
 8005c2e:	d5fb      	bpl.n	8005c28 <_printf_i+0xe8>
 8005c30:	881e      	ldrh	r6, [r3, #0]
 8005c32:	4854      	ldr	r0, [pc, #336]	; (8005d84 <_printf_i+0x244>)
 8005c34:	2f6f      	cmp	r7, #111	; 0x6f
 8005c36:	bf0c      	ite	eq
 8005c38:	2308      	moveq	r3, #8
 8005c3a:	230a      	movne	r3, #10
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c42:	6865      	ldr	r5, [r4, #4]
 8005c44:	60a5      	str	r5, [r4, #8]
 8005c46:	2d00      	cmp	r5, #0
 8005c48:	bfa2      	ittt	ge
 8005c4a:	6821      	ldrge	r1, [r4, #0]
 8005c4c:	f021 0104 	bicge.w	r1, r1, #4
 8005c50:	6021      	strge	r1, [r4, #0]
 8005c52:	b90e      	cbnz	r6, 8005c58 <_printf_i+0x118>
 8005c54:	2d00      	cmp	r5, #0
 8005c56:	d04d      	beq.n	8005cf4 <_printf_i+0x1b4>
 8005c58:	4615      	mov	r5, r2
 8005c5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c5e:	fb03 6711 	mls	r7, r3, r1, r6
 8005c62:	5dc7      	ldrb	r7, [r0, r7]
 8005c64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c68:	4637      	mov	r7, r6
 8005c6a:	42bb      	cmp	r3, r7
 8005c6c:	460e      	mov	r6, r1
 8005c6e:	d9f4      	bls.n	8005c5a <_printf_i+0x11a>
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d10b      	bne.n	8005c8c <_printf_i+0x14c>
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	07de      	lsls	r6, r3, #31
 8005c78:	d508      	bpl.n	8005c8c <_printf_i+0x14c>
 8005c7a:	6923      	ldr	r3, [r4, #16]
 8005c7c:	6861      	ldr	r1, [r4, #4]
 8005c7e:	4299      	cmp	r1, r3
 8005c80:	bfde      	ittt	le
 8005c82:	2330      	movle	r3, #48	; 0x30
 8005c84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c8c:	1b52      	subs	r2, r2, r5
 8005c8e:	6122      	str	r2, [r4, #16]
 8005c90:	f8cd a000 	str.w	sl, [sp]
 8005c94:	464b      	mov	r3, r9
 8005c96:	aa03      	add	r2, sp, #12
 8005c98:	4621      	mov	r1, r4
 8005c9a:	4640      	mov	r0, r8
 8005c9c:	f7ff fee2 	bl	8005a64 <_printf_common>
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d14c      	bne.n	8005d3e <_printf_i+0x1fe>
 8005ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca8:	b004      	add	sp, #16
 8005caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cae:	4835      	ldr	r0, [pc, #212]	; (8005d84 <_printf_i+0x244>)
 8005cb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005cb4:	6829      	ldr	r1, [r5, #0]
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cbc:	6029      	str	r1, [r5, #0]
 8005cbe:	061d      	lsls	r5, r3, #24
 8005cc0:	d514      	bpl.n	8005cec <_printf_i+0x1ac>
 8005cc2:	07df      	lsls	r7, r3, #31
 8005cc4:	bf44      	itt	mi
 8005cc6:	f043 0320 	orrmi.w	r3, r3, #32
 8005cca:	6023      	strmi	r3, [r4, #0]
 8005ccc:	b91e      	cbnz	r6, 8005cd6 <_printf_i+0x196>
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	f023 0320 	bic.w	r3, r3, #32
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	2310      	movs	r3, #16
 8005cd8:	e7b0      	b.n	8005c3c <_printf_i+0xfc>
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	f043 0320 	orr.w	r3, r3, #32
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	2378      	movs	r3, #120	; 0x78
 8005ce4:	4828      	ldr	r0, [pc, #160]	; (8005d88 <_printf_i+0x248>)
 8005ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cea:	e7e3      	b.n	8005cb4 <_printf_i+0x174>
 8005cec:	0659      	lsls	r1, r3, #25
 8005cee:	bf48      	it	mi
 8005cf0:	b2b6      	uxthmi	r6, r6
 8005cf2:	e7e6      	b.n	8005cc2 <_printf_i+0x182>
 8005cf4:	4615      	mov	r5, r2
 8005cf6:	e7bb      	b.n	8005c70 <_printf_i+0x130>
 8005cf8:	682b      	ldr	r3, [r5, #0]
 8005cfa:	6826      	ldr	r6, [r4, #0]
 8005cfc:	6961      	ldr	r1, [r4, #20]
 8005cfe:	1d18      	adds	r0, r3, #4
 8005d00:	6028      	str	r0, [r5, #0]
 8005d02:	0635      	lsls	r5, r6, #24
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	d501      	bpl.n	8005d0c <_printf_i+0x1cc>
 8005d08:	6019      	str	r1, [r3, #0]
 8005d0a:	e002      	b.n	8005d12 <_printf_i+0x1d2>
 8005d0c:	0670      	lsls	r0, r6, #25
 8005d0e:	d5fb      	bpl.n	8005d08 <_printf_i+0x1c8>
 8005d10:	8019      	strh	r1, [r3, #0]
 8005d12:	2300      	movs	r3, #0
 8005d14:	6123      	str	r3, [r4, #16]
 8005d16:	4615      	mov	r5, r2
 8005d18:	e7ba      	b.n	8005c90 <_printf_i+0x150>
 8005d1a:	682b      	ldr	r3, [r5, #0]
 8005d1c:	1d1a      	adds	r2, r3, #4
 8005d1e:	602a      	str	r2, [r5, #0]
 8005d20:	681d      	ldr	r5, [r3, #0]
 8005d22:	6862      	ldr	r2, [r4, #4]
 8005d24:	2100      	movs	r1, #0
 8005d26:	4628      	mov	r0, r5
 8005d28:	f7fa fa62 	bl	80001f0 <memchr>
 8005d2c:	b108      	cbz	r0, 8005d32 <_printf_i+0x1f2>
 8005d2e:	1b40      	subs	r0, r0, r5
 8005d30:	6060      	str	r0, [r4, #4]
 8005d32:	6863      	ldr	r3, [r4, #4]
 8005d34:	6123      	str	r3, [r4, #16]
 8005d36:	2300      	movs	r3, #0
 8005d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d3c:	e7a8      	b.n	8005c90 <_printf_i+0x150>
 8005d3e:	6923      	ldr	r3, [r4, #16]
 8005d40:	462a      	mov	r2, r5
 8005d42:	4649      	mov	r1, r9
 8005d44:	4640      	mov	r0, r8
 8005d46:	47d0      	blx	sl
 8005d48:	3001      	adds	r0, #1
 8005d4a:	d0ab      	beq.n	8005ca4 <_printf_i+0x164>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	079b      	lsls	r3, r3, #30
 8005d50:	d413      	bmi.n	8005d7a <_printf_i+0x23a>
 8005d52:	68e0      	ldr	r0, [r4, #12]
 8005d54:	9b03      	ldr	r3, [sp, #12]
 8005d56:	4298      	cmp	r0, r3
 8005d58:	bfb8      	it	lt
 8005d5a:	4618      	movlt	r0, r3
 8005d5c:	e7a4      	b.n	8005ca8 <_printf_i+0x168>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	4632      	mov	r2, r6
 8005d62:	4649      	mov	r1, r9
 8005d64:	4640      	mov	r0, r8
 8005d66:	47d0      	blx	sl
 8005d68:	3001      	adds	r0, #1
 8005d6a:	d09b      	beq.n	8005ca4 <_printf_i+0x164>
 8005d6c:	3501      	adds	r5, #1
 8005d6e:	68e3      	ldr	r3, [r4, #12]
 8005d70:	9903      	ldr	r1, [sp, #12]
 8005d72:	1a5b      	subs	r3, r3, r1
 8005d74:	42ab      	cmp	r3, r5
 8005d76:	dcf2      	bgt.n	8005d5e <_printf_i+0x21e>
 8005d78:	e7eb      	b.n	8005d52 <_printf_i+0x212>
 8005d7a:	2500      	movs	r5, #0
 8005d7c:	f104 0619 	add.w	r6, r4, #25
 8005d80:	e7f5      	b.n	8005d6e <_printf_i+0x22e>
 8005d82:	bf00      	nop
 8005d84:	08006175 	.word	0x08006175
 8005d88:	08006186 	.word	0x08006186

08005d8c <memmove>:
 8005d8c:	4288      	cmp	r0, r1
 8005d8e:	b510      	push	{r4, lr}
 8005d90:	eb01 0402 	add.w	r4, r1, r2
 8005d94:	d902      	bls.n	8005d9c <memmove+0x10>
 8005d96:	4284      	cmp	r4, r0
 8005d98:	4623      	mov	r3, r4
 8005d9a:	d807      	bhi.n	8005dac <memmove+0x20>
 8005d9c:	1e43      	subs	r3, r0, #1
 8005d9e:	42a1      	cmp	r1, r4
 8005da0:	d008      	beq.n	8005db4 <memmove+0x28>
 8005da2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005da6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005daa:	e7f8      	b.n	8005d9e <memmove+0x12>
 8005dac:	4402      	add	r2, r0
 8005dae:	4601      	mov	r1, r0
 8005db0:	428a      	cmp	r2, r1
 8005db2:	d100      	bne.n	8005db6 <memmove+0x2a>
 8005db4:	bd10      	pop	{r4, pc}
 8005db6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dbe:	e7f7      	b.n	8005db0 <memmove+0x24>

08005dc0 <_free_r>:
 8005dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dc2:	2900      	cmp	r1, #0
 8005dc4:	d044      	beq.n	8005e50 <_free_r+0x90>
 8005dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dca:	9001      	str	r0, [sp, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f1a1 0404 	sub.w	r4, r1, #4
 8005dd2:	bfb8      	it	lt
 8005dd4:	18e4      	addlt	r4, r4, r3
 8005dd6:	f000 f913 	bl	8006000 <__malloc_lock>
 8005dda:	4a1e      	ldr	r2, [pc, #120]	; (8005e54 <_free_r+0x94>)
 8005ddc:	9801      	ldr	r0, [sp, #4]
 8005dde:	6813      	ldr	r3, [r2, #0]
 8005de0:	b933      	cbnz	r3, 8005df0 <_free_r+0x30>
 8005de2:	6063      	str	r3, [r4, #4]
 8005de4:	6014      	str	r4, [r2, #0]
 8005de6:	b003      	add	sp, #12
 8005de8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005dec:	f000 b90e 	b.w	800600c <__malloc_unlock>
 8005df0:	42a3      	cmp	r3, r4
 8005df2:	d908      	bls.n	8005e06 <_free_r+0x46>
 8005df4:	6825      	ldr	r5, [r4, #0]
 8005df6:	1961      	adds	r1, r4, r5
 8005df8:	428b      	cmp	r3, r1
 8005dfa:	bf01      	itttt	eq
 8005dfc:	6819      	ldreq	r1, [r3, #0]
 8005dfe:	685b      	ldreq	r3, [r3, #4]
 8005e00:	1949      	addeq	r1, r1, r5
 8005e02:	6021      	streq	r1, [r4, #0]
 8005e04:	e7ed      	b.n	8005de2 <_free_r+0x22>
 8005e06:	461a      	mov	r2, r3
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	b10b      	cbz	r3, 8005e10 <_free_r+0x50>
 8005e0c:	42a3      	cmp	r3, r4
 8005e0e:	d9fa      	bls.n	8005e06 <_free_r+0x46>
 8005e10:	6811      	ldr	r1, [r2, #0]
 8005e12:	1855      	adds	r5, r2, r1
 8005e14:	42a5      	cmp	r5, r4
 8005e16:	d10b      	bne.n	8005e30 <_free_r+0x70>
 8005e18:	6824      	ldr	r4, [r4, #0]
 8005e1a:	4421      	add	r1, r4
 8005e1c:	1854      	adds	r4, r2, r1
 8005e1e:	42a3      	cmp	r3, r4
 8005e20:	6011      	str	r1, [r2, #0]
 8005e22:	d1e0      	bne.n	8005de6 <_free_r+0x26>
 8005e24:	681c      	ldr	r4, [r3, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	6053      	str	r3, [r2, #4]
 8005e2a:	4421      	add	r1, r4
 8005e2c:	6011      	str	r1, [r2, #0]
 8005e2e:	e7da      	b.n	8005de6 <_free_r+0x26>
 8005e30:	d902      	bls.n	8005e38 <_free_r+0x78>
 8005e32:	230c      	movs	r3, #12
 8005e34:	6003      	str	r3, [r0, #0]
 8005e36:	e7d6      	b.n	8005de6 <_free_r+0x26>
 8005e38:	6825      	ldr	r5, [r4, #0]
 8005e3a:	1961      	adds	r1, r4, r5
 8005e3c:	428b      	cmp	r3, r1
 8005e3e:	bf04      	itt	eq
 8005e40:	6819      	ldreq	r1, [r3, #0]
 8005e42:	685b      	ldreq	r3, [r3, #4]
 8005e44:	6063      	str	r3, [r4, #4]
 8005e46:	bf04      	itt	eq
 8005e48:	1949      	addeq	r1, r1, r5
 8005e4a:	6021      	streq	r1, [r4, #0]
 8005e4c:	6054      	str	r4, [r2, #4]
 8005e4e:	e7ca      	b.n	8005de6 <_free_r+0x26>
 8005e50:	b003      	add	sp, #12
 8005e52:	bd30      	pop	{r4, r5, pc}
 8005e54:	20004c98 	.word	0x20004c98

08005e58 <sbrk_aligned>:
 8005e58:	b570      	push	{r4, r5, r6, lr}
 8005e5a:	4e0e      	ldr	r6, [pc, #56]	; (8005e94 <sbrk_aligned+0x3c>)
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	6831      	ldr	r1, [r6, #0]
 8005e60:	4605      	mov	r5, r0
 8005e62:	b911      	cbnz	r1, 8005e6a <sbrk_aligned+0x12>
 8005e64:	f000 f8bc 	bl	8005fe0 <_sbrk_r>
 8005e68:	6030      	str	r0, [r6, #0]
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	f000 f8b7 	bl	8005fe0 <_sbrk_r>
 8005e72:	1c43      	adds	r3, r0, #1
 8005e74:	d00a      	beq.n	8005e8c <sbrk_aligned+0x34>
 8005e76:	1cc4      	adds	r4, r0, #3
 8005e78:	f024 0403 	bic.w	r4, r4, #3
 8005e7c:	42a0      	cmp	r0, r4
 8005e7e:	d007      	beq.n	8005e90 <sbrk_aligned+0x38>
 8005e80:	1a21      	subs	r1, r4, r0
 8005e82:	4628      	mov	r0, r5
 8005e84:	f000 f8ac 	bl	8005fe0 <_sbrk_r>
 8005e88:	3001      	adds	r0, #1
 8005e8a:	d101      	bne.n	8005e90 <sbrk_aligned+0x38>
 8005e8c:	f04f 34ff 	mov.w	r4, #4294967295
 8005e90:	4620      	mov	r0, r4
 8005e92:	bd70      	pop	{r4, r5, r6, pc}
 8005e94:	20004c9c 	.word	0x20004c9c

08005e98 <_malloc_r>:
 8005e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e9c:	1ccd      	adds	r5, r1, #3
 8005e9e:	f025 0503 	bic.w	r5, r5, #3
 8005ea2:	3508      	adds	r5, #8
 8005ea4:	2d0c      	cmp	r5, #12
 8005ea6:	bf38      	it	cc
 8005ea8:	250c      	movcc	r5, #12
 8005eaa:	2d00      	cmp	r5, #0
 8005eac:	4607      	mov	r7, r0
 8005eae:	db01      	blt.n	8005eb4 <_malloc_r+0x1c>
 8005eb0:	42a9      	cmp	r1, r5
 8005eb2:	d905      	bls.n	8005ec0 <_malloc_r+0x28>
 8005eb4:	230c      	movs	r3, #12
 8005eb6:	603b      	str	r3, [r7, #0]
 8005eb8:	2600      	movs	r6, #0
 8005eba:	4630      	mov	r0, r6
 8005ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ec0:	4e2e      	ldr	r6, [pc, #184]	; (8005f7c <_malloc_r+0xe4>)
 8005ec2:	f000 f89d 	bl	8006000 <__malloc_lock>
 8005ec6:	6833      	ldr	r3, [r6, #0]
 8005ec8:	461c      	mov	r4, r3
 8005eca:	bb34      	cbnz	r4, 8005f1a <_malloc_r+0x82>
 8005ecc:	4629      	mov	r1, r5
 8005ece:	4638      	mov	r0, r7
 8005ed0:	f7ff ffc2 	bl	8005e58 <sbrk_aligned>
 8005ed4:	1c43      	adds	r3, r0, #1
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	d14d      	bne.n	8005f76 <_malloc_r+0xde>
 8005eda:	6834      	ldr	r4, [r6, #0]
 8005edc:	4626      	mov	r6, r4
 8005ede:	2e00      	cmp	r6, #0
 8005ee0:	d140      	bne.n	8005f64 <_malloc_r+0xcc>
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	4631      	mov	r1, r6
 8005ee6:	4638      	mov	r0, r7
 8005ee8:	eb04 0803 	add.w	r8, r4, r3
 8005eec:	f000 f878 	bl	8005fe0 <_sbrk_r>
 8005ef0:	4580      	cmp	r8, r0
 8005ef2:	d13a      	bne.n	8005f6a <_malloc_r+0xd2>
 8005ef4:	6821      	ldr	r1, [r4, #0]
 8005ef6:	3503      	adds	r5, #3
 8005ef8:	1a6d      	subs	r5, r5, r1
 8005efa:	f025 0503 	bic.w	r5, r5, #3
 8005efe:	3508      	adds	r5, #8
 8005f00:	2d0c      	cmp	r5, #12
 8005f02:	bf38      	it	cc
 8005f04:	250c      	movcc	r5, #12
 8005f06:	4629      	mov	r1, r5
 8005f08:	4638      	mov	r0, r7
 8005f0a:	f7ff ffa5 	bl	8005e58 <sbrk_aligned>
 8005f0e:	3001      	adds	r0, #1
 8005f10:	d02b      	beq.n	8005f6a <_malloc_r+0xd2>
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	442b      	add	r3, r5
 8005f16:	6023      	str	r3, [r4, #0]
 8005f18:	e00e      	b.n	8005f38 <_malloc_r+0xa0>
 8005f1a:	6822      	ldr	r2, [r4, #0]
 8005f1c:	1b52      	subs	r2, r2, r5
 8005f1e:	d41e      	bmi.n	8005f5e <_malloc_r+0xc6>
 8005f20:	2a0b      	cmp	r2, #11
 8005f22:	d916      	bls.n	8005f52 <_malloc_r+0xba>
 8005f24:	1961      	adds	r1, r4, r5
 8005f26:	42a3      	cmp	r3, r4
 8005f28:	6025      	str	r5, [r4, #0]
 8005f2a:	bf18      	it	ne
 8005f2c:	6059      	strne	r1, [r3, #4]
 8005f2e:	6863      	ldr	r3, [r4, #4]
 8005f30:	bf08      	it	eq
 8005f32:	6031      	streq	r1, [r6, #0]
 8005f34:	5162      	str	r2, [r4, r5]
 8005f36:	604b      	str	r3, [r1, #4]
 8005f38:	4638      	mov	r0, r7
 8005f3a:	f104 060b 	add.w	r6, r4, #11
 8005f3e:	f000 f865 	bl	800600c <__malloc_unlock>
 8005f42:	f026 0607 	bic.w	r6, r6, #7
 8005f46:	1d23      	adds	r3, r4, #4
 8005f48:	1af2      	subs	r2, r6, r3
 8005f4a:	d0b6      	beq.n	8005eba <_malloc_r+0x22>
 8005f4c:	1b9b      	subs	r3, r3, r6
 8005f4e:	50a3      	str	r3, [r4, r2]
 8005f50:	e7b3      	b.n	8005eba <_malloc_r+0x22>
 8005f52:	6862      	ldr	r2, [r4, #4]
 8005f54:	42a3      	cmp	r3, r4
 8005f56:	bf0c      	ite	eq
 8005f58:	6032      	streq	r2, [r6, #0]
 8005f5a:	605a      	strne	r2, [r3, #4]
 8005f5c:	e7ec      	b.n	8005f38 <_malloc_r+0xa0>
 8005f5e:	4623      	mov	r3, r4
 8005f60:	6864      	ldr	r4, [r4, #4]
 8005f62:	e7b2      	b.n	8005eca <_malloc_r+0x32>
 8005f64:	4634      	mov	r4, r6
 8005f66:	6876      	ldr	r6, [r6, #4]
 8005f68:	e7b9      	b.n	8005ede <_malloc_r+0x46>
 8005f6a:	230c      	movs	r3, #12
 8005f6c:	603b      	str	r3, [r7, #0]
 8005f6e:	4638      	mov	r0, r7
 8005f70:	f000 f84c 	bl	800600c <__malloc_unlock>
 8005f74:	e7a1      	b.n	8005eba <_malloc_r+0x22>
 8005f76:	6025      	str	r5, [r4, #0]
 8005f78:	e7de      	b.n	8005f38 <_malloc_r+0xa0>
 8005f7a:	bf00      	nop
 8005f7c:	20004c98 	.word	0x20004c98

08005f80 <_realloc_r>:
 8005f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f84:	4680      	mov	r8, r0
 8005f86:	4614      	mov	r4, r2
 8005f88:	460e      	mov	r6, r1
 8005f8a:	b921      	cbnz	r1, 8005f96 <_realloc_r+0x16>
 8005f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f90:	4611      	mov	r1, r2
 8005f92:	f7ff bf81 	b.w	8005e98 <_malloc_r>
 8005f96:	b92a      	cbnz	r2, 8005fa4 <_realloc_r+0x24>
 8005f98:	f7ff ff12 	bl	8005dc0 <_free_r>
 8005f9c:	4625      	mov	r5, r4
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fa4:	f000 f838 	bl	8006018 <_malloc_usable_size_r>
 8005fa8:	4284      	cmp	r4, r0
 8005faa:	4607      	mov	r7, r0
 8005fac:	d802      	bhi.n	8005fb4 <_realloc_r+0x34>
 8005fae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005fb2:	d812      	bhi.n	8005fda <_realloc_r+0x5a>
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	4640      	mov	r0, r8
 8005fb8:	f7ff ff6e 	bl	8005e98 <_malloc_r>
 8005fbc:	4605      	mov	r5, r0
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d0ed      	beq.n	8005f9e <_realloc_r+0x1e>
 8005fc2:	42bc      	cmp	r4, r7
 8005fc4:	4622      	mov	r2, r4
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	bf28      	it	cs
 8005fca:	463a      	movcs	r2, r7
 8005fcc:	f7ff fbb8 	bl	8005740 <memcpy>
 8005fd0:	4631      	mov	r1, r6
 8005fd2:	4640      	mov	r0, r8
 8005fd4:	f7ff fef4 	bl	8005dc0 <_free_r>
 8005fd8:	e7e1      	b.n	8005f9e <_realloc_r+0x1e>
 8005fda:	4635      	mov	r5, r6
 8005fdc:	e7df      	b.n	8005f9e <_realloc_r+0x1e>
	...

08005fe0 <_sbrk_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	4d06      	ldr	r5, [pc, #24]	; (8005ffc <_sbrk_r+0x1c>)
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	4608      	mov	r0, r1
 8005fea:	602b      	str	r3, [r5, #0]
 8005fec:	f7fa fe14 	bl	8000c18 <_sbrk>
 8005ff0:	1c43      	adds	r3, r0, #1
 8005ff2:	d102      	bne.n	8005ffa <_sbrk_r+0x1a>
 8005ff4:	682b      	ldr	r3, [r5, #0]
 8005ff6:	b103      	cbz	r3, 8005ffa <_sbrk_r+0x1a>
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	bd38      	pop	{r3, r4, r5, pc}
 8005ffc:	20004ca0 	.word	0x20004ca0

08006000 <__malloc_lock>:
 8006000:	4801      	ldr	r0, [pc, #4]	; (8006008 <__malloc_lock+0x8>)
 8006002:	f000 b811 	b.w	8006028 <__retarget_lock_acquire_recursive>
 8006006:	bf00      	nop
 8006008:	20004ca4 	.word	0x20004ca4

0800600c <__malloc_unlock>:
 800600c:	4801      	ldr	r0, [pc, #4]	; (8006014 <__malloc_unlock+0x8>)
 800600e:	f000 b80c 	b.w	800602a <__retarget_lock_release_recursive>
 8006012:	bf00      	nop
 8006014:	20004ca4 	.word	0x20004ca4

08006018 <_malloc_usable_size_r>:
 8006018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800601c:	1f18      	subs	r0, r3, #4
 800601e:	2b00      	cmp	r3, #0
 8006020:	bfbc      	itt	lt
 8006022:	580b      	ldrlt	r3, [r1, r0]
 8006024:	18c0      	addlt	r0, r0, r3
 8006026:	4770      	bx	lr

08006028 <__retarget_lock_acquire_recursive>:
 8006028:	4770      	bx	lr

0800602a <__retarget_lock_release_recursive>:
 800602a:	4770      	bx	lr

0800602c <_init>:
 800602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602e:	bf00      	nop
 8006030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006032:	bc08      	pop	{r3}
 8006034:	469e      	mov	lr, r3
 8006036:	4770      	bx	lr

08006038 <_fini>:
 8006038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603a:	bf00      	nop
 800603c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800603e:	bc08      	pop	{r3}
 8006040:	469e      	mov	lr, r3
 8006042:	4770      	bx	lr
