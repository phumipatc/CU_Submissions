
final411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dc0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d98  08004f58  08004f58  00014f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cf0  08005cf0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005cf0  08005cf0  00015cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cf8  08005cf8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cf8  08005cf8  00015cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cfc  08005cfc  00015cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  20000014  08005d14  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000061c  08005d14  0002061c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001147c  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002473  00000000  00000000  000314c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00033938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00034a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d15  00000000  00000000  00035a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d8a  00000000  00000000  0004c735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090474  00000000  00000000  0005f4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef933  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048d0  00000000  00000000  000ef984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004f40 	.word	0x08004f40

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08004f40 	.word	0x08004f40

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 8000d1c:	4806      	ldr	r0, [pc, #24]	; (8000d38 <DS18B20_StartAll+0x20>)
 8000d1e:	f000 faa6 	bl	800126e <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 8000d22:	21cc      	movs	r1, #204	; 0xcc
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <DS18B20_StartAll+0x20>)
 8000d26:	f000 fb1f 	bl	8001368 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 8000d2a:	2144      	movs	r1, #68	; 0x44
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <DS18B20_StartAll+0x20>)
 8000d2e:	f000 fb1b 	bl	8001368 <OneWire_WriteByte>
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000070 	.word	0x20000070

08000d3c <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b087      	sub	sp, #28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount) // If read sensor is not availible
 8000d48:	4b4d      	ldr	r3, [pc, #308]	; (8000e80 <DS18B20_Read+0x144>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	79fa      	ldrb	r2, [r7, #7]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d301      	bcc.n	8000d56 <DS18B20_Read+0x1a>
		return 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e090      	b.n	8000e78 <DS18B20_Read+0x13c>

	uint16_t temperature;
	uint8_t resolution;
	float result;
	uint8_t i = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	74fb      	strb	r3, [r7, #19]
	uint8_t crc;

#endif


	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	011b      	lsls	r3, r3, #4
 8000d5e:	4a49      	ldr	r2, [pc, #292]	; (8000e84 <DS18B20_Read+0x148>)
 8000d60:	4413      	add	r3, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f93c 	bl	8000fe0 <DS18B20_Is>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <DS18B20_Read+0x36>
		return 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e082      	b.n	8000e78 <DS18B20_Read+0x13c>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 8000d72:	4845      	ldr	r0, [pc, #276]	; (8000e88 <DS18B20_Read+0x14c>)
 8000d74:	f000 face 	bl	8001314 <OneWire_ReadBit>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d101      	bne.n	8000d82 <DS18B20_Read+0x46>
		return 0; // Busy bus - conversion is not finished
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e07a      	b.n	8000e78 <DS18B20_Read+0x13c>

	OneWire_Reset(&OneWire); // Reset the bus
 8000d82:	4841      	ldr	r0, [pc, #260]	; (8000e88 <DS18B20_Read+0x14c>)
 8000d84:	f000 fa73 	bl	800126e <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	4a3d      	ldr	r2, [pc, #244]	; (8000e84 <DS18B20_Read+0x148>)
 8000d8e:	4413      	add	r3, r2
 8000d90:	4619      	mov	r1, r3
 8000d92:	483d      	ldr	r0, [pc, #244]	; (8000e88 <DS18B20_Read+0x14c>)
 8000d94:	f000 fc1d 	bl	80015d2 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8000d98:	21be      	movs	r1, #190	; 0xbe
 8000d9a:	483b      	ldr	r0, [pc, #236]	; (8000e88 <DS18B20_Read+0x14c>)
 8000d9c:	f000 fae4 	bl	8001368 <OneWire_WriteByte>

	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8000da0:	2300      	movs	r3, #0
 8000da2:	74fb      	strb	r3, [r7, #19]
 8000da4:	e00d      	b.n	8000dc2 <DS18B20_Read+0x86>
		data[i] = OneWire_ReadByte(&OneWire);
 8000da6:	7cfc      	ldrb	r4, [r7, #19]
 8000da8:	4837      	ldr	r0, [pc, #220]	; (8000e88 <DS18B20_Read+0x14c>)
 8000daa:	f000 fafb 	bl	80013a4 <OneWire_ReadByte>
 8000dae:	4603      	mov	r3, r0
 8000db0:	461a      	mov	r2, r3
 8000db2:	f104 0318 	add.w	r3, r4, #24
 8000db6:	443b      	add	r3, r7
 8000db8:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8000dbc:	7cfb      	ldrb	r3, [r7, #19]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	74fb      	strb	r3, [r7, #19]
 8000dc2:	7cfb      	ldrb	r3, [r7, #19]
 8000dc4:	2b04      	cmp	r3, #4
 8000dc6:	d9ee      	bls.n	8000da6 <DS18B20_Read+0x6a>
	crc = OneWire_CRC8(data, 8); // CRC calculation

	if (crc != data[8])
		return 0; // CRC invalid
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 8000dc8:	7a3b      	ldrb	r3, [r7, #8]
 8000dca:	b21a      	sxth	r2, r3
 8000dcc:	7a7b      	ldrb	r3, [r7, #9]
 8000dce:	021b      	lsls	r3, r3, #8
 8000dd0:	b21b      	sxth	r3, r3
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	b21b      	sxth	r3, r3
 8000dd6:	823b      	strh	r3, [r7, #16]

	OneWire_Reset(&OneWire); // Reset the bus
 8000dd8:	482b      	ldr	r0, [pc, #172]	; (8000e88 <DS18B20_Read+0x14c>)
 8000dda:	f000 fa48 	bl	800126e <OneWire_Reset>

	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 8000dde:	7b3b      	ldrb	r3, [r7, #12]
 8000de0:	115b      	asrs	r3, r3, #5
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	3309      	adds	r3, #9
 8000dec:	73fb      	strb	r3, [r7, #15]

	switch (resolution) // Chceck the correct value dur to resolution
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	3b09      	subs	r3, #9
 8000df2:	2b03      	cmp	r3, #3
 8000df4:	d83a      	bhi.n	8000e6c <DS18B20_Read+0x130>
 8000df6:	a201      	add	r2, pc, #4	; (adr r2, 8000dfc <DS18B20_Read+0xc0>)
 8000df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfc:	08000e0d 	.word	0x08000e0d
 8000e00:	08000e25 	.word	0x08000e25
 8000e04:	08000e3d 	.word	0x08000e3d
 8000e08:	08000e55 	.word	0x08000e55
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 8000e0c:	8a3b      	ldrh	r3, [r7, #16]
 8000e0e:	ee07 3a90 	vmov	s15, r3
 8000e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e16:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000e1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e1e:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8000e22:	e025      	b.n	8000e70 <DS18B20_Read+0x134>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 8000e24:	8a3b      	ldrh	r3, [r7, #16]
 8000e26:	ee07 3a90 	vmov	s15, r3
 8000e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e2e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000e32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e36:	edc7 7a05 	vstr	s15, [r7, #20]
		 break;
 8000e3a:	e019      	b.n	8000e70 <DS18B20_Read+0x134>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 8000e3c:	8a3b      	ldrh	r3, [r7, #16]
 8000e3e:	ee07 3a90 	vmov	s15, r3
 8000e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e46:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8000e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e4e:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8000e52:	e00d      	b.n	8000e70 <DS18B20_Read+0x134>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 8000e54:	8a3b      	ldrh	r3, [r7, #16]
 8000e56:	ee07 3a90 	vmov	s15, r3
 8000e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e5e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000e8c <DS18B20_Read+0x150>
 8000e62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e66:	edc7 7a05 	vstr	s15, [r7, #20]
		 break;
 8000e6a:	e001      	b.n	8000e70 <DS18B20_Read+0x134>
		default:
			result = 0xFF;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <DS18B20_Read+0x154>)
 8000e6e:	617b      	str	r3, [r7, #20]
	}

	*destination = result;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	601a      	str	r2, [r3, #0]

	return 1; //temperature valid
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	371c      	adds	r7, #28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd90      	pop	{r4, r7, pc}
 8000e80:	20000084 	.word	0x20000084
 8000e84:	20000030 	.word	0x20000030
 8000e88:	20000070 	.word	0x20000070
 8000e8c:	3d800000 	.word	0x3d800000
 8000e90:	437f0000 	.word	0x437f0000

08000e94 <DS18B20_SetResolution>:

	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	460a      	mov	r2, r1
 8000e9e:	71fb      	strb	r3, [r7, #7]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 8000ea4:	4b4b      	ldr	r3, [pc, #300]	; (8000fd4 <DS18B20_SetResolution+0x140>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	79fa      	ldrb	r2, [r7, #7]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d301      	bcc.n	8000eb2 <DS18B20_SetResolution+0x1e>
		return 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e08c      	b.n	8000fcc <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	011b      	lsls	r3, r3, #4
 8000eb6:	4a48      	ldr	r2, [pc, #288]	; (8000fd8 <DS18B20_SetResolution+0x144>)
 8000eb8:	4413      	add	r3, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f890 	bl	8000fe0 <DS18B20_Is>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <DS18B20_SetResolution+0x36>
		return 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e080      	b.n	8000fcc <DS18B20_SetResolution+0x138>

	OneWire_Reset(&OneWire); // Reset the bus
 8000eca:	4844      	ldr	r0, [pc, #272]	; (8000fdc <DS18B20_SetResolution+0x148>)
 8000ecc:	f000 f9cf 	bl	800126e <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	011b      	lsls	r3, r3, #4
 8000ed4:	4a40      	ldr	r2, [pc, #256]	; (8000fd8 <DS18B20_SetResolution+0x144>)
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4840      	ldr	r0, [pc, #256]	; (8000fdc <DS18B20_SetResolution+0x148>)
 8000edc:	f000 fb79 	bl	80015d2 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8000ee0:	21be      	movs	r1, #190	; 0xbe
 8000ee2:	483e      	ldr	r0, [pc, #248]	; (8000fdc <DS18B20_SetResolution+0x148>)
 8000ee4:	f000 fa40 	bl	8001368 <OneWire_WriteByte>

	OneWire_ReadByte(&OneWire);
 8000ee8:	483c      	ldr	r0, [pc, #240]	; (8000fdc <DS18B20_SetResolution+0x148>)
 8000eea:	f000 fa5b 	bl	80013a4 <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 8000eee:	483b      	ldr	r0, [pc, #236]	; (8000fdc <DS18B20_SetResolution+0x148>)
 8000ef0:	f000 fa58 	bl	80013a4 <OneWire_ReadByte>

	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 8000ef4:	4839      	ldr	r0, [pc, #228]	; (8000fdc <DS18B20_SetResolution+0x148>)
 8000ef6:	f000 fa55 	bl	80013a4 <OneWire_ReadByte>
 8000efa:	4603      	mov	r3, r0
 8000efc:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 8000efe:	4837      	ldr	r0, [pc, #220]	; (8000fdc <DS18B20_SetResolution+0x148>)
 8000f00:	f000 fa50 	bl	80013a4 <OneWire_ReadByte>
 8000f04:	4603      	mov	r3, r0
 8000f06:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 8000f08:	4834      	ldr	r0, [pc, #208]	; (8000fdc <DS18B20_SetResolution+0x148>)
 8000f0a:	f000 fa4b 	bl	80013a4 <OneWire_ReadByte>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	73fb      	strb	r3, [r7, #15]

	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 8000f12:	79bb      	ldrb	r3, [r7, #6]
 8000f14:	2b09      	cmp	r3, #9
 8000f16:	d108      	bne.n	8000f2a <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f1e:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	f023 0320 	bic.w	r3, r3, #32
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	e022      	b.n	8000f70 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8000f2a:	79bb      	ldrb	r3, [r7, #6]
 8000f2c:	2b0a      	cmp	r3, #10
 8000f2e:	d108      	bne.n	8000f42 <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f36:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	f043 0320 	orr.w	r3, r3, #32
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	e016      	b.n	8000f70 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	2b0b      	cmp	r3, #11
 8000f46:	d108      	bne.n	8000f5a <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f4e:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	f023 0320 	bic.w	r3, r3, #32
 8000f56:	73fb      	strb	r3, [r7, #15]
 8000f58:	e00a      	b.n	8000f70 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8000f5a:	79bb      	ldrb	r3, [r7, #6]
 8000f5c:	2b0c      	cmp	r3, #12
 8000f5e:	d107      	bne.n	8000f70 <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f66:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	f043 0320 	orr.w	r3, r3, #32
 8000f6e:	73fb      	strb	r3, [r7, #15]
	}

	OneWire_Reset(&OneWire); // Reset the bus
 8000f70:	481a      	ldr	r0, [pc, #104]	; (8000fdc <DS18B20_SetResolution+0x148>)
 8000f72:	f000 f97c 	bl	800126e <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	011b      	lsls	r3, r3, #4
 8000f7a:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <DS18B20_SetResolution+0x144>)
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4816      	ldr	r0, [pc, #88]	; (8000fdc <DS18B20_SetResolution+0x148>)
 8000f82:	f000 fb26 	bl	80015d2 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 8000f86:	214e      	movs	r1, #78	; 0x4e
 8000f88:	4814      	ldr	r0, [pc, #80]	; (8000fdc <DS18B20_SetResolution+0x148>)
 8000f8a:	f000 f9ed 	bl	8001368 <OneWire_WriteByte>

	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 8000f8e:	7bbb      	ldrb	r3, [r7, #14]
 8000f90:	4619      	mov	r1, r3
 8000f92:	4812      	ldr	r0, [pc, #72]	; (8000fdc <DS18B20_SetResolution+0x148>)
 8000f94:	f000 f9e8 	bl	8001368 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 8000f98:	7b7b      	ldrb	r3, [r7, #13]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480f      	ldr	r0, [pc, #60]	; (8000fdc <DS18B20_SetResolution+0x148>)
 8000f9e:	f000 f9e3 	bl	8001368 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480d      	ldr	r0, [pc, #52]	; (8000fdc <DS18B20_SetResolution+0x148>)
 8000fa8:	f000 f9de 	bl	8001368 <OneWire_WriteByte>

	OneWire_Reset(&OneWire); // Reset the bus
 8000fac:	480b      	ldr	r0, [pc, #44]	; (8000fdc <DS18B20_SetResolution+0x148>)
 8000fae:	f000 f95e 	bl	800126e <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	011b      	lsls	r3, r3, #4
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <DS18B20_SetResolution+0x144>)
 8000fb8:	4413      	add	r3, r2
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4807      	ldr	r0, [pc, #28]	; (8000fdc <DS18B20_SetResolution+0x148>)
 8000fbe:	f000 fb08 	bl	80015d2 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 8000fc2:	2148      	movs	r1, #72	; 0x48
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <DS18B20_SetResolution+0x148>)
 8000fc6:	f000 f9cf 	bl	8001368 <OneWire_WriteByte>

	return 1;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000084 	.word	0x20000084
 8000fd8:	20000030 	.word	0x20000030
 8000fdc:	20000070 	.word	0x20000070

08000fe0 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b28      	cmp	r3, #40	; 0x28
 8000fee:	d101      	bne.n	8000ff4 <DS18B20_Is+0x14>
		return 1;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e000      	b.n	8000ff6 <DS18B20_Is+0x16>
	return 0;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <DS18B20_AllDone+0x10>)
 800100a:	f000 f983 	bl	8001314 <OneWire_ReadBit>
 800100e:	4603      	mov	r3, r0
}
 8001010:	4618      	mov	r0, r3
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000070 	.word	0x20000070

08001018 <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 800101e:	f7ff fff1 	bl	8001004 <DS18B20_AllDone>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d02e      	beq.n	8001086 <DS18B20_ReadAll+0x6e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8001028:	2300      	movs	r3, #0
 800102a:	71fb      	strb	r3, [r7, #7]
 800102c:	e026      	b.n	800107c <DS18B20_ReadAll+0x64>
		{
			ds18b20[i].ValidDataFlag = 0;
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	4a17      	ldr	r2, [pc, #92]	; (8001090 <DS18B20_ReadAll+0x78>)
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	4413      	add	r3, r2
 8001036:	330c      	adds	r3, #12
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	4a13      	ldr	r2, [pc, #76]	; (8001090 <DS18B20_ReadAll+0x78>)
 8001042:	4413      	add	r3, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ffcb 	bl	8000fe0 <DS18B20_Is>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d012      	beq.n	8001076 <DS18B20_ReadAll+0x5e>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	3308      	adds	r3, #8
 8001056:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <DS18B20_ReadAll+0x78>)
 8001058:	441a      	add	r2, r3
 800105a:	79fc      	ldrb	r4, [r7, #7]
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fe6b 	bl	8000d3c <DS18B20_Read>
 8001066:	4603      	mov	r3, r0
 8001068:	4619      	mov	r1, r3
 800106a:	4a09      	ldr	r2, [pc, #36]	; (8001090 <DS18B20_ReadAll+0x78>)
 800106c:	0123      	lsls	r3, r4, #4
 800106e:	4413      	add	r3, r2
 8001070:	330c      	adds	r3, #12
 8001072:	460a      	mov	r2, r1
 8001074:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	3301      	adds	r3, #1
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <DS18B20_ReadAll+0x7c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	79fa      	ldrb	r2, [r7, #7]
 8001082:	429a      	cmp	r2, r3
 8001084:	d3d3      	bcc.n	800102e <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bd90      	pop	{r4, r7, pc}
 800108e:	bf00      	nop
 8001090:	20000030 	.word	0x20000030
 8001094:	20000084 	.word	0x20000084

08001098 <DS18B20_Quantity>:
	for(i = 0; i < 8; i++)
		ds18b20[number].Address[i] = ROM[i]; // Write ROM into sensor's structure
}

uint8_t DS18B20_Quantity(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
	return TempSensorCount;
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <DS18B20_Quantity+0x14>)
 800109e:	781b      	ldrb	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000084 	.word	0x20000084

080010b0 <DS18B20_GetTemperature>:

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	71fb      	strb	r3, [r7, #7]
	if(!ds18b20[number].ValidDataFlag)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	4a0c      	ldr	r2, [pc, #48]	; (80010f0 <DS18B20_GetTemperature+0x40>)
 80010c0:	011b      	lsls	r3, r3, #4
 80010c2:	4413      	add	r3, r2
 80010c4:	330c      	adds	r3, #12
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <DS18B20_GetTemperature+0x20>
		return 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e008      	b.n	80010e2 <DS18B20_GetTemperature+0x32>

	*destination = ds18b20[number].Temperature;
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <DS18B20_GetTemperature+0x40>)
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	4413      	add	r3, r2
 80010d8:	3308      	adds	r3, #8
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	601a      	str	r2, [r3, #0]
	return 1;
 80010e0:	2301      	movs	r3, #1

}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000030 	.word	0x20000030

080010f4 <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 80010fe:	2300      	movs	r3, #0
 8001100:	73fb      	strb	r3, [r7, #15]
 8001102:	2300      	movs	r3, #0
 8001104:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, GPIOC, GPIO_PIN_11); // Init OneWire bus
 8001106:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800110a:	491f      	ldr	r1, [pc, #124]	; (8001188 <DS18B20_Init+0x94>)
 800110c:	481f      	ldr	r0, [pc, #124]	; (800118c <DS18B20_Init+0x98>)
 800110e:	f000 fa9d 	bl	800164c <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 8001112:	481e      	ldr	r0, [pc, #120]	; (800118c <DS18B20_Init+0x98>)
 8001114:	f000 fa40 	bl	8001598 <OneWire_First>
 8001118:	4603      	mov	r3, r0
 800111a:	73fb      	strb	r3, [r7, #15]
	while(next)
 800111c:	e018      	b.n	8001150 <DS18B20_Init+0x5c>
	{
		TempSensorCount++;
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <DS18B20_Init+0x9c>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	3301      	adds	r3, #1
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <DS18B20_Init+0x9c>)
 8001128:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 800112a:	7bbb      	ldrb	r3, [r7, #14]
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	73ba      	strb	r2, [r7, #14]
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	4a18      	ldr	r2, [pc, #96]	; (8001194 <DS18B20_Init+0xa0>)
 8001134:	4413      	add	r3, r2
 8001136:	4619      	mov	r1, r3
 8001138:	4814      	ldr	r0, [pc, #80]	; (800118c <DS18B20_Init+0x98>)
 800113a:	f000 fa69 	bl	8001610 <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 800113e:	4813      	ldr	r0, [pc, #76]	; (800118c <DS18B20_Init+0x98>)
 8001140:	f000 fa3a 	bl	80015b8 <OneWire_Next>
 8001144:	4603      	mov	r3, r0
 8001146:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <DS18B20_Init+0x9c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b03      	cmp	r3, #3
 800114e:	d803      	bhi.n	8001158 <DS18B20_Init+0x64>
	while(next)
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1e3      	bne.n	800111e <DS18B20_Init+0x2a>
 8001156:	e000      	b.n	800115a <DS18B20_Init+0x66>
			break;
 8001158:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 800115a:	2300      	movs	r3, #0
 800115c:	737b      	strb	r3, [r7, #13]
 800115e:	e00a      	b.n	8001176 <DS18B20_Init+0x82>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 8001160:	79fa      	ldrb	r2, [r7, #7]
 8001162:	7b7b      	ldrb	r3, [r7, #13]
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fe94 	bl	8000e94 <DS18B20_SetResolution>

		DS18B20_StartAll(); // Start conversion on all sensors
 800116c:	f7ff fdd4 	bl	8000d18 <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 8001170:	7b7b      	ldrb	r3, [r7, #13]
 8001172:	3301      	adds	r3, #1
 8001174:	737b      	strb	r3, [r7, #13]
 8001176:	7b7a      	ldrb	r2, [r7, #13]
 8001178:	7bbb      	ldrb	r3, [r7, #14]
 800117a:	429a      	cmp	r2, r3
 800117c:	d3f0      	bcc.n	8001160 <DS18B20_Init+0x6c>
	}
}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40020800 	.word	0x40020800
 800118c:	20000070 	.word	0x20000070
 8001190:	20000084 	.word	0x20000084
 8001194:	20000030 	.word	0x20000030

08001198 <OneWire_Delay>:

//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <OneWire_Delay+0x30>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2200      	movs	r2, #0
 80011a8:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 80011aa:	bf00      	nop
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <OneWire_Delay+0x30>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d9f9      	bls.n	80011ac <OneWire_Delay+0x14>
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	200004e8 	.word	0x200004e8

080011cc <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 80011dc:	2301      	movs	r3, #1
 80011de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	889b      	ldrh	r3, [r3, #4]
 80011e4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f107 020c 	add.w	r2, r7, #12
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 fd13 	bl	8002c1c <HAL_GPIO_Init>
}
 80011f6:	bf00      	nop
 80011f8:	3720      	adds	r7, #32
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b088      	sub	sp, #32
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 8001206:	2311      	movs	r3, #17
 8001208:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 800120e:	2301      	movs	r3, #1
 8001210:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	889b      	ldrh	r3, [r3, #4]
 8001216:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f107 020c 	add.w	r2, r7, #12
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f001 fcfa 	bl	8002c1c <HAL_GPIO_Init>
}
 8001228:	bf00      	nop
 800122a:	3720      	adds	r7, #32
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	889b      	ldrh	r3, [r3, #4]
 800123c:	041a      	lsls	r2, r3, #16
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	619a      	str	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	889a      	ldrh	r2, [r3, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	619a      	str	r2, [r3, #24]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b084      	sub	sp, #16
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
	uint8_t i;

	OneWire_OutputLow(onewire);  // Write bus output low
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ffda 	bl	8001230 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ffbe 	bl	80011fe <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 8001282:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001286:	f7ff ff87 	bl	8001198 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ff9e 	bl	80011cc <OneWire_BusInputDirection>
	OneWire_Delay(70);
 8001290:	2046      	movs	r0, #70	; 0x46
 8001292:	f7ff ff81 	bl	8001198 <OneWire_Delay>

	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	889b      	ldrh	r3, [r3, #4]
 800129e:	4619      	mov	r1, r3
 80012a0:	4610      	mov	r0, r2
 80012a2:	f001 fe3f 	bl	8002f24 <HAL_GPIO_ReadPin>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 80012aa:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80012ae:	f7ff ff73 	bl	8001198 <OneWire_Delay>

	return i;
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00f      	beq.n	80012ee <OneWire_WriteBit+0x32>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffae 	bl	8001230 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff92 	bl	80011fe <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 80012da:	2006      	movs	r0, #6
 80012dc:	f7ff ff5c 	bl	8001198 <OneWire_Delay>

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff73 	bl	80011cc <OneWire_BusInputDirection>
		OneWire_Delay(64);
 80012e6:	2040      	movs	r0, #64	; 0x40
 80012e8:	f7ff ff56 	bl	8001198 <OneWire_Delay>
		OneWire_Delay(60);

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		OneWire_Delay(10);
	}
}
 80012ec:	e00e      	b.n	800130c <OneWire_WriteBit+0x50>
		OneWire_OutputLow(onewire); // Set the bus low
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ff9e 	bl	8001230 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff82 	bl	80011fe <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 80012fa:	203c      	movs	r0, #60	; 0x3c
 80012fc:	f7ff ff4c 	bl	8001198 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ff63 	bl	80011cc <OneWire_BusInputDirection>
		OneWire_Delay(10);
 8001306:	200a      	movs	r0, #10
 8001308:	f7ff ff46 	bl	8001198 <OneWire_Delay>
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]

	OneWire_OutputLow(onewire); // Set low to initiate reading
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff85 	bl	8001230 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ff69 	bl	80011fe <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 800132c:	2002      	movs	r0, #2
 800132e:	f7ff ff33 	bl	8001198 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ff4a 	bl	80011cc <OneWire_BusInputDirection>
	OneWire_Delay(10);
 8001338:	200a      	movs	r0, #10
 800133a:	f7ff ff2d 	bl	8001198 <OneWire_Delay>

	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	889b      	ldrh	r3, [r3, #4]
 8001346:	4619      	mov	r1, r3
 8001348:	4610      	mov	r0, r2
 800134a:	f001 fdeb 	bl	8002f24 <HAL_GPIO_ReadPin>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <OneWire_ReadBit+0x44>
		bit = 1;
 8001354:	2301      	movs	r3, #1
 8001356:	73fb      	strb	r3, [r7, #15]

	OneWire_Delay(50); // Wait for end of read cycle
 8001358:	2032      	movs	r0, #50	; 0x32
 800135a:	f7ff ff1d 	bl	8001198 <OneWire_Delay>

	return bit;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8001374:	2308      	movs	r3, #8
 8001376:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 8001378:	78fb      	ldrb	r3, [r7, #3]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	4619      	mov	r1, r3
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ff9a 	bl	80012bc <OneWire_WriteBit>
		byte >>= 1;
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	085b      	lsrs	r3, r3, #1
 800138c:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	3b01      	subs	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1ee      	bne.n	8001378 <OneWire_WriteByte+0x10>
}
 800139a:	bf00      	nop
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 80013ac:	2308      	movs	r3, #8
 80013ae:	73fb      	strb	r3, [r7, #15]
 80013b0:	2300      	movs	r3, #0
 80013b2:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 80013b4:	7bbb      	ldrb	r3, [r7, #14]
 80013b6:	085b      	lsrs	r3, r3, #1
 80013b8:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffaa 	bl	8001314 <OneWire_ReadBit>
 80013c0:	4603      	mov	r3, r0
 80013c2:	01db      	lsls	r3, r3, #7
 80013c4:	b25a      	sxtb	r2, r3
 80013c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b25b      	sxtb	r3, r3
 80013ce:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1eb      	bne.n	80013b4 <OneWire_ReadByte+0x10>

	return byte;
 80013dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	71da      	strb	r2, [r3, #7]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 8001418:	2301      	movs	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8001424:	2301      	movs	r3, #1
 8001426:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	7a1b      	ldrb	r3, [r3, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	f040 809a 	bne.w	800156a <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ff19 	bl	800126e <OneWire_Reset>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00a      	beq.n	8001458 <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	71da      	strb	r2, [r3, #7]
			return 0;
 8001454:	2300      	movs	r3, #0
 8001456:	e09b      	b.n	8001590 <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	4619      	mov	r1, r3
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff83 	bl	8001368 <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ff56 	bl	8001314 <OneWire_ReadBit>
 8001468:	4603      	mov	r3, r0
 800146a:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff51 	bl	8001314 <OneWire_ReadBit>
 8001472:	4603      	mov	r3, r0
 8001474:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 8001476:	7a7b      	ldrb	r3, [r7, #9]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d102      	bne.n	8001482 <OneWire_Search+0x76>
 800147c:	7a3b      	ldrb	r3, [r7, #8]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d064      	beq.n	800154c <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 8001482:	7a7a      	ldrb	r2, [r7, #9]
 8001484:	7a3b      	ldrb	r3, [r7, #8]
 8001486:	429a      	cmp	r2, r3
 8001488:	d002      	beq.n	8001490 <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 800148a:	7a7b      	ldrb	r3, [r7, #9]
 800148c:	72bb      	strb	r3, [r7, #10]
 800148e:	e026      	b.n	80014de <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	799b      	ldrb	r3, [r3, #6]
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	429a      	cmp	r2, r3
 8001498:	d20d      	bcs.n	80014b6 <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 800149a:	7b7b      	ldrb	r3, [r7, #13]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	7a5a      	ldrb	r2, [r3, #9]
 80014a2:	7afb      	ldrb	r3, [r7, #11]
 80014a4:	4013      	ands	r3, r2
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	bf14      	ite	ne
 80014ac:	2301      	movne	r3, #1
 80014ae:	2300      	moveq	r3, #0
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	72bb      	strb	r3, [r7, #10]
 80014b4:	e008      	b.n	80014c8 <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	799b      	ldrb	r3, [r3, #6]
 80014ba:	7bfa      	ldrb	r2, [r7, #15]
 80014bc:	429a      	cmp	r2, r3
 80014be:	bf0c      	ite	eq
 80014c0:	2301      	moveq	r3, #1
 80014c2:	2300      	movne	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 80014c8:	7abb      	ldrb	r3, [r7, #10]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d107      	bne.n	80014de <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 80014d2:	7bbb      	ldrb	r3, [r7, #14]
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d802      	bhi.n	80014de <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7bba      	ldrb	r2, [r7, #14]
 80014dc:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 80014de:	7abb      	ldrb	r3, [r7, #10]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d10c      	bne.n	80014fe <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 80014e4:	7b7b      	ldrb	r3, [r7, #13]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	7a59      	ldrb	r1, [r3, #9]
 80014ec:	7b7b      	ldrb	r3, [r7, #13]
 80014ee:	7afa      	ldrb	r2, [r7, #11]
 80014f0:	430a      	orrs	r2, r1
 80014f2:	b2d1      	uxtb	r1, r2
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	4413      	add	r3, r2
 80014f8:	460a      	mov	r2, r1
 80014fa:	725a      	strb	r2, [r3, #9]
 80014fc:	e010      	b.n	8001520 <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 80014fe:	7b7b      	ldrb	r3, [r7, #13]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	4413      	add	r3, r2
 8001504:	7a5b      	ldrb	r3, [r3, #9]
 8001506:	b25a      	sxtb	r2, r3
 8001508:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800150c:	43db      	mvns	r3, r3
 800150e:	b25b      	sxtb	r3, r3
 8001510:	4013      	ands	r3, r2
 8001512:	b25a      	sxtb	r2, r3
 8001514:	7b7b      	ldrb	r3, [r7, #13]
 8001516:	b2d1      	uxtb	r1, r2
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	4413      	add	r3, r2
 800151c:	460a      	mov	r2, r1
 800151e:	725a      	strb	r2, [r3, #9]
				}

				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 8001520:	7abb      	ldrb	r3, [r7, #10]
 8001522:	4619      	mov	r1, r3
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff fec9 	bl	80012bc <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	3301      	adds	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 8001530:	7afb      	ldrb	r3, [r7, #11]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 8001536:	7afb      	ldrb	r3, [r7, #11]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d104      	bne.n	8001546 <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 800153c:	7b7b      	ldrb	r3, [r7, #13]
 800153e:	3301      	adds	r3, #1
 8001540:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 8001542:	2301      	movs	r3, #1
 8001544:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 8001546:	7b7b      	ldrb	r3, [r7, #13]
 8001548:	2b07      	cmp	r3, #7
 800154a:	d98a      	bls.n	8001462 <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	2b40      	cmp	r3, #64	; 0x40
 8001550:	d90b      	bls.n	800156a <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7bba      	ldrb	r2, [r7, #14]
 8001556:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	799b      	ldrb	r3, [r3, #6]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d102      	bne.n	8001566 <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 8001566:	2301      	movs	r3, #1
 8001568:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 800156a:	7b3b      	ldrb	r3, [r7, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <OneWire_Search+0x16c>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	7a5b      	ldrb	r3, [r3, #9]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10a      	bne.n	800158e <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 800158e:	7b3b      	ldrb	r3, [r7, #12]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff20 	bl	80013e6 <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 80015a6:	21f0      	movs	r1, #240	; 0xf0
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ff2f 	bl	800140c <OneWire_Search>
 80015ae:	4603      	mov	r3, r0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 80015c0:	21f0      	movs	r1, #240	; 0xf0
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ff22 	bl	800140c <OneWire_Search>
 80015c8:	4603      	mov	r3, r0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b084      	sub	sp, #16
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 80015dc:	2155      	movs	r1, #85	; 0x55
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fec2 	bl	8001368 <OneWire_WriteByte>

	for (i = 0; i < 8; i++)
 80015e4:	2300      	movs	r3, #0
 80015e6:	73fb      	strb	r3, [r7, #15]
 80015e8:	e00a      	b.n	8001600 <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	4619      	mov	r1, r3
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff feb7 	bl	8001368 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	3301      	adds	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	2b07      	cmp	r3, #7
 8001604:	d9f1      	bls.n	80015ea <OneWire_SelectWithPointer+0x18>
	}
}
 8001606:	bf00      	nop
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 800161a:	2300      	movs	r3, #0
 800161c:	73fb      	strb	r3, [r7, #15]
 800161e:	e00a      	b.n	8001636 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	6839      	ldr	r1, [r7, #0]
 8001626:	440b      	add	r3, r1
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	440a      	add	r2, r1
 800162c:	7a52      	ldrb	r2, [r2, #9]
 800162e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	3301      	adds	r3, #1
 8001634:	73fb      	strb	r3, [r7, #15]
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	2b07      	cmp	r3, #7
 800163a:	d9f1      	bls.n	8001620 <OneWire_GetFullROM+0x10>
	}
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	4613      	mov	r3, r2
 8001658:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 800165a:	4811      	ldr	r0, [pc, #68]	; (80016a0 <OneWire_Init+0x54>)
 800165c:	f002 fdd8 	bl	8004210 <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	88fa      	ldrh	r2, [r7, #6]
 800166a:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f7ff fdc6 	bl	80011fe <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f7ff fdec 	bl	8001250 <OneWire_OutputHigh>
	HAL_Delay(100);
 8001678:	2064      	movs	r0, #100	; 0x64
 800167a:	f001 f9c5 	bl	8002a08 <HAL_Delay>
	OneWire_OutputLow(onewire);
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f7ff fdd6 	bl	8001230 <OneWire_OutputLow>
	HAL_Delay(100);
 8001684:	2064      	movs	r0, #100	; 0x64
 8001686:	f001 f9bf 	bl	8002a08 <HAL_Delay>
	OneWire_OutputHigh(onewire);
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f7ff fde0 	bl	8001250 <OneWire_OutputHigh>
	HAL_Delay(200);
 8001690:	20c8      	movs	r0, #200	; 0xc8
 8001692:	f001 f9b9 	bl	8002a08 <HAL_Delay>
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200004e8 	.word	0x200004e8

080016a4 <ssd1306_write_command>:
SSD1306_FONT current_font;


/* I2C Write Function */
void ssd1306_write_command(uint8_t command)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af04      	add	r7, sp, #16
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(SSD1306_I2C, SSD1306_I2C_SA_WRITE, SSD1306_CONTROL_BYTE_COMMAND, 1, &command, 1, 1000);
 80016ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b2:	9302      	str	r3, [sp, #8]
 80016b4:	2301      	movs	r3, #1
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	1dfb      	adds	r3, r7, #7
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2301      	movs	r3, #1
 80016be:	2200      	movs	r2, #0
 80016c0:	2178      	movs	r1, #120	; 0x78
 80016c2:	4803      	ldr	r0, [pc, #12]	; (80016d0 <ssd1306_write_command+0x2c>)
 80016c4:	f001 fda4 	bl	8003210 <HAL_I2C_Mem_Write>
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000494 	.word	0x20000494

080016d4 <ssd1306_write_data>:

void ssd1306_write_data(uint8_t* buffer, uint16_t size)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af04      	add	r7, sp, #16
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Mem_Write(SSD1306_I2C, SSD1306_I2C_SA_WRITE, SSD1306_CONTROL_BYTE_DATA, 1, buffer, size, 1000);
 80016e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e4:	9302      	str	r3, [sp, #8]
 80016e6:	887b      	ldrh	r3, [r7, #2]
 80016e8:	9301      	str	r3, [sp, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	2301      	movs	r3, #1
 80016f0:	2240      	movs	r2, #64	; 0x40
 80016f2:	2178      	movs	r1, #120	; 0x78
 80016f4:	4803      	ldr	r0, [pc, #12]	; (8001704 <ssd1306_write_data+0x30>)
 80016f6:	f001 fd8b 	bl	8003210 <HAL_I2C_Mem_Write>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000494 	.word	0x20000494

08001708 <charge_bump_setting>:


/* Charge Bump Setting */
void charge_bump_setting(uint8_t charge_bump)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(CHARGE_BUMP_SETTING);
 8001712:	208d      	movs	r0, #141	; 0x8d
 8001714:	f7ff ffc6 	bl	80016a4 <ssd1306_write_command>
    ssd1306_write_command(charge_bump);
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ffc2 	bl	80016a4 <ssd1306_write_command>
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <set_contrast_control>:

/* Fundamental */
void set_contrast_control(uint8_t value)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(SET_CONTRAST_CONTROL);
 8001732:	2081      	movs	r0, #129	; 0x81
 8001734:	f7ff ffb6 	bl	80016a4 <ssd1306_write_command>
    ssd1306_write_command(value);
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ffb2 	bl	80016a4 <ssd1306_write_command>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <entire_display_off>:

void entire_display_off()
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
    ssd1306_write_command(ENTIRE_DISPLAY_OFF);
 800174c:	20a4      	movs	r0, #164	; 0xa4
 800174e:	f7ff ffa9 	bl	80016a4 <ssd1306_write_command>
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}

08001756 <set_normal_display>:
{
    ssd1306_write_command(ENTIRE_DISPLAY_ON);
}

void set_normal_display()
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
    ssd1306_write_command(SET_NORMAL_DISPLAY);
 800175a:	20a6      	movs	r0, #166	; 0xa6
 800175c:	f7ff ffa2 	bl	80016a4 <ssd1306_write_command>
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <set_display_on>:
{
    ssd1306_write_command(SET_INVERSE_DISPLAY);
}

void set_display_on()
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
    ssd1306_write_command(SET_DISPLAY_ON);
 8001768:	20af      	movs	r0, #175	; 0xaf
 800176a:	f7ff ff9b 	bl	80016a4 <ssd1306_write_command>
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}

08001772 <set_lower_column_start_address_for_page_addressing_mode>:
// 안써용~


/* Addressing Setting */
void set_lower_column_start_address_for_page_addressing_mode(uint8_t addr)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(addr);
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff90 	bl	80016a4 <ssd1306_write_command>
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <set_higher_column_start_address_for_page_addressing_mode>:

void set_higher_column_start_address_for_page_addressing_mode(uint8_t addr)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(addr);
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff83 	bl	80016a4 <ssd1306_write_command>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <set_page_start_address_for_page_addressing_mode>:
    ssd1306_write_command(start);
    ssd1306_write_command(end);
}

void set_page_start_address_for_page_addressing_mode(uint8_t page)  // 0xB0(page0) ~ 0xB7(page7)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(page);
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff76 	bl	80016a4 <ssd1306_write_command>
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <set_display_start_line>:


/* Hardware Configuration */
void set_display_start_line(uint8_t start_line)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(start_line);
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff69 	bl	80016a4 <ssd1306_write_command>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <set_segment_remap>:

void set_segment_remap(uint8_t mapping)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(mapping);
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff ff5c 	bl	80016a4 <ssd1306_write_command>
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <set_multiplex_ratio>:

void set_multiplex_ratio(uint8_t mux)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(SET_MULTIPLEX_RATIO);
 80017fe:	20a8      	movs	r0, #168	; 0xa8
 8001800:	f7ff ff50 	bl	80016a4 <ssd1306_write_command>
    ssd1306_write_command(mux);
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ff4c 	bl	80016a4 <ssd1306_write_command>
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <set_com_output_scan_direction>:

void set_com_output_scan_direction(uint8_t mode)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(mode);
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff3f 	bl	80016a4 <ssd1306_write_command>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <set_display_offset>:

void set_display_offset(uint8_t vertical_shift)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(SET_DISPLAY_OFFSET);
 8001838:	20d3      	movs	r0, #211	; 0xd3
 800183a:	f7ff ff33 	bl	80016a4 <ssd1306_write_command>
    ssd1306_write_command(vertical_shift);
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff2f 	bl	80016a4 <ssd1306_write_command>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <set_com_pins_hardware_config>:

void set_com_pins_hardware_config(uint8_t com_pin_config, uint8_t com_left_right_remap)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b084      	sub	sp, #16
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	460a      	mov	r2, r1
 8001858:	71fb      	strb	r3, [r7, #7]
 800185a:	4613      	mov	r3, r2
 800185c:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer = 0x02 | (com_pin_config << 4) | (com_left_right_remap << 5);
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	b25b      	sxtb	r3, r3
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	b25a      	sxtb	r2, r3
 800186a:	79bb      	ldrb	r3, [r7, #6]
 800186c:	015b      	lsls	r3, r3, #5
 800186e:	b25b      	sxtb	r3, r3
 8001870:	4313      	orrs	r3, r2
 8001872:	b25b      	sxtb	r3, r3
 8001874:	73fb      	strb	r3, [r7, #15]

    ssd1306_write_command(SET_COM_PINS_HARDWARE_CONFIG);
 8001876:	20da      	movs	r0, #218	; 0xda
 8001878:	f7ff ff14 	bl	80016a4 <ssd1306_write_command>
    ssd1306_write_command(buffer);
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff10 	bl	80016a4 <ssd1306_write_command>
}
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <set_display_clock_divide_ratio_and_osc_freq>:


/* Timing & Driving Scheme Setting */
void set_display_clock_divide_ratio_and_osc_freq(uint8_t divide_ratio, uint8_t osc_freq)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	460a      	mov	r2, r1
 8001896:	71fb      	strb	r3, [r7, #7]
 8001898:	4613      	mov	r3, r2
 800189a:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer = (osc_freq << 4) | divide_ratio;
 800189c:	79bb      	ldrb	r3, [r7, #6]
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	b25a      	sxtb	r2, r3
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	b25b      	sxtb	r3, r3
 80018aa:	73fb      	strb	r3, [r7, #15]

    ssd1306_write_command(SET_DISPLAY_CLOCK_DIVIDE_RATIO_AND_OSC_FREQ);
 80018ac:	20d5      	movs	r0, #213	; 0xd5
 80018ae:	f7ff fef9 	bl	80016a4 <ssd1306_write_command>
    ssd1306_write_command(buffer);
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fef5 	bl	80016a4 <ssd1306_write_command>
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <ssd1306_init>:
}


/* SSD1306 Function */
void ssd1306_init()
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	af00      	add	r7, sp, #0
    // SSD1306 App Note 5p
    set_multiplex_ratio(63);
 80018c6:	203f      	movs	r0, #63	; 0x3f
 80018c8:	f7ff ff94 	bl	80017f4 <set_multiplex_ratio>

    set_display_offset(0);
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff ffae 	bl	800182e <set_display_offset>

    set_display_start_line(0x40);
 80018d2:	2040      	movs	r0, #64	; 0x40
 80018d4:	f7ff ff74 	bl	80017c0 <set_display_start_line>

    set_segment_remap(0xA1);
 80018d8:	20a1      	movs	r0, #161	; 0xa1
 80018da:	f7ff ff7e 	bl	80017da <set_segment_remap>

    set_com_output_scan_direction(0xC8);
 80018de:	20c8      	movs	r0, #200	; 0xc8
 80018e0:	f7ff ff98 	bl	8001814 <set_com_output_scan_direction>

    set_com_pins_hardware_config(1, 0);
 80018e4:	2100      	movs	r1, #0
 80018e6:	2001      	movs	r0, #1
 80018e8:	f7ff ffb1 	bl	800184e <set_com_pins_hardware_config>

    set_contrast_control(0x7F);
 80018ec:	207f      	movs	r0, #127	; 0x7f
 80018ee:	f7ff ff1b 	bl	8001728 <set_contrast_control>

    entire_display_off();
 80018f2:	f7ff ff29 	bl	8001748 <entire_display_off>

    set_normal_display();
 80018f6:	f7ff ff2e 	bl	8001756 <set_normal_display>

    set_display_clock_divide_ratio_and_osc_freq(0, 8);
 80018fa:	2108      	movs	r1, #8
 80018fc:	2000      	movs	r0, #0
 80018fe:	f7ff ffc5 	bl	800188c <set_display_clock_divide_ratio_and_osc_freq>

    charge_bump_setting(0x14);
 8001902:	2014      	movs	r0, #20
 8001904:	f7ff ff00 	bl	8001708 <charge_bump_setting>

    set_display_on();
 8001908:	f7ff ff2c 	bl	8001764 <set_display_on>

    // Clear Ram Data
    ssd1306_black_screen();
 800190c:	f000 f82e 	bl	800196c <ssd1306_black_screen>

    // Set cursor 0, 0
    ssd1306_set_cursor(0, 0);
 8001910:	2100      	movs	r1, #0
 8001912:	2000      	movs	r0, #0
 8001914:	f000 f944 	bl	8001ba0 <ssd1306_set_cursor>
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <ssd1306_update_screen>:

void ssd1306_update_screen()
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
    for(int i = 0; i < SSD1306_PAGE; i ++)
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	e017      	b.n	8001958 <ssd1306_update_screen+0x3c>
    {
        set_page_start_address_for_page_addressing_mode(0xB0 + i);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	3b50      	subs	r3, #80	; 0x50
 800192e:	b2db      	uxtb	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff38 	bl	80017a6 <set_page_start_address_for_page_addressing_mode>
        set_lower_column_start_address_for_page_addressing_mode(0x00);
 8001936:	2000      	movs	r0, #0
 8001938:	f7ff ff1b 	bl	8001772 <set_lower_column_start_address_for_page_addressing_mode>
        set_higher_column_start_address_for_page_addressing_mode(0x10);
 800193c:	2010      	movs	r0, #16
 800193e:	f7ff ff25 	bl	800178c <set_higher_column_start_address_for_page_addressing_mode>

        ssd1306_write_data(&ssd1306_buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	01db      	lsls	r3, r3, #7
 8001946:	4a08      	ldr	r2, [pc, #32]	; (8001968 <ssd1306_update_screen+0x4c>)
 8001948:	4413      	add	r3, r2
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fec1 	bl	80016d4 <ssd1306_write_data>
    for(int i = 0; i < SSD1306_PAGE; i ++)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3301      	adds	r3, #1
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b07      	cmp	r3, #7
 800195c:	dde4      	ble.n	8001928 <ssd1306_update_screen+0xc>
    }
}
 800195e:	bf00      	nop
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000088 	.word	0x20000088

0800196c <ssd1306_black_screen>:

void ssd1306_black_screen()
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
    for(int i = 0; i < SSD1306_BUFFER_SIZE; i++)
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	e007      	b.n	8001988 <ssd1306_black_screen+0x1c>
    {
        ssd1306_buffer[i] = 0x00;
 8001978:	4a08      	ldr	r2, [pc, #32]	; (800199c <ssd1306_black_screen+0x30>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < SSD1306_BUFFER_SIZE; i++)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3301      	adds	r3, #1
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800198e:	dbf3      	blt.n	8001978 <ssd1306_black_screen+0xc>
    }

    ssd1306_update_screen();
 8001990:	f7ff ffc4 	bl	800191c <ssd1306_update_screen>
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000088 	.word	0x20000088

080019a0 <ssd1306_black_pixel>:

    ssd1306_update_screen();
}

void ssd1306_black_pixel(uint8_t x, uint8_t y)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	460a      	mov	r2, r1
 80019aa:	71fb      	strb	r3, [r7, #7]
 80019ac:	4613      	mov	r3, r2
 80019ae:	71bb      	strb	r3, [r7, #6]
    // (y / 8) * SSD1306_WIDTH : page
    // y % 8 : data bit D0 - D7
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019b0:	79fa      	ldrb	r2, [r7, #7]
 80019b2:	79bb      	ldrb	r3, [r7, #6]
 80019b4:	08db      	lsrs	r3, r3, #3
 80019b6:	b2d8      	uxtb	r0, r3
 80019b8:	4603      	mov	r3, r0
 80019ba:	01db      	lsls	r3, r3, #7
 80019bc:	4413      	add	r3, r2
 80019be:	4a0d      	ldr	r2, [pc, #52]	; (80019f4 <ssd1306_black_pixel+0x54>)
 80019c0:	5cd3      	ldrb	r3, [r2, r3]
 80019c2:	b25a      	sxtb	r2, r3
 80019c4:	79bb      	ldrb	r3, [r7, #6]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	2101      	movs	r1, #1
 80019cc:	fa01 f303 	lsl.w	r3, r1, r3
 80019d0:	b25b      	sxtb	r3, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	b25b      	sxtb	r3, r3
 80019d6:	4013      	ands	r3, r2
 80019d8:	b259      	sxtb	r1, r3
 80019da:	79fa      	ldrb	r2, [r7, #7]
 80019dc:	4603      	mov	r3, r0
 80019de:	01db      	lsls	r3, r3, #7
 80019e0:	4413      	add	r3, r2
 80019e2:	b2c9      	uxtb	r1, r1
 80019e4:	4a03      	ldr	r2, [pc, #12]	; (80019f4 <ssd1306_black_pixel+0x54>)
 80019e6:	54d1      	strb	r1, [r2, r3]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	20000088 	.word	0x20000088

080019f8 <ssd1306_white_pixel>:

void ssd1306_white_pixel(uint8_t x, uint8_t y)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	460a      	mov	r2, r1
 8001a02:	71fb      	strb	r3, [r7, #7]
 8001a04:	4613      	mov	r3, r2
 8001a06:	71bb      	strb	r3, [r7, #6]
    // (y / 8) * SSD1306_WIDTH : page
    // y % 8 : data bit D0 - D7
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a08:	79fa      	ldrb	r2, [r7, #7]
 8001a0a:	79bb      	ldrb	r3, [r7, #6]
 8001a0c:	08db      	lsrs	r3, r3, #3
 8001a0e:	b2d8      	uxtb	r0, r3
 8001a10:	4603      	mov	r3, r0
 8001a12:	01db      	lsls	r3, r3, #7
 8001a14:	4413      	add	r3, r2
 8001a16:	4a0c      	ldr	r2, [pc, #48]	; (8001a48 <ssd1306_white_pixel+0x50>)
 8001a18:	5cd3      	ldrb	r3, [r2, r3]
 8001a1a:	b25a      	sxtb	r2, r3
 8001a1c:	79bb      	ldrb	r3, [r7, #6]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	2101      	movs	r1, #1
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	b25b      	sxtb	r3, r3
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	b259      	sxtb	r1, r3
 8001a2e:	79fa      	ldrb	r2, [r7, #7]
 8001a30:	4603      	mov	r3, r0
 8001a32:	01db      	lsls	r3, r3, #7
 8001a34:	4413      	add	r3, r2
 8001a36:	b2c9      	uxtb	r1, r1
 8001a38:	4a03      	ldr	r2, [pc, #12]	; (8001a48 <ssd1306_white_pixel+0x50>)
 8001a3a:	54d1      	strb	r1, [r2, r3]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	20000088 	.word	0x20000088

08001a4c <ssd1306_write_char>:

char ssd1306_write_char(SSD1306_FONT font, char ch)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	f107 0308 	add.w	r3, r7, #8
 8001a56:	e883 0003 	stmia.w	r3, {r0, r1}
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	71fb      	strb	r3, [r7, #7]
    uint32_t b;

    // Printable Characters : 32 - 126
    if(ch < 32 || ch > 126)
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	2b1f      	cmp	r3, #31
 8001a62:	d902      	bls.n	8001a6a <ssd1306_write_char+0x1e>
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	2b7e      	cmp	r3, #126	; 0x7e
 8001a68:	d901      	bls.n	8001a6e <ssd1306_write_char+0x22>
        return 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e060      	b.n	8001b30 <ssd1306_write_char+0xe4>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (cursor.x + font.width) ||  SSD1306_HEIGHT < (cursor.y + font.height))
 8001a6e:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <ssd1306_write_char+0xec>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	7a3b      	ldrb	r3, [r7, #8]
 8001a76:	4413      	add	r3, r2
 8001a78:	2b80      	cmp	r3, #128	; 0x80
 8001a7a:	dc06      	bgt.n	8001a8a <ssd1306_write_char+0x3e>
 8001a7c:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <ssd1306_write_char+0xec>)
 8001a7e:	785b      	ldrb	r3, [r3, #1]
 8001a80:	461a      	mov	r2, r3
 8001a82:	7a7b      	ldrb	r3, [r7, #9]
 8001a84:	4413      	add	r3, r2
 8001a86:	2b40      	cmp	r3, #64	; 0x40
 8001a88:	dd01      	ble.n	8001a8e <ssd1306_write_char+0x42>
    {
        // Not enough space on current line
        return 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e050      	b.n	8001b30 <ssd1306_write_char+0xe4>
    }

    // Use the font to write
    for(int i = 0; i < font.height; i++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	e040      	b.n	8001b16 <ssd1306_write_char+0xca>
    {
        b = font.data[(ch - 32) * font.height + i];
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	3b20      	subs	r3, #32
 8001a9a:	7a79      	ldrb	r1, [r7, #9]
 8001a9c:	fb03 f101 	mul.w	r1, r3, r1
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	440b      	add	r3, r1
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	617b      	str	r3, [r7, #20]

        for(int j = 0; j < font.width; j++)
 8001aac:	2300      	movs	r3, #0
 8001aae:	61bb      	str	r3, [r7, #24]
 8001ab0:	e029      	b.n	8001b06 <ssd1306_write_char+0xba>
        {
            if((b << j) & 0x8000)
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00f      	beq.n	8001ae2 <ssd1306_write_char+0x96>
            {
                ssd1306_white_pixel(cursor.x + j, cursor.y + i);
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <ssd1306_write_char+0xec>)
 8001ac4:	781a      	ldrb	r2, [r3, #0]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	b2d8      	uxtb	r0, r3
 8001ace:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <ssd1306_write_char+0xec>)
 8001ad0:	785a      	ldrb	r2, [r3, #1]
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff ff8c 	bl	80019f8 <ssd1306_white_pixel>
 8001ae0:	e00e      	b.n	8001b00 <ssd1306_write_char+0xb4>
            }
            else
            {
                ssd1306_black_pixel(cursor.x + j, cursor.y + i);
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <ssd1306_write_char+0xec>)
 8001ae4:	781a      	ldrb	r2, [r3, #0]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	b2d8      	uxtb	r0, r3
 8001aee:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <ssd1306_write_char+0xec>)
 8001af0:	785a      	ldrb	r2, [r3, #1]
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	4413      	add	r3, r2
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	4619      	mov	r1, r3
 8001afc:	f7ff ff50 	bl	80019a0 <ssd1306_black_pixel>
        for(int j = 0; j < font.width; j++)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	3301      	adds	r3, #1
 8001b04:	61bb      	str	r3, [r7, #24]
 8001b06:	7a3b      	ldrb	r3, [r7, #8]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	dbd0      	blt.n	8001ab2 <ssd1306_write_char+0x66>
    for(int i = 0; i < font.height; i++)
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	3301      	adds	r3, #1
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	7a7b      	ldrb	r3, [r7, #9]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	dbb9      	blt.n	8001a94 <ssd1306_write_char+0x48>
            }
        }
    }

    // The current space is now taken
    cursor.x += font.width;
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <ssd1306_write_char+0xec>)
 8001b22:	781a      	ldrb	r2, [r3, #0]
 8001b24:	7a3b      	ldrb	r3, [r7, #8]
 8001b26:	4413      	add	r3, r2
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <ssd1306_write_char+0xec>)
 8001b2c:	701a      	strb	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3720      	adds	r7, #32
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000488 	.word	0x20000488

08001b3c <ssd1306_write_string>:


// Write full string to screen buffer
char ssd1306_write_string(SSD1306_FONT font, char *str)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	f107 0308 	add.w	r3, r7, #8
 8001b46:	e883 0003 	stmia.w	r3, {r0, r1}
 8001b4a:	607a      	str	r2, [r7, #4]
    current_font = font;
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <ssd1306_write_string+0x60>)
 8001b4e:	461a      	mov	r2, r3
 8001b50:	f107 0308 	add.w	r3, r7, #8
 8001b54:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b58:	e882 0003 	stmia.w	r2, {r0, r1}

    // Write until null-byte
    while(*str)
 8001b5c:	e014      	b.n	8001b88 <ssd1306_write_string+0x4c>
    {
        if(ssd1306_write_char(font, *str) != *str)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	f107 0308 	add.w	r3, r7, #8
 8001b68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b6c:	f7ff ff6e 	bl	8001a4c <ssd1306_write_char>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d002      	beq.n	8001b82 <ssd1306_write_string+0x46>
        {
            // Char could not be written
            return *str;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	e008      	b.n	8001b94 <ssd1306_write_string+0x58>
        }

        // Next char
        str++;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3301      	adds	r3, #1
 8001b86:	607b      	str	r3, [r7, #4]
    while(*str)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1e6      	bne.n	8001b5e <ssd1306_write_string+0x22>
    }

    // Everything ok
    return *str;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	781b      	ldrb	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	2000048c 	.word	0x2000048c

08001ba0 <ssd1306_set_cursor>:

void ssd1306_set_cursor(uint8_t x, uint8_t y)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	460a      	mov	r2, r1
 8001baa:	71fb      	strb	r3, [r7, #7]
 8001bac:	4613      	mov	r3, r2
 8001bae:	71bb      	strb	r3, [r7, #6]
    cursor.x = x;
 8001bb0:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <ssd1306_set_cursor+0x28>)
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	7013      	strb	r3, [r2, #0]
    cursor.y = y;
 8001bb6:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <ssd1306_set_cursor+0x28>)
 8001bb8:	79bb      	ldrb	r3, [r7, #6]
 8001bba:	7053      	strb	r3, [r2, #1]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	20000488 	.word	0x20000488

08001bcc <ssd1306_enter>:

void ssd1306_enter()
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
    cursor.x = 0;
 8001bd0:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <ssd1306_enter+0x24>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
    cursor.y += current_font.height;
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <ssd1306_enter+0x24>)
 8001bd8:	785a      	ldrb	r2, [r3, #1]
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <ssd1306_enter+0x28>)
 8001bdc:	785b      	ldrb	r3, [r3, #1]
 8001bde:	4413      	add	r3, r2
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <ssd1306_enter+0x24>)
 8001be4:	705a      	strb	r2, [r3, #1]
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	20000488 	.word	0x20000488
 8001bf4:	2000048c 	.word	0x2000048c

08001bf8 <delay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint16_t Delay){ // will delay = Delay * 1 micro second (Delay should not exceed 2^16 - 1)
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <delay+0x30>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2200      	movs	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
    while ((uint16_t)__HAL_TIM_GET_COUNTER(&htim3) < Delay);// wait for the counter to reach the us input in the parameter
 8001c0a:	bf00      	nop
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <delay+0x30>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	88fa      	ldrh	r2, [r7, #6]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d8f8      	bhi.n	8001c0c <delay+0x14>
}
 8001c1a:	bf00      	nop
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	20000530 	.word	0x20000530

08001c2c <Set_Pin_Output>:
uint16_t SUM, RH, TEMP;

float Temp = 0,Humi = 0;
uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001c48:	887b      	ldrh	r3, [r7, #2]
 8001c4a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	4619      	mov	r1, r3
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 ffde 	bl	8002c1c <HAL_GPIO_Init>
}
 8001c60:	bf00      	nop
 8001c62:	3720      	adds	r7, #32
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001c84:	887b      	ldrh	r3, [r7, #2]
 8001c86:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	4619      	mov	r1, r3
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 ffc0 	bl	8002c1c <HAL_GPIO_Init>
}
 8001c9c:	bf00      	nop
 8001c9e:	3720      	adds	r7, #32
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <DHT22_Start>:

void DHT22_Start (void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT22_PORT, DHT22_PIN); // set the pin as output
 8001ca8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cac:	480d      	ldr	r0, [pc, #52]	; (8001ce4 <DHT22_Start+0x40>)
 8001cae:	f7ff ffbd 	bl	8001c2c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cb8:	480a      	ldr	r0, [pc, #40]	; (8001ce4 <DHT22_Start+0x40>)
 8001cba:	f001 f94b 	bl	8002f54 <HAL_GPIO_WritePin>
	HAL_Delay(50);   // wait for > 1ms
 8001cbe:	2032      	movs	r0, #50	; 0x32
 8001cc0:	f000 fea2 	bl	8002a08 <HAL_Delay>

	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cca:	4806      	ldr	r0, [pc, #24]	; (8001ce4 <DHT22_Start+0x40>)
 8001ccc:	f001 f942 	bl	8002f54 <HAL_GPIO_WritePin>
	delay (30);   // wait for 30us
 8001cd0:	201e      	movs	r0, #30
 8001cd2:	f7ff ff91 	bl	8001bf8 <delay>

	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8001cd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cda:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <DHT22_Start+0x40>)
 8001cdc:	f7ff ffc4 	bl	8001c68 <Set_Pin_Input>
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40020400 	.word	0x40020400

08001ce8 <DHT22_Check_Response>:
uint8_t DHT22_Check_Response (void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8001cee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cf2:	4817      	ldr	r0, [pc, #92]	; (8001d50 <DHT22_Check_Response+0x68>)
 8001cf4:	f7ff ffb8 	bl	8001c68 <Set_Pin_Input>
	uint8_t Response = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	71fb      	strb	r3, [r7, #7]
	delay (40);  // wait for 40us
 8001cfc:	2028      	movs	r0, #40	; 0x28
 8001cfe:	f7ff ff7b 	bl	8001bf8 <delay>
	if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) // if the pin is low
 8001d02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d06:	4812      	ldr	r0, [pc, #72]	; (8001d50 <DHT22_Check_Response+0x68>)
 8001d08:	f001 f90c 	bl	8002f24 <HAL_GPIO_ReadPin>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10f      	bne.n	8001d32 <DHT22_Check_Response+0x4a>
	{
		delay (80);   // wait for 80us
 8001d12:	2050      	movs	r0, #80	; 0x50
 8001d14:	f7ff ff70 	bl	8001bf8 <delay>

		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;  // if the pin is high, response is ok
 8001d18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d1c:	480c      	ldr	r0, [pc, #48]	; (8001d50 <DHT22_Check_Response+0x68>)
 8001d1e:	f001 f901 	bl	8002f24 <HAL_GPIO_ReadPin>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d002      	beq.n	8001d2e <DHT22_Check_Response+0x46>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	71fb      	strb	r3, [r7, #7]
 8001d2c:	e001      	b.n	8001d32 <DHT22_Check_Response+0x4a>
		else Response = -1;
 8001d2e:	23ff      	movs	r3, #255	; 0xff
 8001d30:	71fb      	strb	r3, [r7, #7]
	}

	while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));// wait for the pin to go low
 8001d32:	bf00      	nop
 8001d34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d38:	4805      	ldr	r0, [pc, #20]	; (8001d50 <DHT22_Check_Response+0x68>)
 8001d3a:	f001 f8f3 	bl	8002f24 <HAL_GPIO_ReadPin>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f7      	bne.n	8001d34 <DHT22_Check_Response+0x4c>
	return Response;
 8001d44:	79fb      	ldrb	r3, [r7, #7]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40020400 	.word	0x40020400

08001d54 <DHT22_Read>:
uint8_t DHT22_Read (void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
	uint8_t i=0,j;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	71fb      	strb	r3, [r7, #7]
	for (j=0;j<8;j++)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	71bb      	strb	r3, [r7, #6]
 8001d62:	e03f      	b.n	8001de4 <DHT22_Read+0x90>
	{
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))){
			delay(1); // wait for the pin to go high
 8001d64:	2001      	movs	r0, #1
 8001d66:	f7ff ff47 	bl	8001bf8 <delay>
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))){
 8001d6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d6e:	4821      	ldr	r0, [pc, #132]	; (8001df4 <DHT22_Read+0xa0>)
 8001d70:	f001 f8d8 	bl	8002f24 <HAL_GPIO_ReadPin>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f4      	beq.n	8001d64 <DHT22_Read+0x10>
		}
		delay (40);   // wait for 40 us
 8001d7a:	2028      	movs	r0, #40	; 0x28
 8001d7c:	f7ff ff3c 	bl	8001bf8 <delay>

		if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8001d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d84:	481b      	ldr	r0, [pc, #108]	; (8001df4 <DHT22_Read+0xa0>)
 8001d86:	f001 f8cd 	bl	8002f24 <HAL_GPIO_ReadPin>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10e      	bne.n	8001dae <DHT22_Read+0x5a>
		{
			i&= ~(1<<(7-j));   // write 0
 8001d90:	79bb      	ldrb	r3, [r7, #6]
 8001d92:	f1c3 0307 	rsb	r3, r3, #7
 8001d96:	2201      	movs	r2, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	b25b      	sxtb	r3, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	b25a      	sxtb	r2, r3
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	4013      	ands	r3, r2
 8001da8:	b25b      	sxtb	r3, r3
 8001daa:	71fb      	strb	r3, [r7, #7]
 8001dac:	e00f      	b.n	8001dce <DHT22_Read+0x7a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001dae:	79bb      	ldrb	r3, [r7, #6]
 8001db0:	f1c3 0307 	rsb	r3, r3, #7
 8001db4:	2201      	movs	r2, #1
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	b25a      	sxtb	r2, r3
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	b25b      	sxtb	r3, r3
 8001dc4:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))){
 8001dc6:	e002      	b.n	8001dce <DHT22_Read+0x7a>
			delay(1);  // wait for the pin to go low
 8001dc8:	2001      	movs	r0, #1
 8001dca:	f7ff ff15 	bl	8001bf8 <delay>
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))){
 8001dce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dd2:	4808      	ldr	r0, [pc, #32]	; (8001df4 <DHT22_Read+0xa0>)
 8001dd4:	f001 f8a6 	bl	8002f24 <HAL_GPIO_ReadPin>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f4      	bne.n	8001dc8 <DHT22_Read+0x74>
	for (j=0;j<8;j++)
 8001dde:	79bb      	ldrb	r3, [r7, #6]
 8001de0:	3301      	adds	r3, #1
 8001de2:	71bb      	strb	r3, [r7, #6]
 8001de4:	79bb      	ldrb	r3, [r7, #6]
 8001de6:	2b07      	cmp	r3, #7
 8001de8:	d9bf      	bls.n	8001d6a <DHT22_Read+0x16>
		}
	}
	return i;
 8001dea:	79fb      	ldrb	r3, [r7, #7]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40020400 	.word	0x40020400

08001df8 <tempRead>:

float tempRead(){
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
//	sensorWrite(0xBE);
//	uint8_t temp = sensorRead();
//	temp |= sensorRead() << 8;
//	return temp;

	DS18B20_ReadAll();
 8001dfe:	f7ff f90b 	bl	8001018 <DS18B20_ReadAll>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);
 8001e02:	2201      	movs	r2, #1
 8001e04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e08:	4814      	ldr	r0, [pc, #80]	; (8001e5c <tempRead+0x64>)
 8001e0a:	f001 f8a3 	bl	8002f54 <HAL_GPIO_WritePin>
	DS18B20_StartAll();
 8001e0e:	f7fe ff83 	bl	8000d18 <DS18B20_StartAll>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e18:	4810      	ldr	r0, [pc, #64]	; (8001e5c <tempRead+0x64>)
 8001e1a:	f001 f89b 	bl	8002f54 <HAL_GPIO_WritePin>
	uint8_t ROM_tmp[8];
	uint8_t i;
	float temperature;
	for(i=0;i<DS18B20_Quantity();i++){
 8001e1e:	2300      	movs	r3, #0
 8001e20:	73fb      	strb	r3, [r7, #15]
 8001e22:	e00f      	b.n	8001e44 <tempRead+0x4c>
		if(DS18B20_GetTemperature(i, &temperature)){
 8001e24:	463a      	mov	r2, r7
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	4611      	mov	r1, r2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f940 	bl	80010b0 <DS18B20_GetTemperature>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <tempRead+0x46>
			return temperature;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	ee07 3a90 	vmov	s15, r3
 8001e3c:	e009      	b.n	8001e52 <tempRead+0x5a>
	for(i=0;i<DS18B20_Quantity();i++){
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	3301      	adds	r3, #1
 8001e42:	73fb      	strb	r3, [r7, #15]
 8001e44:	f7ff f928 	bl	8001098 <DS18B20_Quantity>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d3e8      	bcc.n	8001e24 <tempRead+0x2c>
		}
	}
}
 8001e52:	eeb0 0a67 	vmov.f32	s0, s15
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40020800 	.word	0x40020800

08001e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08a      	sub	sp, #40	; 0x28
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e66:	f000 fd5d 	bl	8002924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e6a:	f000 f9bf 	bl	80021ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e6e:	f000 fb45 	bl	80024fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001e72:	f000 fb19 	bl	80024a8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001e76:	f000 fa4f 	bl	8002318 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001e7a:	f000 fa9d 	bl	80023b8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001e7e:	f000 fae9 	bl	8002454 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001e82:	f000 fa1b 	bl	80022bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_init();
 8001e86:	f7ff fd1c 	bl	80018c2 <ssd1306_init>

    ssd1306_write_string(font11x18, "");
 8001e8a:	4bbf      	ldr	r3, [pc, #764]	; (8002188 <main+0x328>)
 8001e8c:	4abf      	ldr	r2, [pc, #764]	; (800218c <main+0x32c>)
 8001e8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e92:	f7ff fe53 	bl	8001b3c <ssd1306_write_string>
    ssd1306_enter();
 8001e96:	f7ff fe99 	bl	8001bcc <ssd1306_enter>
    ssd1306_write_string(font11x18, "Hello World");
 8001e9a:	4bbb      	ldr	r3, [pc, #748]	; (8002188 <main+0x328>)
 8001e9c:	4abc      	ldr	r2, [pc, #752]	; (8002190 <main+0x330>)
 8001e9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ea2:	f7ff fe4b 	bl	8001b3c <ssd1306_write_string>
    ssd1306_enter();
 8001ea6:	f7ff fe91 	bl	8001bcc <ssd1306_enter>
    ssd1306_update_screen();
 8001eaa:	f7ff fd37 	bl	800191c <ssd1306_update_screen>

  DS18B20_Init(DS18B20_Resolution_12bits);
 8001eae:	200c      	movs	r0, #12
 8001eb0:	f7ff f920 	bl	80010f4 <DS18B20_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eba:	48b6      	ldr	r0, [pc, #728]	; (8002194 <main+0x334>)
 8001ebc:	f001 f84a 	bl	8002f54 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start(&htim1);
 8001ec0:	48b5      	ldr	r0, [pc, #724]	; (8002198 <main+0x338>)
 8001ec2:	f002 f9a5 	bl	8004210 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8001ec6:	48b5      	ldr	r0, [pc, #724]	; (800219c <main+0x33c>)
 8001ec8:	f002 f9a2 	bl	8004210 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  HAL_UART_Transmit(&huart2, "Do\r\n", 4, 10);
	  DHT22_Start();
 8001ecc:	f7ff feea 	bl	8001ca4 <DHT22_Start>
	  Presence = DHT22_Check_Response();
 8001ed0:	f7ff ff0a 	bl	8001ce8 <DHT22_Check_Response>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4bb1      	ldr	r3, [pc, #708]	; (80021a0 <main+0x340>)
 8001eda:	701a      	strb	r2, [r3, #0]
	  Rh_byte1 = DHT22_Read();
 8001edc:	f7ff ff3a 	bl	8001d54 <DHT22_Read>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4baf      	ldr	r3, [pc, #700]	; (80021a4 <main+0x344>)
 8001ee6:	701a      	strb	r2, [r3, #0]
	  Rh_byte2 = DHT22_Read();
 8001ee8:	f7ff ff34 	bl	8001d54 <DHT22_Read>
 8001eec:	4603      	mov	r3, r0
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4bad      	ldr	r3, [pc, #692]	; (80021a8 <main+0x348>)
 8001ef2:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT22_Read();
 8001ef4:	f7ff ff2e 	bl	8001d54 <DHT22_Read>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	461a      	mov	r2, r3
 8001efc:	4bab      	ldr	r3, [pc, #684]	; (80021ac <main+0x34c>)
 8001efe:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT22_Read();
 8001f00:	f7ff ff28 	bl	8001d54 <DHT22_Read>
 8001f04:	4603      	mov	r3, r0
 8001f06:	461a      	mov	r2, r3
 8001f08:	4ba9      	ldr	r3, [pc, #676]	; (80021b0 <main+0x350>)
 8001f0a:	701a      	strb	r2, [r3, #0]
	  SUM = DHT22_Read();
 8001f0c:	f7ff ff22 	bl	8001d54 <DHT22_Read>
 8001f10:	4603      	mov	r3, r0
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	4ba7      	ldr	r3, [pc, #668]	; (80021b4 <main+0x354>)
 8001f16:	801a      	strh	r2, [r3, #0]
	  Check = Rh_byte1 + Rh_byte2 + Temp_byte1 + Temp_byte2;
 8001f18:	4ba2      	ldr	r3, [pc, #648]	; (80021a4 <main+0x344>)
 8001f1a:	781a      	ldrb	r2, [r3, #0]
 8001f1c:	4ba2      	ldr	r3, [pc, #648]	; (80021a8 <main+0x348>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4413      	add	r3, r2
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	4ba1      	ldr	r3, [pc, #644]	; (80021ac <main+0x34c>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4413      	add	r3, r2
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	4ba0      	ldr	r3, [pc, #640]	; (80021b0 <main+0x350>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4413      	add	r3, r2
 8001f32:	77fb      	strb	r3, [r7, #31]
	  /*
	  TEMP = ((Temp_byte1<<8)|Temp_byte2)&32767;
	  RH = ((Rh_byte1<<8)|Rh_byte2)&32767;
	  */
	  Temp = (float)(TEMP/10.0);
 8001f34:	4ba0      	ldr	r3, [pc, #640]	; (80021b8 <main+0x358>)
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fa9f 	bl	800047c <__aeabi_i2d>
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	4b9e      	ldr	r3, [pc, #632]	; (80021bc <main+0x35c>)
 8001f44:	f7fe fc2e 	bl	80007a4 <__aeabi_ddiv>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f7fe fd10 	bl	8000974 <__aeabi_d2f>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4a9a      	ldr	r2, [pc, #616]	; (80021c0 <main+0x360>)
 8001f58:	6013      	str	r3, [r2, #0]
	  Humi = (float)(RH/10.0);
 8001f5a:	4b9a      	ldr	r3, [pc, #616]	; (80021c4 <main+0x364>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fa8c 	bl	800047c <__aeabi_i2d>
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	4b94      	ldr	r3, [pc, #592]	; (80021bc <main+0x35c>)
 8001f6a:	f7fe fc1b 	bl	80007a4 <__aeabi_ddiv>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4610      	mov	r0, r2
 8001f74:	4619      	mov	r1, r3
 8001f76:	f7fe fcfd 	bl	8000974 <__aeabi_d2f>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4a92      	ldr	r2, [pc, #584]	; (80021c8 <main+0x368>)
 8001f7e:	6013      	str	r3, [r2, #0]
	  Tsum = Temp_byte1*256 + Temp_byte2;
 8001f80:	4b8a      	ldr	r3, [pc, #552]	; (80021ac <main+0x34c>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	021b      	lsls	r3, r3, #8
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	4b89      	ldr	r3, [pc, #548]	; (80021b0 <main+0x350>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	4413      	add	r3, r2
 8001f92:	83bb      	strh	r3, [r7, #28]
	  int Hsum = Rh_byte1*256 + Rh_byte2;
 8001f94:	4b83      	ldr	r3, [pc, #524]	; (80021a4 <main+0x344>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	021b      	lsls	r3, r3, #8
 8001f9a:	4a83      	ldr	r2, [pc, #524]	; (80021a8 <main+0x348>)
 8001f9c:	7812      	ldrb	r2, [r2, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
	  T[0] = '0' + Tsum/100;
 8001fa2:	8bbb      	ldrh	r3, [r7, #28]
 8001fa4:	4a89      	ldr	r2, [pc, #548]	; (80021cc <main+0x36c>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	3330      	adds	r3, #48	; 0x30
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	733b      	strb	r3, [r7, #12]
	  T[1] = '0' + (Tsum%100)/10;
 8001fb6:	8bbb      	ldrh	r3, [r7, #28]
 8001fb8:	4a84      	ldr	r2, [pc, #528]	; (80021cc <main+0x36c>)
 8001fba:	fba2 1203 	umull	r1, r2, r2, r3
 8001fbe:	0952      	lsrs	r2, r2, #5
 8001fc0:	2164      	movs	r1, #100	; 0x64
 8001fc2:	fb01 f202 	mul.w	r2, r1, r2
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	4a81      	ldr	r2, [pc, #516]	; (80021d0 <main+0x370>)
 8001fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd0:	08db      	lsrs	r3, r3, #3
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	3330      	adds	r3, #48	; 0x30
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	737b      	strb	r3, [r7, #13]
	  T[2] = '0' + (Tsum%10);
 8001fdc:	8bba      	ldrh	r2, [r7, #28]
 8001fde:	4b7c      	ldr	r3, [pc, #496]	; (80021d0 <main+0x370>)
 8001fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8001fe4:	08d9      	lsrs	r1, r3, #3
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	3330      	adds	r3, #48	; 0x30
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	73bb      	strb	r3, [r7, #14]
	  H[0] = '0' + Hsum/100;
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4a73      	ldr	r2, [pc, #460]	; (80021cc <main+0x36c>)
 8001ffe:	fb82 1203 	smull	r1, r2, r2, r3
 8002002:	1152      	asrs	r2, r2, #5
 8002004:	17db      	asrs	r3, r3, #31
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	3330      	adds	r3, #48	; 0x30
 800200c:	b2db      	uxtb	r3, r3
 800200e:	723b      	strb	r3, [r7, #8]
	  H[1] = '0' + (Hsum%100)/10;
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4b6e      	ldr	r3, [pc, #440]	; (80021cc <main+0x36c>)
 8002014:	fb83 1302 	smull	r1, r3, r3, r2
 8002018:	1159      	asrs	r1, r3, #5
 800201a:	17d3      	asrs	r3, r2, #31
 800201c:	1acb      	subs	r3, r1, r3
 800201e:	2164      	movs	r1, #100	; 0x64
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	4a6b      	ldr	r2, [pc, #428]	; (80021d4 <main+0x374>)
 8002028:	fb82 1203 	smull	r1, r2, r2, r3
 800202c:	1092      	asrs	r2, r2, #2
 800202e:	17db      	asrs	r3, r3, #31
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	3330      	adds	r3, #48	; 0x30
 8002036:	b2db      	uxtb	r3, r3
 8002038:	727b      	strb	r3, [r7, #9]
	  H[2] = '0' + (Hsum%10);
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4b65      	ldr	r3, [pc, #404]	; (80021d4 <main+0x374>)
 800203e:	fb83 1302 	smull	r1, r3, r3, r2
 8002042:	1099      	asrs	r1, r3, #2
 8002044:	17d3      	asrs	r3, r2, #31
 8002046:	1ac9      	subs	r1, r1, r3
 8002048:	460b      	mov	r3, r1
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	1ad1      	subs	r1, r2, r3
 8002052:	b2cb      	uxtb	r3, r1
 8002054:	3330      	adds	r3, #48	; 0x30
 8002056:	b2db      	uxtb	r3, r3
 8002058:	72bb      	strb	r3, [r7, #10]
	  uint8_t t = Tsum/10 ;
 800205a:	8bbb      	ldrh	r3, [r7, #28]
 800205c:	4a5c      	ldr	r2, [pc, #368]	; (80021d0 <main+0x370>)
 800205e:	fba2 2303 	umull	r2, r3, r2, r3
 8002062:	08db      	lsrs	r3, r3, #3
 8002064:	b29b      	uxth	r3, r3
 8002066:	75fb      	strb	r3, [r7, #23]
	  uint8_t h = Hsum/10 ;
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	4a5a      	ldr	r2, [pc, #360]	; (80021d4 <main+0x374>)
 800206c:	fb82 1203 	smull	r1, r2, r2, r3
 8002070:	1092      	asrs	r2, r2, #2
 8002072:	17db      	asrs	r3, r3, #31
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	75bb      	strb	r3, [r7, #22]
	  int thermoAv = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	613b      	str	r3, [r7, #16]
	  float thermoSum = 0;
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
	  for(int i=1;i<=100;i++){
 8002082:	2301      	movs	r3, #1
 8002084:	623b      	str	r3, [r7, #32]
 8002086:	e00c      	b.n	80020a2 <main+0x242>
	  	thermoSum+=tempRead();
 8002088:	f7ff feb6 	bl	8001df8 <tempRead>
 800208c:	eeb0 7a40 	vmov.f32	s14, s0
 8002090:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002094:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002098:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  for(int i=1;i<=100;i++){
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	3301      	adds	r3, #1
 80020a0:	623b      	str	r3, [r7, #32]
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	2b64      	cmp	r3, #100	; 0x64
 80020a6:	ddef      	ble.n	8002088 <main+0x228>
	  }
	  thermoAv = thermoSum/10;
 80020a8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80020ac:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80020b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020b8:	ee17 3a90 	vmov	r3, s15
 80020bc:	613b      	str	r3, [r7, #16]
	  HAL_UART_Transmit(&huart2, T, 3, 10);
 80020be:	f107 010c 	add.w	r1, r7, #12
 80020c2:	230a      	movs	r3, #10
 80020c4:	2203      	movs	r2, #3
 80020c6:	4844      	ldr	r0, [pc, #272]	; (80021d8 <main+0x378>)
 80020c8:	f002 fb99 	bl	80047fe <HAL_UART_Transmit>
	  //HAL_UART_Transmit(&huart1, &t, 1, 10);
	  HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 80020cc:	230a      	movs	r3, #10
 80020ce:	2202      	movs	r2, #2
 80020d0:	4942      	ldr	r1, [pc, #264]	; (80021dc <main+0x37c>)
 80020d2:	4841      	ldr	r0, [pc, #260]	; (80021d8 <main+0x378>)
 80020d4:	f002 fb93 	bl	80047fe <HAL_UART_Transmit>
	  //HAL_UART_Transmit(&huart2, &h, 1, 10);
	  HAL_UART_Transmit(&huart2, H, 3, 10);
 80020d8:	f107 0108 	add.w	r1, r7, #8
 80020dc:	230a      	movs	r3, #10
 80020de:	2203      	movs	r2, #3
 80020e0:	483d      	ldr	r0, [pc, #244]	; (80021d8 <main+0x378>)
 80020e2:	f002 fb8c 	bl	80047fe <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 80020e6:	230a      	movs	r3, #10
 80020e8:	2202      	movs	r2, #2
 80020ea:	493c      	ldr	r1, [pc, #240]	; (80021dc <main+0x37c>)
 80020ec:	483a      	ldr	r0, [pc, #232]	; (80021d8 <main+0x378>)
 80020ee:	f002 fb86 	bl	80047fe <HAL_UART_Transmit>
	  //HAL_UART_Transmit(&huart2, skinTemp, sizeof(skinTemp), 10);
  //	  HAL_UART_Transmit(&huart2, H, 3, 10);
  //	  HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
	  if(Check == SUM){
 80020f2:	7ffb      	ldrb	r3, [r7, #31]
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	4b2f      	ldr	r3, [pc, #188]	; (80021b4 <main+0x354>)
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d138      	bne.n	8002170 <main+0x310>
		  uint8_t t = Tsum/10 ;
 80020fe:	8bbb      	ldrh	r3, [r7, #28]
 8002100:	4a33      	ldr	r2, [pc, #204]	; (80021d0 <main+0x370>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	08db      	lsrs	r3, r3, #3
 8002108:	b29b      	uxth	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	71fb      	strb	r3, [r7, #7]
		  uint8_t h = Hsum/10 ;
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	4a30      	ldr	r2, [pc, #192]	; (80021d4 <main+0x374>)
 8002112:	fb82 1203 	smull	r1, r2, r2, r3
 8002116:	1092      	asrs	r2, r2, #2
 8002118:	17db      	asrs	r3, r3, #31
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	71bb      	strb	r3, [r7, #6]
		  uint8_t s = thermoAv/10 ;
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4a2c      	ldr	r2, [pc, #176]	; (80021d4 <main+0x374>)
 8002124:	fb82 1203 	smull	r1, r2, r2, r3
 8002128:	1092      	asrs	r2, r2, #2
 800212a:	17db      	asrs	r3, r3, #31
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	717b      	strb	r3, [r7, #5]
		  HAL_UART_Transmit(&huart2, "Good\r\n", 6, 10);
 8002132:	230a      	movs	r3, #10
 8002134:	2206      	movs	r2, #6
 8002136:	492a      	ldr	r1, [pc, #168]	; (80021e0 <main+0x380>)
 8002138:	4827      	ldr	r0, [pc, #156]	; (80021d8 <main+0x378>)
 800213a:	f002 fb60 	bl	80047fe <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &t, 1, 10);
 800213e:	1df9      	adds	r1, r7, #7
 8002140:	230a      	movs	r3, #10
 8002142:	2201      	movs	r2, #1
 8002144:	4827      	ldr	r0, [pc, #156]	; (80021e4 <main+0x384>)
 8002146:	f002 fb5a 	bl	80047fe <HAL_UART_Transmit>
		  HAL_Delay(30);
 800214a:	201e      	movs	r0, #30
 800214c:	f000 fc5c 	bl	8002a08 <HAL_Delay>
		  HAL_UART_Transmit(&huart1, &h, 1, 10);
 8002150:	1db9      	adds	r1, r7, #6
 8002152:	230a      	movs	r3, #10
 8002154:	2201      	movs	r2, #1
 8002156:	4823      	ldr	r0, [pc, #140]	; (80021e4 <main+0x384>)
 8002158:	f002 fb51 	bl	80047fe <HAL_UART_Transmit>
		  HAL_Delay(30);
 800215c:	201e      	movs	r0, #30
 800215e:	f000 fc53 	bl	8002a08 <HAL_Delay>
		  HAL_UART_Transmit(&huart1, &s, 1, 10);
 8002162:	1d79      	adds	r1, r7, #5
 8002164:	230a      	movs	r3, #10
 8002166:	2201      	movs	r2, #1
 8002168:	481e      	ldr	r0, [pc, #120]	; (80021e4 <main+0x384>)
 800216a:	f002 fb48 	bl	80047fe <HAL_UART_Transmit>
 800216e:	e005      	b.n	800217c <main+0x31c>
	  }else{
		  HAL_UART_Transmit(&huart2, "Bad\r\n", 5, 10);
 8002170:	230a      	movs	r3, #10
 8002172:	2205      	movs	r2, #5
 8002174:	491c      	ldr	r1, [pc, #112]	; (80021e8 <main+0x388>)
 8002176:	4818      	ldr	r0, [pc, #96]	; (80021d8 <main+0x378>)
 8002178:	f002 fb41 	bl	80047fe <HAL_UART_Transmit>
	  }
	  HAL_Delay(3000);
 800217c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002180:	f000 fc42 	bl	8002a08 <HAL_Delay>
  {
 8002184:	e6a2      	b.n	8001ecc <main+0x6c>
 8002186:	bf00      	nop
 8002188:	20000000 	.word	0x20000000
 800218c:	08004f58 	.word	0x08004f58
 8002190:	08004f5c 	.word	0x08004f5c
 8002194:	40020800 	.word	0x40020800
 8002198:	200004e8 	.word	0x200004e8
 800219c:	20000530 	.word	0x20000530
 80021a0:	20000614 	.word	0x20000614
 80021a4:	20000600 	.word	0x20000600
 80021a8:	20000601 	.word	0x20000601
 80021ac:	20000602 	.word	0x20000602
 80021b0:	20000603 	.word	0x20000603
 80021b4:	20000604 	.word	0x20000604
 80021b8:	20000608 	.word	0x20000608
 80021bc:	40240000 	.word	0x40240000
 80021c0:	2000060c 	.word	0x2000060c
 80021c4:	20000606 	.word	0x20000606
 80021c8:	20000610 	.word	0x20000610
 80021cc:	51eb851f 	.word	0x51eb851f
 80021d0:	cccccccd 	.word	0xcccccccd
 80021d4:	66666667 	.word	0x66666667
 80021d8:	200005bc 	.word	0x200005bc
 80021dc:	08004f68 	.word	0x08004f68
 80021e0:	08004f6c 	.word	0x08004f6c
 80021e4:	20000578 	.word	0x20000578
 80021e8:	08004f74 	.word	0x08004f74

080021ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b094      	sub	sp, #80	; 0x50
 80021f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021f2:	f107 0320 	add.w	r3, r7, #32
 80021f6:	2230      	movs	r2, #48	; 0x30
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f002 fe98 	bl	8004f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002200:	f107 030c 	add.w	r3, r7, #12
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002210:	2300      	movs	r3, #0
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	4b27      	ldr	r3, [pc, #156]	; (80022b4 <SystemClock_Config+0xc8>)
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	4a26      	ldr	r2, [pc, #152]	; (80022b4 <SystemClock_Config+0xc8>)
 800221a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221e:	6413      	str	r3, [r2, #64]	; 0x40
 8002220:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <SystemClock_Config+0xc8>)
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800222c:	2300      	movs	r3, #0
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <SystemClock_Config+0xcc>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a20      	ldr	r2, [pc, #128]	; (80022b8 <SystemClock_Config+0xcc>)
 8002236:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <SystemClock_Config+0xcc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002244:	607b      	str	r3, [r7, #4]
 8002246:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002248:	2301      	movs	r3, #1
 800224a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800224c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002252:	2302      	movs	r3, #2
 8002254:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002256:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800225a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800225c:	2304      	movs	r3, #4
 800225e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002260:	2364      	movs	r3, #100	; 0x64
 8002262:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002264:	2302      	movs	r3, #2
 8002266:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002268:	2304      	movs	r3, #4
 800226a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800226c:	f107 0320 	add.w	r3, r7, #32
 8002270:	4618      	mov	r0, r3
 8002272:	f001 fae5 	bl	8003840 <HAL_RCC_OscConfig>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800227c:	f000 f9c2 	bl	8002604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002280:	230f      	movs	r3, #15
 8002282:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002284:	2302      	movs	r3, #2
 8002286:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800228c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002290:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002296:	f107 030c 	add.w	r3, r7, #12
 800229a:	2103      	movs	r1, #3
 800229c:	4618      	mov	r0, r3
 800229e:	f001 fd47 	bl	8003d30 <HAL_RCC_ClockConfig>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80022a8:	f000 f9ac 	bl	8002604 <Error_Handler>
  }
}
 80022ac:	bf00      	nop
 80022ae:	3750      	adds	r7, #80	; 0x50
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40007000 	.word	0x40007000

080022bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <MX_I2C1_Init+0x50>)
 80022c2:	4a13      	ldr	r2, [pc, #76]	; (8002310 <MX_I2C1_Init+0x54>)
 80022c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <MX_I2C1_Init+0x50>)
 80022c8:	4a12      	ldr	r2, [pc, #72]	; (8002314 <MX_I2C1_Init+0x58>)
 80022ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022cc:	4b0f      	ldr	r3, [pc, #60]	; (800230c <MX_I2C1_Init+0x50>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022d2:	4b0e      	ldr	r3, [pc, #56]	; (800230c <MX_I2C1_Init+0x50>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <MX_I2C1_Init+0x50>)
 80022da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022e0:	4b0a      	ldr	r3, [pc, #40]	; (800230c <MX_I2C1_Init+0x50>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022e6:	4b09      	ldr	r3, [pc, #36]	; (800230c <MX_I2C1_Init+0x50>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022ec:	4b07      	ldr	r3, [pc, #28]	; (800230c <MX_I2C1_Init+0x50>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <MX_I2C1_Init+0x50>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022f8:	4804      	ldr	r0, [pc, #16]	; (800230c <MX_I2C1_Init+0x50>)
 80022fa:	f000 fe45 	bl	8002f88 <HAL_I2C_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002304:	f000 f97e 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000494 	.word	0x20000494
 8002310:	40005400 	.word	0x40005400
 8002314:	000186a0 	.word	0x000186a0

08002318 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800231e:	f107 0308 	add.w	r3, r7, #8
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800232c:	463b      	mov	r3, r7
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002334:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <MX_TIM1_Init+0x98>)
 8002336:	4a1f      	ldr	r2, [pc, #124]	; (80023b4 <MX_TIM1_Init+0x9c>)
 8002338:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 800233a:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <MX_TIM1_Init+0x98>)
 800233c:	223f      	movs	r2, #63	; 0x3f
 800233e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002340:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <MX_TIM1_Init+0x98>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <MX_TIM1_Init+0x98>)
 8002348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800234c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <MX_TIM1_Init+0x98>)
 8002350:	2200      	movs	r2, #0
 8002352:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002354:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <MX_TIM1_Init+0x98>)
 8002356:	2200      	movs	r2, #0
 8002358:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <MX_TIM1_Init+0x98>)
 800235c:	2200      	movs	r2, #0
 800235e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002360:	4813      	ldr	r0, [pc, #76]	; (80023b0 <MX_TIM1_Init+0x98>)
 8002362:	f001 ff05 	bl	8004170 <HAL_TIM_Base_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800236c:	f000 f94a 	bl	8002604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002374:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002376:	f107 0308 	add.w	r3, r7, #8
 800237a:	4619      	mov	r1, r3
 800237c:	480c      	ldr	r0, [pc, #48]	; (80023b0 <MX_TIM1_Init+0x98>)
 800237e:	f001 ffa1 	bl	80042c4 <HAL_TIM_ConfigClockSource>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002388:	f000 f93c 	bl	8002604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800238c:	2300      	movs	r3, #0
 800238e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002390:	2300      	movs	r3, #0
 8002392:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002394:	463b      	mov	r3, r7
 8002396:	4619      	mov	r1, r3
 8002398:	4805      	ldr	r0, [pc, #20]	; (80023b0 <MX_TIM1_Init+0x98>)
 800239a:	f002 f975 	bl	8004688 <HAL_TIMEx_MasterConfigSynchronization>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80023a4:	f000 f92e 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023a8:	bf00      	nop
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	200004e8 	.word	0x200004e8
 80023b4:	40010000 	.word	0x40010000

080023b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023be:	f107 0308 	add.w	r3, r7, #8
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023cc:	463b      	mov	r3, r7
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023d4:	4b1d      	ldr	r3, [pc, #116]	; (800244c <MX_TIM3_Init+0x94>)
 80023d6:	4a1e      	ldr	r2, [pc, #120]	; (8002450 <MX_TIM3_Init+0x98>)
 80023d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80023da:	4b1c      	ldr	r3, [pc, #112]	; (800244c <MX_TIM3_Init+0x94>)
 80023dc:	2263      	movs	r2, #99	; 0x63
 80023de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e0:	4b1a      	ldr	r3, [pc, #104]	; (800244c <MX_TIM3_Init+0x94>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80023e6:	4b19      	ldr	r3, [pc, #100]	; (800244c <MX_TIM3_Init+0x94>)
 80023e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ee:	4b17      	ldr	r3, [pc, #92]	; (800244c <MX_TIM3_Init+0x94>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f4:	4b15      	ldr	r3, [pc, #84]	; (800244c <MX_TIM3_Init+0x94>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023fa:	4814      	ldr	r0, [pc, #80]	; (800244c <MX_TIM3_Init+0x94>)
 80023fc:	f001 feb8 	bl	8004170 <HAL_TIM_Base_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002406:	f000 f8fd 	bl	8002604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800240a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800240e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002410:	f107 0308 	add.w	r3, r7, #8
 8002414:	4619      	mov	r1, r3
 8002416:	480d      	ldr	r0, [pc, #52]	; (800244c <MX_TIM3_Init+0x94>)
 8002418:	f001 ff54 	bl	80042c4 <HAL_TIM_ConfigClockSource>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002422:	f000 f8ef 	bl	8002604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002426:	2300      	movs	r3, #0
 8002428:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800242e:	463b      	mov	r3, r7
 8002430:	4619      	mov	r1, r3
 8002432:	4806      	ldr	r0, [pc, #24]	; (800244c <MX_TIM3_Init+0x94>)
 8002434:	f002 f928 	bl	8004688 <HAL_TIMEx_MasterConfigSynchronization>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800243e:	f000 f8e1 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002442:	bf00      	nop
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000530 	.word	0x20000530
 8002450:	40000400 	.word	0x40000400

08002454 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <MX_USART1_UART_Init+0x4c>)
 800245a:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <MX_USART1_UART_Init+0x50>)
 800245c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <MX_USART1_UART_Init+0x4c>)
 8002460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002464:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002466:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <MX_USART1_UART_Init+0x4c>)
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <MX_USART1_UART_Init+0x4c>)
 800246e:	2200      	movs	r2, #0
 8002470:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002472:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <MX_USART1_UART_Init+0x4c>)
 8002474:	2200      	movs	r2, #0
 8002476:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <MX_USART1_UART_Init+0x4c>)
 800247a:	220c      	movs	r2, #12
 800247c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <MX_USART1_UART_Init+0x4c>)
 8002480:	2200      	movs	r2, #0
 8002482:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <MX_USART1_UART_Init+0x4c>)
 8002486:	2200      	movs	r2, #0
 8002488:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800248a:	4805      	ldr	r0, [pc, #20]	; (80024a0 <MX_USART1_UART_Init+0x4c>)
 800248c:	f002 f96a 	bl	8004764 <HAL_UART_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002496:	f000 f8b5 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000578 	.word	0x20000578
 80024a4:	40011000 	.word	0x40011000

080024a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <MX_USART2_UART_Init+0x4c>)
 80024ae:	4a12      	ldr	r2, [pc, #72]	; (80024f8 <MX_USART2_UART_Init+0x50>)
 80024b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024b2:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <MX_USART2_UART_Init+0x4c>)
 80024b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <MX_USART2_UART_Init+0x4c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <MX_USART2_UART_Init+0x4c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <MX_USART2_UART_Init+0x4c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024cc:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <MX_USART2_UART_Init+0x4c>)
 80024ce:	220c      	movs	r2, #12
 80024d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <MX_USART2_UART_Init+0x4c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <MX_USART2_UART_Init+0x4c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024de:	4805      	ldr	r0, [pc, #20]	; (80024f4 <MX_USART2_UART_Init+0x4c>)
 80024e0:	f002 f940 	bl	8004764 <HAL_UART_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024ea:	f000 f88b 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200005bc 	.word	0x200005bc
 80024f8:	40004400 	.word	0x40004400

080024fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	; 0x28
 8002500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002502:	f107 0314 	add.w	r3, r7, #20
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	605a      	str	r2, [r3, #4]
 800250c:	609a      	str	r2, [r3, #8]
 800250e:	60da      	str	r2, [r3, #12]
 8002510:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	4b38      	ldr	r3, [pc, #224]	; (80025f8 <MX_GPIO_Init+0xfc>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a37      	ldr	r2, [pc, #220]	; (80025f8 <MX_GPIO_Init+0xfc>)
 800251c:	f043 0304 	orr.w	r3, r3, #4
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b35      	ldr	r3, [pc, #212]	; (80025f8 <MX_GPIO_Init+0xfc>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	4b31      	ldr	r3, [pc, #196]	; (80025f8 <MX_GPIO_Init+0xfc>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a30      	ldr	r2, [pc, #192]	; (80025f8 <MX_GPIO_Init+0xfc>)
 8002538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b2e      	ldr	r3, [pc, #184]	; (80025f8 <MX_GPIO_Init+0xfc>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	4b2a      	ldr	r3, [pc, #168]	; (80025f8 <MX_GPIO_Init+0xfc>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a29      	ldr	r2, [pc, #164]	; (80025f8 <MX_GPIO_Init+0xfc>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <MX_GPIO_Init+0xfc>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	607b      	str	r3, [r7, #4]
 800256a:	4b23      	ldr	r3, [pc, #140]	; (80025f8 <MX_GPIO_Init+0xfc>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a22      	ldr	r2, [pc, #136]	; (80025f8 <MX_GPIO_Init+0xfc>)
 8002570:	f043 0302 	orr.w	r3, r3, #2
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b20      	ldr	r3, [pc, #128]	; (80025f8 <MX_GPIO_Init+0xfc>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	607b      	str	r3, [r7, #4]
 8002580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002582:	2200      	movs	r2, #0
 8002584:	2120      	movs	r1, #32
 8002586:	481d      	ldr	r0, [pc, #116]	; (80025fc <MX_GPIO_Init+0x100>)
 8002588:	f000 fce4 	bl	8002f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 800258c:	2200      	movs	r2, #0
 800258e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002592:	481b      	ldr	r0, [pc, #108]	; (8002600 <MX_GPIO_Init+0x104>)
 8002594:	f000 fcde 	bl	8002f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800259c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800259e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	4619      	mov	r1, r3
 80025ae:	4814      	ldr	r0, [pc, #80]	; (8002600 <MX_GPIO_Init+0x104>)
 80025b0:	f000 fb34 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80025b4:	2320      	movs	r3, #32
 80025b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b8:	2301      	movs	r3, #1
 80025ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c0:	2300      	movs	r3, #0
 80025c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	4619      	mov	r1, r3
 80025ca:	480c      	ldr	r0, [pc, #48]	; (80025fc <MX_GPIO_Init+0x100>)
 80025cc:	f000 fb26 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80025d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d6:	2301      	movs	r3, #1
 80025d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025de:	2300      	movs	r3, #0
 80025e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e2:	f107 0314 	add.w	r3, r7, #20
 80025e6:	4619      	mov	r1, r3
 80025e8:	4805      	ldr	r0, [pc, #20]	; (8002600 <MX_GPIO_Init+0x104>)
 80025ea:	f000 fb17 	bl	8002c1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025ee:	bf00      	nop
 80025f0:	3728      	adds	r7, #40	; 0x28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40020000 	.word	0x40020000
 8002600:	40020800 	.word	0x40020800

08002604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002608:	b672      	cpsid	i
}
 800260a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800260c:	e7fe      	b.n	800260c <Error_Handler+0x8>
	...

08002610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	607b      	str	r3, [r7, #4]
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <HAL_MspInit+0x4c>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	4a0f      	ldr	r2, [pc, #60]	; (800265c <HAL_MspInit+0x4c>)
 8002620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002624:	6453      	str	r3, [r2, #68]	; 0x44
 8002626:	4b0d      	ldr	r3, [pc, #52]	; (800265c <HAL_MspInit+0x4c>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262e:	607b      	str	r3, [r7, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	603b      	str	r3, [r7, #0]
 8002636:	4b09      	ldr	r3, [pc, #36]	; (800265c <HAL_MspInit+0x4c>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	4a08      	ldr	r2, [pc, #32]	; (800265c <HAL_MspInit+0x4c>)
 800263c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002640:	6413      	str	r3, [r2, #64]	; 0x40
 8002642:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_MspInit+0x4c>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800264e:	2007      	movs	r0, #7
 8002650:	f000 fab0 	bl	8002bb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40023800 	.word	0x40023800

08002660 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08a      	sub	sp, #40	; 0x28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a19      	ldr	r2, [pc, #100]	; (80026e4 <HAL_I2C_MspInit+0x84>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d12b      	bne.n	80026da <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <HAL_I2C_MspInit+0x88>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4a17      	ldr	r2, [pc, #92]	; (80026e8 <HAL_I2C_MspInit+0x88>)
 800268c:	f043 0302 	orr.w	r3, r3, #2
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <HAL_I2C_MspInit+0x88>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800269e:	23c0      	movs	r3, #192	; 0xc0
 80026a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026a2:	2312      	movs	r3, #18
 80026a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026aa:	2303      	movs	r3, #3
 80026ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026ae:	2304      	movs	r3, #4
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	4619      	mov	r1, r3
 80026b8:	480c      	ldr	r0, [pc, #48]	; (80026ec <HAL_I2C_MspInit+0x8c>)
 80026ba:	f000 faaf 	bl	8002c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <HAL_I2C_MspInit+0x88>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	4a08      	ldr	r2, [pc, #32]	; (80026e8 <HAL_I2C_MspInit+0x88>)
 80026c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026cc:	6413      	str	r3, [r2, #64]	; 0x40
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_I2C_MspInit+0x88>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026da:	bf00      	nop
 80026dc:	3728      	adds	r7, #40	; 0x28
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40005400 	.word	0x40005400
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40020400 	.word	0x40020400

080026f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a15      	ldr	r2, [pc, #84]	; (8002754 <HAL_TIM_Base_MspInit+0x64>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d10e      	bne.n	8002720 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	4b14      	ldr	r3, [pc, #80]	; (8002758 <HAL_TIM_Base_MspInit+0x68>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	4a13      	ldr	r2, [pc, #76]	; (8002758 <HAL_TIM_Base_MspInit+0x68>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6453      	str	r3, [r2, #68]	; 0x44
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <HAL_TIM_Base_MspInit+0x68>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800271e:	e012      	b.n	8002746 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0d      	ldr	r2, [pc, #52]	; (800275c <HAL_TIM_Base_MspInit+0x6c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d10d      	bne.n	8002746 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_TIM_Base_MspInit+0x68>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a09      	ldr	r2, [pc, #36]	; (8002758 <HAL_TIM_Base_MspInit+0x68>)
 8002734:	f043 0302 	orr.w	r3, r3, #2
 8002738:	6413      	str	r3, [r2, #64]	; 0x40
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <HAL_TIM_Base_MspInit+0x68>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]
}
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40010000 	.word	0x40010000
 8002758:	40023800 	.word	0x40023800
 800275c:	40000400 	.word	0x40000400

08002760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08c      	sub	sp, #48	; 0x30
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 031c 	add.w	r3, r7, #28
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a32      	ldr	r2, [pc, #200]	; (8002848 <HAL_UART_MspInit+0xe8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d12d      	bne.n	80027de <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	4b31      	ldr	r3, [pc, #196]	; (800284c <HAL_UART_MspInit+0xec>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	4a30      	ldr	r2, [pc, #192]	; (800284c <HAL_UART_MspInit+0xec>)
 800278c:	f043 0310 	orr.w	r3, r3, #16
 8002790:	6453      	str	r3, [r2, #68]	; 0x44
 8002792:	4b2e      	ldr	r3, [pc, #184]	; (800284c <HAL_UART_MspInit+0xec>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	61bb      	str	r3, [r7, #24]
 800279c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	4b2a      	ldr	r3, [pc, #168]	; (800284c <HAL_UART_MspInit+0xec>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a29      	ldr	r2, [pc, #164]	; (800284c <HAL_UART_MspInit+0xec>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b27      	ldr	r3, [pc, #156]	; (800284c <HAL_UART_MspInit+0xec>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c0:	2302      	movs	r3, #2
 80027c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c8:	2303      	movs	r3, #3
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027cc:	2307      	movs	r3, #7
 80027ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d0:	f107 031c 	add.w	r3, r7, #28
 80027d4:	4619      	mov	r1, r3
 80027d6:	481e      	ldr	r0, [pc, #120]	; (8002850 <HAL_UART_MspInit+0xf0>)
 80027d8:	f000 fa20 	bl	8002c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027dc:	e030      	b.n	8002840 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1c      	ldr	r2, [pc, #112]	; (8002854 <HAL_UART_MspInit+0xf4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d12b      	bne.n	8002840 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027e8:	2300      	movs	r3, #0
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	4b17      	ldr	r3, [pc, #92]	; (800284c <HAL_UART_MspInit+0xec>)
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	4a16      	ldr	r2, [pc, #88]	; (800284c <HAL_UART_MspInit+0xec>)
 80027f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f6:	6413      	str	r3, [r2, #64]	; 0x40
 80027f8:	4b14      	ldr	r3, [pc, #80]	; (800284c <HAL_UART_MspInit+0xec>)
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	4b10      	ldr	r3, [pc, #64]	; (800284c <HAL_UART_MspInit+0xec>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	4a0f      	ldr	r2, [pc, #60]	; (800284c <HAL_UART_MspInit+0xec>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6313      	str	r3, [r2, #48]	; 0x30
 8002814:	4b0d      	ldr	r3, [pc, #52]	; (800284c <HAL_UART_MspInit+0xec>)
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002820:	230c      	movs	r3, #12
 8002822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282c:	2303      	movs	r3, #3
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002830:	2307      	movs	r3, #7
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002834:	f107 031c 	add.w	r3, r7, #28
 8002838:	4619      	mov	r1, r3
 800283a:	4805      	ldr	r0, [pc, #20]	; (8002850 <HAL_UART_MspInit+0xf0>)
 800283c:	f000 f9ee 	bl	8002c1c <HAL_GPIO_Init>
}
 8002840:	bf00      	nop
 8002842:	3730      	adds	r7, #48	; 0x30
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40011000 	.word	0x40011000
 800284c:	40023800 	.word	0x40023800
 8002850:	40020000 	.word	0x40020000
 8002854:	40004400 	.word	0x40004400

08002858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800285c:	e7fe      	b.n	800285c <NMI_Handler+0x4>

0800285e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800285e:	b480      	push	{r7}
 8002860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002862:	e7fe      	b.n	8002862 <HardFault_Handler+0x4>

08002864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002868:	e7fe      	b.n	8002868 <MemManage_Handler+0x4>

0800286a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800286e:	e7fe      	b.n	800286e <BusFault_Handler+0x4>

08002870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002874:	e7fe      	b.n	8002874 <UsageFault_Handler+0x4>

08002876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002892:	b480      	push	{r7}
 8002894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028a4:	f000 f890 	bl	80029c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028a8:	bf00      	nop
 80028aa:	bd80      	pop	{r7, pc}

080028ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <SystemInit+0x20>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b6:	4a05      	ldr	r2, [pc, #20]	; (80028cc <SystemInit+0x20>)
 80028b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80028d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002908 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028d4:	480d      	ldr	r0, [pc, #52]	; (800290c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028d6:	490e      	ldr	r1, [pc, #56]	; (8002910 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028d8:	4a0e      	ldr	r2, [pc, #56]	; (8002914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028dc:	e002      	b.n	80028e4 <LoopCopyDataInit>

080028de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e2:	3304      	adds	r3, #4

080028e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028e8:	d3f9      	bcc.n	80028de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ea:	4a0b      	ldr	r2, [pc, #44]	; (8002918 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028ec:	4c0b      	ldr	r4, [pc, #44]	; (800291c <LoopFillZerobss+0x26>)
  movs r3, #0
 80028ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f0:	e001      	b.n	80028f6 <LoopFillZerobss>

080028f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f4:	3204      	adds	r2, #4

080028f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028f8:	d3fb      	bcc.n	80028f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028fa:	f7ff ffd7 	bl	80028ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028fe:	f002 faf3 	bl	8004ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002902:	f7ff faad 	bl	8001e60 <main>
  bx  lr    
 8002906:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800290c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002910:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002914:	08005d00 	.word	0x08005d00
  ldr r2, =_sbss
 8002918:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800291c:	2000061c 	.word	0x2000061c

08002920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002920:	e7fe      	b.n	8002920 <ADC_IRQHandler>
	...

08002924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002928:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <HAL_Init+0x40>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a0d      	ldr	r2, [pc, #52]	; (8002964 <HAL_Init+0x40>)
 800292e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_Init+0x40>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <HAL_Init+0x40>)
 800293a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800293e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <HAL_Init+0x40>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a07      	ldr	r2, [pc, #28]	; (8002964 <HAL_Init+0x40>)
 8002946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800294c:	2003      	movs	r0, #3
 800294e:	f000 f931 	bl	8002bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002952:	2000      	movs	r0, #0
 8002954:	f000 f808 	bl	8002968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002958:	f7ff fe5a 	bl	8002610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40023c00 	.word	0x40023c00

08002968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_InitTick+0x54>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <HAL_InitTick+0x58>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	4619      	mov	r1, r3
 800297a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800297e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	4618      	mov	r0, r3
 8002988:	f000 f93b 	bl	8002c02 <HAL_SYSTICK_Config>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e00e      	b.n	80029b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b0f      	cmp	r3, #15
 800299a:	d80a      	bhi.n	80029b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800299c:	2200      	movs	r2, #0
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	f04f 30ff 	mov.w	r0, #4294967295
 80029a4:	f000 f911 	bl	8002bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029a8:	4a06      	ldr	r2, [pc, #24]	; (80029c4 <HAL_InitTick+0x5c>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e000      	b.n	80029b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20000008 	.word	0x20000008
 80029c0:	20000010 	.word	0x20000010
 80029c4:	2000000c 	.word	0x2000000c

080029c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_IncTick+0x20>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_IncTick+0x24>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4413      	add	r3, r2
 80029d8:	4a04      	ldr	r2, [pc, #16]	; (80029ec <HAL_IncTick+0x24>)
 80029da:	6013      	str	r3, [r2, #0]
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20000010 	.word	0x20000010
 80029ec:	20000618 	.word	0x20000618

080029f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return uwTick;
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <HAL_GetTick+0x14>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000618 	.word	0x20000618

08002a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a10:	f7ff ffee 	bl	80029f0 <HAL_GetTick>
 8002a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a20:	d005      	beq.n	8002a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a22:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <HAL_Delay+0x44>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a2e:	bf00      	nop
 8002a30:	f7ff ffde 	bl	80029f0 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d8f7      	bhi.n	8002a30 <HAL_Delay+0x28>
  {
  }
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000010 	.word	0x20000010

08002a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <__NVIC_SetPriorityGrouping+0x44>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a82:	4a04      	ldr	r2, [pc, #16]	; (8002a94 <__NVIC_SetPriorityGrouping+0x44>)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	60d3      	str	r3, [r2, #12]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a9c:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	f003 0307 	and.w	r3, r3, #7
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	6039      	str	r1, [r7, #0]
 8002abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	db0a      	blt.n	8002ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	490c      	ldr	r1, [pc, #48]	; (8002b00 <__NVIC_SetPriority+0x4c>)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	0112      	lsls	r2, r2, #4
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002adc:	e00a      	b.n	8002af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4908      	ldr	r1, [pc, #32]	; (8002b04 <__NVIC_SetPriority+0x50>)
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	3b04      	subs	r3, #4
 8002aec:	0112      	lsls	r2, r2, #4
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	440b      	add	r3, r1
 8002af2:	761a      	strb	r2, [r3, #24]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000e100 	.word	0xe000e100
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b089      	sub	sp, #36	; 0x24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f1c3 0307 	rsb	r3, r3, #7
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	bf28      	it	cs
 8002b26:	2304      	movcs	r3, #4
 8002b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	2b06      	cmp	r3, #6
 8002b30:	d902      	bls.n	8002b38 <NVIC_EncodePriority+0x30>
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3b03      	subs	r3, #3
 8002b36:	e000      	b.n	8002b3a <NVIC_EncodePriority+0x32>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43da      	mvns	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b50:	f04f 31ff 	mov.w	r1, #4294967295
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5a:	43d9      	mvns	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b60:	4313      	orrs	r3, r2
         );
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3724      	adds	r7, #36	; 0x24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b80:	d301      	bcc.n	8002b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b82:	2301      	movs	r3, #1
 8002b84:	e00f      	b.n	8002ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b86:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <SysTick_Config+0x40>)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b8e:	210f      	movs	r1, #15
 8002b90:	f04f 30ff 	mov.w	r0, #4294967295
 8002b94:	f7ff ff8e 	bl	8002ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <SysTick_Config+0x40>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b9e:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <SysTick_Config+0x40>)
 8002ba0:	2207      	movs	r2, #7
 8002ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	e000e010 	.word	0xe000e010

08002bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff47 	bl	8002a50 <__NVIC_SetPriorityGrouping>
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b086      	sub	sp, #24
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bdc:	f7ff ff5c 	bl	8002a98 <__NVIC_GetPriorityGrouping>
 8002be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	6978      	ldr	r0, [r7, #20]
 8002be8:	f7ff ff8e 	bl	8002b08 <NVIC_EncodePriority>
 8002bec:	4602      	mov	r2, r0
 8002bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff5d 	bl	8002ab4 <__NVIC_SetPriority>
}
 8002bfa:	bf00      	nop
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff ffb0 	bl	8002b70 <SysTick_Config>
 8002c10:	4603      	mov	r3, r0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b089      	sub	sp, #36	; 0x24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	e159      	b.n	8002eec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c38:	2201      	movs	r2, #1
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	f040 8148 	bne.w	8002ee6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d005      	beq.n	8002c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d130      	bne.n	8002cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	2203      	movs	r2, #3
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	f003 0201 	and.w	r2, r3, #1
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d017      	beq.n	8002d0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d123      	bne.n	8002d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	08da      	lsrs	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3208      	adds	r2, #8
 8002d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	220f      	movs	r2, #15
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	08da      	lsrs	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3208      	adds	r2, #8
 8002d5a:	69b9      	ldr	r1, [r7, #24]
 8002d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 0203 	and.w	r2, r3, #3
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 80a2 	beq.w	8002ee6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	4b57      	ldr	r3, [pc, #348]	; (8002f04 <HAL_GPIO_Init+0x2e8>)
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	4a56      	ldr	r2, [pc, #344]	; (8002f04 <HAL_GPIO_Init+0x2e8>)
 8002dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db0:	6453      	str	r3, [r2, #68]	; 0x44
 8002db2:	4b54      	ldr	r3, [pc, #336]	; (8002f04 <HAL_GPIO_Init+0x2e8>)
 8002db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dbe:	4a52      	ldr	r2, [pc, #328]	; (8002f08 <HAL_GPIO_Init+0x2ec>)
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	220f      	movs	r2, #15
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a49      	ldr	r2, [pc, #292]	; (8002f0c <HAL_GPIO_Init+0x2f0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d019      	beq.n	8002e1e <HAL_GPIO_Init+0x202>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a48      	ldr	r2, [pc, #288]	; (8002f10 <HAL_GPIO_Init+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d013      	beq.n	8002e1a <HAL_GPIO_Init+0x1fe>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a47      	ldr	r2, [pc, #284]	; (8002f14 <HAL_GPIO_Init+0x2f8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00d      	beq.n	8002e16 <HAL_GPIO_Init+0x1fa>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a46      	ldr	r2, [pc, #280]	; (8002f18 <HAL_GPIO_Init+0x2fc>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d007      	beq.n	8002e12 <HAL_GPIO_Init+0x1f6>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a45      	ldr	r2, [pc, #276]	; (8002f1c <HAL_GPIO_Init+0x300>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d101      	bne.n	8002e0e <HAL_GPIO_Init+0x1f2>
 8002e0a:	2304      	movs	r3, #4
 8002e0c:	e008      	b.n	8002e20 <HAL_GPIO_Init+0x204>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	e006      	b.n	8002e20 <HAL_GPIO_Init+0x204>
 8002e12:	2303      	movs	r3, #3
 8002e14:	e004      	b.n	8002e20 <HAL_GPIO_Init+0x204>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e002      	b.n	8002e20 <HAL_GPIO_Init+0x204>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <HAL_GPIO_Init+0x204>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	69fa      	ldr	r2, [r7, #28]
 8002e22:	f002 0203 	and.w	r2, r2, #3
 8002e26:	0092      	lsls	r2, r2, #2
 8002e28:	4093      	lsls	r3, r2
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e30:	4935      	ldr	r1, [pc, #212]	; (8002f08 <HAL_GPIO_Init+0x2ec>)
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	089b      	lsrs	r3, r3, #2
 8002e36:	3302      	adds	r3, #2
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e3e:	4b38      	ldr	r3, [pc, #224]	; (8002f20 <HAL_GPIO_Init+0x304>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	43db      	mvns	r3, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e62:	4a2f      	ldr	r2, [pc, #188]	; (8002f20 <HAL_GPIO_Init+0x304>)
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e68:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <HAL_GPIO_Init+0x304>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e8c:	4a24      	ldr	r2, [pc, #144]	; (8002f20 <HAL_GPIO_Init+0x304>)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e92:	4b23      	ldr	r3, [pc, #140]	; (8002f20 <HAL_GPIO_Init+0x304>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eb6:	4a1a      	ldr	r2, [pc, #104]	; (8002f20 <HAL_GPIO_Init+0x304>)
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ebc:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <HAL_GPIO_Init+0x304>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ee0:	4a0f      	ldr	r2, [pc, #60]	; (8002f20 <HAL_GPIO_Init+0x304>)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	61fb      	str	r3, [r7, #28]
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	2b0f      	cmp	r3, #15
 8002ef0:	f67f aea2 	bls.w	8002c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	bf00      	nop
 8002ef8:	3724      	adds	r7, #36	; 0x24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40013800 	.word	0x40013800
 8002f0c:	40020000 	.word	0x40020000
 8002f10:	40020400 	.word	0x40020400
 8002f14:	40020800 	.word	0x40020800
 8002f18:	40020c00 	.word	0x40020c00
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40013c00 	.word	0x40013c00

08002f24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	887b      	ldrh	r3, [r7, #2]
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
 8002f40:	e001      	b.n	8002f46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f42:	2300      	movs	r3, #0
 8002f44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	807b      	strh	r3, [r7, #2]
 8002f60:	4613      	mov	r3, r2
 8002f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f64:	787b      	ldrb	r3, [r7, #1]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f6a:	887a      	ldrh	r2, [r7, #2]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f70:	e003      	b.n	8002f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f72:	887b      	ldrh	r3, [r7, #2]
 8002f74:	041a      	lsls	r2, r3, #16
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	619a      	str	r2, [r3, #24]
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e12b      	b.n	80031f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff fb56 	bl	8002660 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2224      	movs	r2, #36	; 0x24
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0201 	bic.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fec:	f001 f898 	bl	8004120 <HAL_RCC_GetPCLK1Freq>
 8002ff0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4a81      	ldr	r2, [pc, #516]	; (80031fc <HAL_I2C_Init+0x274>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d807      	bhi.n	800300c <HAL_I2C_Init+0x84>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4a80      	ldr	r2, [pc, #512]	; (8003200 <HAL_I2C_Init+0x278>)
 8003000:	4293      	cmp	r3, r2
 8003002:	bf94      	ite	ls
 8003004:	2301      	movls	r3, #1
 8003006:	2300      	movhi	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	e006      	b.n	800301a <HAL_I2C_Init+0x92>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a7d      	ldr	r2, [pc, #500]	; (8003204 <HAL_I2C_Init+0x27c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	bf94      	ite	ls
 8003014:	2301      	movls	r3, #1
 8003016:	2300      	movhi	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e0e7      	b.n	80031f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4a78      	ldr	r2, [pc, #480]	; (8003208 <HAL_I2C_Init+0x280>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	0c9b      	lsrs	r3, r3, #18
 800302c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	430a      	orrs	r2, r1
 8003040:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4a6a      	ldr	r2, [pc, #424]	; (80031fc <HAL_I2C_Init+0x274>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d802      	bhi.n	800305c <HAL_I2C_Init+0xd4>
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	3301      	adds	r3, #1
 800305a:	e009      	b.n	8003070 <HAL_I2C_Init+0xe8>
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003062:	fb02 f303 	mul.w	r3, r2, r3
 8003066:	4a69      	ldr	r2, [pc, #420]	; (800320c <HAL_I2C_Init+0x284>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	099b      	lsrs	r3, r3, #6
 800306e:	3301      	adds	r3, #1
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	430b      	orrs	r3, r1
 8003076:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003082:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	495c      	ldr	r1, [pc, #368]	; (80031fc <HAL_I2C_Init+0x274>)
 800308c:	428b      	cmp	r3, r1
 800308e:	d819      	bhi.n	80030c4 <HAL_I2C_Init+0x13c>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1e59      	subs	r1, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	fbb1 f3f3 	udiv	r3, r1, r3
 800309e:	1c59      	adds	r1, r3, #1
 80030a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030a4:	400b      	ands	r3, r1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <HAL_I2C_Init+0x138>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1e59      	subs	r1, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030b8:	3301      	adds	r3, #1
 80030ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030be:	e051      	b.n	8003164 <HAL_I2C_Init+0x1dc>
 80030c0:	2304      	movs	r3, #4
 80030c2:	e04f      	b.n	8003164 <HAL_I2C_Init+0x1dc>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d111      	bne.n	80030f0 <HAL_I2C_Init+0x168>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1e58      	subs	r0, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6859      	ldr	r1, [r3, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	440b      	add	r3, r1
 80030da:	fbb0 f3f3 	udiv	r3, r0, r3
 80030de:	3301      	adds	r3, #1
 80030e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf0c      	ite	eq
 80030e8:	2301      	moveq	r3, #1
 80030ea:	2300      	movne	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	e012      	b.n	8003116 <HAL_I2C_Init+0x18e>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	1e58      	subs	r0, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6859      	ldr	r1, [r3, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	0099      	lsls	r1, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	fbb0 f3f3 	udiv	r3, r0, r3
 8003106:	3301      	adds	r3, #1
 8003108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_I2C_Init+0x196>
 800311a:	2301      	movs	r3, #1
 800311c:	e022      	b.n	8003164 <HAL_I2C_Init+0x1dc>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10e      	bne.n	8003144 <HAL_I2C_Init+0x1bc>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1e58      	subs	r0, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6859      	ldr	r1, [r3, #4]
 800312e:	460b      	mov	r3, r1
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	440b      	add	r3, r1
 8003134:	fbb0 f3f3 	udiv	r3, r0, r3
 8003138:	3301      	adds	r3, #1
 800313a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800313e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003142:	e00f      	b.n	8003164 <HAL_I2C_Init+0x1dc>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1e58      	subs	r0, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	0099      	lsls	r1, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	fbb0 f3f3 	udiv	r3, r0, r3
 800315a:	3301      	adds	r3, #1
 800315c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003160:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	6809      	ldr	r1, [r1, #0]
 8003168:	4313      	orrs	r3, r2
 800316a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69da      	ldr	r2, [r3, #28]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003192:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6911      	ldr	r1, [r2, #16]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	68d2      	ldr	r2, [r2, #12]
 800319e:	4311      	orrs	r1, r2
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	430b      	orrs	r3, r1
 80031a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	000186a0 	.word	0x000186a0
 8003200:	001e847f 	.word	0x001e847f
 8003204:	003d08ff 	.word	0x003d08ff
 8003208:	431bde83 	.word	0x431bde83
 800320c:	10624dd3 	.word	0x10624dd3

08003210 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	4608      	mov	r0, r1
 800321a:	4611      	mov	r1, r2
 800321c:	461a      	mov	r2, r3
 800321e:	4603      	mov	r3, r0
 8003220:	817b      	strh	r3, [r7, #10]
 8003222:	460b      	mov	r3, r1
 8003224:	813b      	strh	r3, [r7, #8]
 8003226:	4613      	mov	r3, r2
 8003228:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800322a:	f7ff fbe1 	bl	80029f0 <HAL_GetTick>
 800322e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b20      	cmp	r3, #32
 800323a:	f040 80d9 	bne.w	80033f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	2319      	movs	r3, #25
 8003244:	2201      	movs	r2, #1
 8003246:	496d      	ldr	r1, [pc, #436]	; (80033fc <HAL_I2C_Mem_Write+0x1ec>)
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 f971 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003254:	2302      	movs	r3, #2
 8003256:	e0cc      	b.n	80033f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_I2C_Mem_Write+0x56>
 8003262:	2302      	movs	r3, #2
 8003264:	e0c5      	b.n	80033f2 <HAL_I2C_Mem_Write+0x1e2>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b01      	cmp	r3, #1
 800327a:	d007      	beq.n	800328c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800329a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2221      	movs	r2, #33	; 0x21
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2240      	movs	r2, #64	; 0x40
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a3a      	ldr	r2, [r7, #32]
 80032b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4a4d      	ldr	r2, [pc, #308]	; (8003400 <HAL_I2C_Mem_Write+0x1f0>)
 80032cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032ce:	88f8      	ldrh	r0, [r7, #6]
 80032d0:	893a      	ldrh	r2, [r7, #8]
 80032d2:	8979      	ldrh	r1, [r7, #10]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	4603      	mov	r3, r0
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 f890 	bl	8003404 <I2C_RequestMemoryWrite>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d052      	beq.n	8003390 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e081      	b.n	80033f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f9f2 	bl	80036dc <I2C_WaitOnTXEFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00d      	beq.n	800331a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	2b04      	cmp	r3, #4
 8003304:	d107      	bne.n	8003316 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003314:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e06b      	b.n	80033f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	781a      	ldrb	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003340:	b29b      	uxth	r3, r3
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b04      	cmp	r3, #4
 8003356:	d11b      	bne.n	8003390 <HAL_I2C_Mem_Write+0x180>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335c:	2b00      	cmp	r3, #0
 800335e:	d017      	beq.n	8003390 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	781a      	ldrb	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1aa      	bne.n	80032ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 f9de 	bl	800375e <I2C_WaitOnBTFFlagUntilTimeout>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00d      	beq.n	80033c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d107      	bne.n	80033c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e016      	b.n	80033f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	e000      	b.n	80033f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80033f0:	2302      	movs	r3, #2
  }
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	00100002 	.word	0x00100002
 8003400:	ffff0000 	.word	0xffff0000

08003404 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af02      	add	r7, sp, #8
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	4608      	mov	r0, r1
 800340e:	4611      	mov	r1, r2
 8003410:	461a      	mov	r2, r3
 8003412:	4603      	mov	r3, r0
 8003414:	817b      	strh	r3, [r7, #10]
 8003416:	460b      	mov	r3, r1
 8003418:	813b      	strh	r3, [r7, #8]
 800341a:	4613      	mov	r3, r2
 800341c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800342c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	2200      	movs	r2, #0
 8003436:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f878 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00d      	beq.n	8003462 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003454:	d103      	bne.n	800345e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800345c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e05f      	b.n	8003522 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003462:	897b      	ldrh	r3, [r7, #10]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003470:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	6a3a      	ldr	r2, [r7, #32]
 8003476:	492d      	ldr	r1, [pc, #180]	; (800352c <I2C_RequestMemoryWrite+0x128>)
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 f8b0 	bl	80035de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e04c      	b.n	8003522 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800349e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a0:	6a39      	ldr	r1, [r7, #32]
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f91a 	bl	80036dc <I2C_WaitOnTXEFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00d      	beq.n	80034ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d107      	bne.n	80034c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e02b      	b.n	8003522 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034ca:	88fb      	ldrh	r3, [r7, #6]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d105      	bne.n	80034dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034d0:	893b      	ldrh	r3, [r7, #8]
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	611a      	str	r2, [r3, #16]
 80034da:	e021      	b.n	8003520 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034dc:	893b      	ldrh	r3, [r7, #8]
 80034de:	0a1b      	lsrs	r3, r3, #8
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ec:	6a39      	ldr	r1, [r7, #32]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f8f4 	bl	80036dc <I2C_WaitOnTXEFlagUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00d      	beq.n	8003516 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d107      	bne.n	8003512 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003510:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e005      	b.n	8003522 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003516:	893b      	ldrh	r3, [r7, #8]
 8003518:	b2da      	uxtb	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	00010002 	.word	0x00010002

08003530 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003540:	e025      	b.n	800358e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d021      	beq.n	800358e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354a:	f7ff fa51 	bl	80029f0 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d302      	bcc.n	8003560 <I2C_WaitOnFlagUntilTimeout+0x30>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d116      	bne.n	800358e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f043 0220 	orr.w	r2, r3, #32
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e023      	b.n	80035d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	0c1b      	lsrs	r3, r3, #16
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	d10d      	bne.n	80035b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	43da      	mvns	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4013      	ands	r3, r2
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bf0c      	ite	eq
 80035aa:	2301      	moveq	r3, #1
 80035ac:	2300      	movne	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	e00c      	b.n	80035ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	43da      	mvns	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4013      	ands	r3, r2
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	bf0c      	ite	eq
 80035c6:	2301      	moveq	r3, #1
 80035c8:	2300      	movne	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d0b6      	beq.n	8003542 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b084      	sub	sp, #16
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035ec:	e051      	b.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fc:	d123      	bne.n	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800360c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003616:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f043 0204 	orr.w	r2, r3, #4
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e046      	b.n	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364c:	d021      	beq.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364e:	f7ff f9cf 	bl	80029f0 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	429a      	cmp	r2, r3
 800365c:	d302      	bcc.n	8003664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d116      	bne.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f043 0220 	orr.w	r2, r3, #32
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e020      	b.n	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	0c1b      	lsrs	r3, r3, #16
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d10c      	bne.n	80036b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	43da      	mvns	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4013      	ands	r3, r2
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bf14      	ite	ne
 80036ae:	2301      	movne	r3, #1
 80036b0:	2300      	moveq	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	e00b      	b.n	80036ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	43da      	mvns	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	4013      	ands	r3, r2
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf14      	ite	ne
 80036c8:	2301      	movne	r3, #1
 80036ca:	2300      	moveq	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d18d      	bne.n	80035ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036e8:	e02d      	b.n	8003746 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f878 	bl	80037e0 <I2C_IsAcknowledgeFailed>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e02d      	b.n	8003756 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d021      	beq.n	8003746 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003702:	f7ff f975 	bl	80029f0 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d116      	bne.n	8003746 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e007      	b.n	8003756 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003750:	2b80      	cmp	r3, #128	; 0x80
 8003752:	d1ca      	bne.n	80036ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800376a:	e02d      	b.n	80037c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f837 	bl	80037e0 <I2C_IsAcknowledgeFailed>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e02d      	b.n	80037d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003782:	d021      	beq.n	80037c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003784:	f7ff f934 	bl	80029f0 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	429a      	cmp	r2, r3
 8003792:	d302      	bcc.n	800379a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d116      	bne.n	80037c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f043 0220 	orr.w	r2, r3, #32
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e007      	b.n	80037d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d1ca      	bne.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f6:	d11b      	bne.n	8003830 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003800:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	f043 0204 	orr.w	r2, r3, #4
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
	...

08003840 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e267      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d075      	beq.n	800394a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800385e:	4b88      	ldr	r3, [pc, #544]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b04      	cmp	r3, #4
 8003868:	d00c      	beq.n	8003884 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800386a:	4b85      	ldr	r3, [pc, #532]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003872:	2b08      	cmp	r3, #8
 8003874:	d112      	bne.n	800389c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003876:	4b82      	ldr	r3, [pc, #520]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003882:	d10b      	bne.n	800389c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003884:	4b7e      	ldr	r3, [pc, #504]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d05b      	beq.n	8003948 <HAL_RCC_OscConfig+0x108>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d157      	bne.n	8003948 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e242      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a4:	d106      	bne.n	80038b4 <HAL_RCC_OscConfig+0x74>
 80038a6:	4b76      	ldr	r3, [pc, #472]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a75      	ldr	r2, [pc, #468]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	e01d      	b.n	80038f0 <HAL_RCC_OscConfig+0xb0>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x98>
 80038be:	4b70      	ldr	r3, [pc, #448]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a6f      	ldr	r2, [pc, #444]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b6d      	ldr	r3, [pc, #436]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a6c      	ldr	r2, [pc, #432]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e00b      	b.n	80038f0 <HAL_RCC_OscConfig+0xb0>
 80038d8:	4b69      	ldr	r3, [pc, #420]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a68      	ldr	r2, [pc, #416]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	4b66      	ldr	r3, [pc, #408]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a65      	ldr	r2, [pc, #404]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d013      	beq.n	8003920 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7ff f87a 	bl	80029f0 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003900:	f7ff f876 	bl	80029f0 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b64      	cmp	r3, #100	; 0x64
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e207      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	4b5b      	ldr	r3, [pc, #364]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0xc0>
 800391e:	e014      	b.n	800394a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7ff f866 	bl	80029f0 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003928:	f7ff f862 	bl	80029f0 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	; 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e1f3      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393a:	4b51      	ldr	r3, [pc, #324]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0xe8>
 8003946:	e000      	b.n	800394a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d063      	beq.n	8003a1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003956:	4b4a      	ldr	r3, [pc, #296]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003962:	4b47      	ldr	r3, [pc, #284]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800396a:	2b08      	cmp	r3, #8
 800396c:	d11c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800396e:	4b44      	ldr	r3, [pc, #272]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d116      	bne.n	80039a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397a:	4b41      	ldr	r3, [pc, #260]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <HAL_RCC_OscConfig+0x152>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d001      	beq.n	8003992 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e1c7      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003992:	4b3b      	ldr	r3, [pc, #236]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4937      	ldr	r1, [pc, #220]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a6:	e03a      	b.n	8003a1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d020      	beq.n	80039f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b0:	4b34      	ldr	r3, [pc, #208]	; (8003a84 <HAL_RCC_OscConfig+0x244>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b6:	f7ff f81b 	bl	80029f0 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039be:	f7ff f817 	bl	80029f0 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e1a8      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d0:	4b2b      	ldr	r3, [pc, #172]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039dc:	4b28      	ldr	r3, [pc, #160]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4925      	ldr	r1, [pc, #148]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	600b      	str	r3, [r1, #0]
 80039f0:	e015      	b.n	8003a1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f2:	4b24      	ldr	r3, [pc, #144]	; (8003a84 <HAL_RCC_OscConfig+0x244>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fe fffa 	bl	80029f0 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a00:	f7fe fff6 	bl	80029f0 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e187      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a12:	4b1b      	ldr	r3, [pc, #108]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d036      	beq.n	8003a98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d016      	beq.n	8003a60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a32:	4b15      	ldr	r3, [pc, #84]	; (8003a88 <HAL_RCC_OscConfig+0x248>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a38:	f7fe ffda 	bl	80029f0 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a40:	f7fe ffd6 	bl	80029f0 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e167      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a52:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x200>
 8003a5e:	e01b      	b.n	8003a98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a60:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <HAL_RCC_OscConfig+0x248>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a66:	f7fe ffc3 	bl	80029f0 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a6c:	e00e      	b.n	8003a8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a6e:	f7fe ffbf 	bl	80029f0 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d907      	bls.n	8003a8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e150      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
 8003a80:	40023800 	.word	0x40023800
 8003a84:	42470000 	.word	0x42470000
 8003a88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8c:	4b88      	ldr	r3, [pc, #544]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1ea      	bne.n	8003a6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8097 	beq.w	8003bd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aaa:	4b81      	ldr	r3, [pc, #516]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10f      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	4b7d      	ldr	r3, [pc, #500]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	4a7c      	ldr	r2, [pc, #496]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac6:	4b7a      	ldr	r3, [pc, #488]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad6:	4b77      	ldr	r3, [pc, #476]	; (8003cb4 <HAL_RCC_OscConfig+0x474>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d118      	bne.n	8003b14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae2:	4b74      	ldr	r3, [pc, #464]	; (8003cb4 <HAL_RCC_OscConfig+0x474>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a73      	ldr	r2, [pc, #460]	; (8003cb4 <HAL_RCC_OscConfig+0x474>)
 8003ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aee:	f7fe ff7f 	bl	80029f0 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af6:	f7fe ff7b 	bl	80029f0 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e10c      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b08:	4b6a      	ldr	r3, [pc, #424]	; (8003cb4 <HAL_RCC_OscConfig+0x474>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d106      	bne.n	8003b2a <HAL_RCC_OscConfig+0x2ea>
 8003b1c:	4b64      	ldr	r3, [pc, #400]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b20:	4a63      	ldr	r2, [pc, #396]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	6713      	str	r3, [r2, #112]	; 0x70
 8003b28:	e01c      	b.n	8003b64 <HAL_RCC_OscConfig+0x324>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b05      	cmp	r3, #5
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x30c>
 8003b32:	4b5f      	ldr	r3, [pc, #380]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b36:	4a5e      	ldr	r2, [pc, #376]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b3e:	4b5c      	ldr	r3, [pc, #368]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b42:	4a5b      	ldr	r2, [pc, #364]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	6713      	str	r3, [r2, #112]	; 0x70
 8003b4a:	e00b      	b.n	8003b64 <HAL_RCC_OscConfig+0x324>
 8003b4c:	4b58      	ldr	r3, [pc, #352]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	4a57      	ldr	r2, [pc, #348]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	6713      	str	r3, [r2, #112]	; 0x70
 8003b58:	4b55      	ldr	r3, [pc, #340]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5c:	4a54      	ldr	r2, [pc, #336]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b5e:	f023 0304 	bic.w	r3, r3, #4
 8003b62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d015      	beq.n	8003b98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6c:	f7fe ff40 	bl	80029f0 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b74:	f7fe ff3c 	bl	80029f0 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e0cb      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8a:	4b49      	ldr	r3, [pc, #292]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0ee      	beq.n	8003b74 <HAL_RCC_OscConfig+0x334>
 8003b96:	e014      	b.n	8003bc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b98:	f7fe ff2a 	bl	80029f0 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba0:	f7fe ff26 	bl	80029f0 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e0b5      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb6:	4b3e      	ldr	r3, [pc, #248]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1ee      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d105      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc8:	4b39      	ldr	r3, [pc, #228]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	4a38      	ldr	r2, [pc, #224]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80a1 	beq.w	8003d20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bde:	4b34      	ldr	r3, [pc, #208]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 030c 	and.w	r3, r3, #12
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d05c      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d141      	bne.n	8003c76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf2:	4b31      	ldr	r3, [pc, #196]	; (8003cb8 <HAL_RCC_OscConfig+0x478>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7fe fefa 	bl	80029f0 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c00:	f7fe fef6 	bl	80029f0 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e087      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c12:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69da      	ldr	r2, [r3, #28]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	019b      	lsls	r3, r3, #6
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	085b      	lsrs	r3, r3, #1
 8003c36:	3b01      	subs	r3, #1
 8003c38:	041b      	lsls	r3, r3, #16
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	061b      	lsls	r3, r3, #24
 8003c42:	491b      	ldr	r1, [pc, #108]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c48:	4b1b      	ldr	r3, [pc, #108]	; (8003cb8 <HAL_RCC_OscConfig+0x478>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4e:	f7fe fecf 	bl	80029f0 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c56:	f7fe fecb 	bl	80029f0 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e05c      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c68:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x416>
 8003c74:	e054      	b.n	8003d20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c76:	4b10      	ldr	r3, [pc, #64]	; (8003cb8 <HAL_RCC_OscConfig+0x478>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7c:	f7fe feb8 	bl	80029f0 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c84:	f7fe feb4 	bl	80029f0 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e045      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c96:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x444>
 8003ca2:	e03d      	b.n	8003d20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d107      	bne.n	8003cbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e038      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	40007000 	.word	0x40007000
 8003cb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cbc:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <HAL_RCC_OscConfig+0x4ec>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d028      	beq.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d121      	bne.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d11a      	bne.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cec:	4013      	ands	r3, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d111      	bne.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	085b      	lsrs	r3, r3, #1
 8003d04:	3b01      	subs	r3, #1
 8003d06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d107      	bne.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40023800 	.word	0x40023800

08003d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0cc      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d44:	4b68      	ldr	r3, [pc, #416]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d90c      	bls.n	8003d6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d52:	4b65      	ldr	r3, [pc, #404]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5a:	4b63      	ldr	r3, [pc, #396]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d001      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0b8      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d020      	beq.n	8003dba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d84:	4b59      	ldr	r3, [pc, #356]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4a58      	ldr	r2, [pc, #352]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d9c:	4b53      	ldr	r3, [pc, #332]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	4a52      	ldr	r2, [pc, #328]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003da6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da8:	4b50      	ldr	r3, [pc, #320]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	494d      	ldr	r1, [pc, #308]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d044      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d107      	bne.n	8003dde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dce:	4b47      	ldr	r3, [pc, #284]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d119      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e07f      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d003      	beq.n	8003dee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d107      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dee:	4b3f      	ldr	r3, [pc, #252]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d109      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e06f      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfe:	4b3b      	ldr	r3, [pc, #236]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e067      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e0e:	4b37      	ldr	r3, [pc, #220]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f023 0203 	bic.w	r2, r3, #3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4934      	ldr	r1, [pc, #208]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e20:	f7fe fde6 	bl	80029f0 <HAL_GetTick>
 8003e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	e00a      	b.n	8003e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e28:	f7fe fde2 	bl	80029f0 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e04f      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3e:	4b2b      	ldr	r3, [pc, #172]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 020c 	and.w	r2, r3, #12
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d1eb      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e50:	4b25      	ldr	r3, [pc, #148]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d20c      	bcs.n	8003e78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5e:	4b22      	ldr	r3, [pc, #136]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e66:	4b20      	ldr	r3, [pc, #128]	; (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d001      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e032      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e84:	4b19      	ldr	r3, [pc, #100]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4916      	ldr	r1, [pc, #88]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ea2:	4b12      	ldr	r3, [pc, #72]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	490e      	ldr	r1, [pc, #56]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eb6:	f000 f821 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	091b      	lsrs	r3, r3, #4
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	490a      	ldr	r1, [pc, #40]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec8:	5ccb      	ldrb	r3, [r1, r3]
 8003eca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ece:	4a09      	ldr	r2, [pc, #36]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ed2:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe fd46 	bl	8002968 <HAL_InitTick>

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40023c00 	.word	0x40023c00
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	08005cd8 	.word	0x08005cd8
 8003ef4:	20000008 	.word	0x20000008
 8003ef8:	2000000c 	.word	0x2000000c

08003efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f00:	b094      	sub	sp, #80	; 0x50
 8003f02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	647b      	str	r3, [r7, #68]	; 0x44
 8003f08:	2300      	movs	r3, #0
 8003f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f14:	4b79      	ldr	r3, [pc, #484]	; (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 030c 	and.w	r3, r3, #12
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d00d      	beq.n	8003f3c <HAL_RCC_GetSysClockFreq+0x40>
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	f200 80e1 	bhi.w	80040e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0x34>
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d003      	beq.n	8003f36 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f2e:	e0db      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f30:	4b73      	ldr	r3, [pc, #460]	; (8004100 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f34:	e0db      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f36:	4b73      	ldr	r3, [pc, #460]	; (8004104 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f3a:	e0d8      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f3c:	4b6f      	ldr	r3, [pc, #444]	; (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f46:	4b6d      	ldr	r3, [pc, #436]	; (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d063      	beq.n	800401a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f52:	4b6a      	ldr	r3, [pc, #424]	; (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	099b      	lsrs	r3, r3, #6
 8003f58:	2200      	movs	r2, #0
 8003f5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f64:	633b      	str	r3, [r7, #48]	; 0x30
 8003f66:	2300      	movs	r3, #0
 8003f68:	637b      	str	r3, [r7, #52]	; 0x34
 8003f6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f6e:	4622      	mov	r2, r4
 8003f70:	462b      	mov	r3, r5
 8003f72:	f04f 0000 	mov.w	r0, #0
 8003f76:	f04f 0100 	mov.w	r1, #0
 8003f7a:	0159      	lsls	r1, r3, #5
 8003f7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f80:	0150      	lsls	r0, r2, #5
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4621      	mov	r1, r4
 8003f88:	1a51      	subs	r1, r2, r1
 8003f8a:	6139      	str	r1, [r7, #16]
 8003f8c:	4629      	mov	r1, r5
 8003f8e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fa0:	4659      	mov	r1, fp
 8003fa2:	018b      	lsls	r3, r1, #6
 8003fa4:	4651      	mov	r1, sl
 8003fa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003faa:	4651      	mov	r1, sl
 8003fac:	018a      	lsls	r2, r1, #6
 8003fae:	4651      	mov	r1, sl
 8003fb0:	ebb2 0801 	subs.w	r8, r2, r1
 8003fb4:	4659      	mov	r1, fp
 8003fb6:	eb63 0901 	sbc.w	r9, r3, r1
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fce:	4690      	mov	r8, r2
 8003fd0:	4699      	mov	r9, r3
 8003fd2:	4623      	mov	r3, r4
 8003fd4:	eb18 0303 	adds.w	r3, r8, r3
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	462b      	mov	r3, r5
 8003fdc:	eb49 0303 	adc.w	r3, r9, r3
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fee:	4629      	mov	r1, r5
 8003ff0:	024b      	lsls	r3, r1, #9
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	024a      	lsls	r2, r1, #9
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4619      	mov	r1, r3
 8004000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004002:	2200      	movs	r2, #0
 8004004:	62bb      	str	r3, [r7, #40]	; 0x28
 8004006:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004008:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800400c:	f7fc fd02 	bl	8000a14 <__aeabi_uldivmod>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4613      	mov	r3, r2
 8004016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004018:	e058      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800401a:	4b38      	ldr	r3, [pc, #224]	; (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	099b      	lsrs	r3, r3, #6
 8004020:	2200      	movs	r2, #0
 8004022:	4618      	mov	r0, r3
 8004024:	4611      	mov	r1, r2
 8004026:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800402a:	623b      	str	r3, [r7, #32]
 800402c:	2300      	movs	r3, #0
 800402e:	627b      	str	r3, [r7, #36]	; 0x24
 8004030:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004034:	4642      	mov	r2, r8
 8004036:	464b      	mov	r3, r9
 8004038:	f04f 0000 	mov.w	r0, #0
 800403c:	f04f 0100 	mov.w	r1, #0
 8004040:	0159      	lsls	r1, r3, #5
 8004042:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004046:	0150      	lsls	r0, r2, #5
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4641      	mov	r1, r8
 800404e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004052:	4649      	mov	r1, r9
 8004054:	eb63 0b01 	sbc.w	fp, r3, r1
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004064:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004068:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800406c:	ebb2 040a 	subs.w	r4, r2, sl
 8004070:	eb63 050b 	sbc.w	r5, r3, fp
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	00eb      	lsls	r3, r5, #3
 800407e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004082:	00e2      	lsls	r2, r4, #3
 8004084:	4614      	mov	r4, r2
 8004086:	461d      	mov	r5, r3
 8004088:	4643      	mov	r3, r8
 800408a:	18e3      	adds	r3, r4, r3
 800408c:	603b      	str	r3, [r7, #0]
 800408e:	464b      	mov	r3, r9
 8004090:	eb45 0303 	adc.w	r3, r5, r3
 8004094:	607b      	str	r3, [r7, #4]
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040a2:	4629      	mov	r1, r5
 80040a4:	028b      	lsls	r3, r1, #10
 80040a6:	4621      	mov	r1, r4
 80040a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040ac:	4621      	mov	r1, r4
 80040ae:	028a      	lsls	r2, r1, #10
 80040b0:	4610      	mov	r0, r2
 80040b2:	4619      	mov	r1, r3
 80040b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040b6:	2200      	movs	r2, #0
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	61fa      	str	r2, [r7, #28]
 80040bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040c0:	f7fc fca8 	bl	8000a14 <__aeabi_uldivmod>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4613      	mov	r3, r2
 80040ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040cc:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	0c1b      	lsrs	r3, r3, #16
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	3301      	adds	r3, #1
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80040dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040e6:	e002      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <HAL_RCC_GetSysClockFreq+0x204>)
 80040ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3750      	adds	r7, #80	; 0x50
 80040f4:	46bd      	mov	sp, r7
 80040f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040fa:	bf00      	nop
 80040fc:	40023800 	.word	0x40023800
 8004100:	00f42400 	.word	0x00f42400
 8004104:	007a1200 	.word	0x007a1200

08004108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800410c:	4b03      	ldr	r3, [pc, #12]	; (800411c <HAL_RCC_GetHCLKFreq+0x14>)
 800410e:	681b      	ldr	r3, [r3, #0]
}
 8004110:	4618      	mov	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20000008 	.word	0x20000008

08004120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004124:	f7ff fff0 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 8004128:	4602      	mov	r2, r0
 800412a:	4b05      	ldr	r3, [pc, #20]	; (8004140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	0a9b      	lsrs	r3, r3, #10
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	4903      	ldr	r1, [pc, #12]	; (8004144 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004136:	5ccb      	ldrb	r3, [r1, r3]
 8004138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800413c:	4618      	mov	r0, r3
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40023800 	.word	0x40023800
 8004144:	08005ce8 	.word	0x08005ce8

08004148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800414c:	f7ff ffdc 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 8004150:	4602      	mov	r2, r0
 8004152:	4b05      	ldr	r3, [pc, #20]	; (8004168 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	0b5b      	lsrs	r3, r3, #13
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	4903      	ldr	r1, [pc, #12]	; (800416c <HAL_RCC_GetPCLK2Freq+0x24>)
 800415e:	5ccb      	ldrb	r3, [r1, r3]
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40023800 	.word	0x40023800
 800416c:	08005ce8 	.word	0x08005ce8

08004170 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e041      	b.n	8004206 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fe faaa 	bl	80026f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	4619      	mov	r1, r3
 80041ae:	4610      	mov	r0, r2
 80041b0:	f000 f950 	bl	8004454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	d001      	beq.n	8004228 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e03c      	b.n	80042a2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1e      	ldr	r2, [pc, #120]	; (80042b0 <HAL_TIM_Base_Start+0xa0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d018      	beq.n	800426c <HAL_TIM_Base_Start+0x5c>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004242:	d013      	beq.n	800426c <HAL_TIM_Base_Start+0x5c>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a1a      	ldr	r2, [pc, #104]	; (80042b4 <HAL_TIM_Base_Start+0xa4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00e      	beq.n	800426c <HAL_TIM_Base_Start+0x5c>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a19      	ldr	r2, [pc, #100]	; (80042b8 <HAL_TIM_Base_Start+0xa8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d009      	beq.n	800426c <HAL_TIM_Base_Start+0x5c>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a17      	ldr	r2, [pc, #92]	; (80042bc <HAL_TIM_Base_Start+0xac>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d004      	beq.n	800426c <HAL_TIM_Base_Start+0x5c>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a16      	ldr	r2, [pc, #88]	; (80042c0 <HAL_TIM_Base_Start+0xb0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d111      	bne.n	8004290 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b06      	cmp	r3, #6
 800427c:	d010      	beq.n	80042a0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0201 	orr.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428e:	e007      	b.n	80042a0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40010000 	.word	0x40010000
 80042b4:	40000400 	.word	0x40000400
 80042b8:	40000800 	.word	0x40000800
 80042bc:	40000c00 	.word	0x40000c00
 80042c0:	40014000 	.word	0x40014000

080042c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_TIM_ConfigClockSource+0x1c>
 80042dc:	2302      	movs	r3, #2
 80042de:	e0b4      	b.n	800444a <HAL_TIM_ConfigClockSource+0x186>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004318:	d03e      	beq.n	8004398 <HAL_TIM_ConfigClockSource+0xd4>
 800431a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800431e:	f200 8087 	bhi.w	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004326:	f000 8086 	beq.w	8004436 <HAL_TIM_ConfigClockSource+0x172>
 800432a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432e:	d87f      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004330:	2b70      	cmp	r3, #112	; 0x70
 8004332:	d01a      	beq.n	800436a <HAL_TIM_ConfigClockSource+0xa6>
 8004334:	2b70      	cmp	r3, #112	; 0x70
 8004336:	d87b      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004338:	2b60      	cmp	r3, #96	; 0x60
 800433a:	d050      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x11a>
 800433c:	2b60      	cmp	r3, #96	; 0x60
 800433e:	d877      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004340:	2b50      	cmp	r3, #80	; 0x50
 8004342:	d03c      	beq.n	80043be <HAL_TIM_ConfigClockSource+0xfa>
 8004344:	2b50      	cmp	r3, #80	; 0x50
 8004346:	d873      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004348:	2b40      	cmp	r3, #64	; 0x40
 800434a:	d058      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0x13a>
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d86f      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004350:	2b30      	cmp	r3, #48	; 0x30
 8004352:	d064      	beq.n	800441e <HAL_TIM_ConfigClockSource+0x15a>
 8004354:	2b30      	cmp	r3, #48	; 0x30
 8004356:	d86b      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004358:	2b20      	cmp	r3, #32
 800435a:	d060      	beq.n	800441e <HAL_TIM_ConfigClockSource+0x15a>
 800435c:	2b20      	cmp	r3, #32
 800435e:	d867      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004360:	2b00      	cmp	r3, #0
 8004362:	d05c      	beq.n	800441e <HAL_TIM_ConfigClockSource+0x15a>
 8004364:	2b10      	cmp	r3, #16
 8004366:	d05a      	beq.n	800441e <HAL_TIM_ConfigClockSource+0x15a>
 8004368:	e062      	b.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6899      	ldr	r1, [r3, #8]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f000 f965 	bl	8004648 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800438c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	609a      	str	r2, [r3, #8]
      break;
 8004396:	e04f      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	6899      	ldr	r1, [r3, #8]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f000 f94e 	bl	8004648 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043ba:	609a      	str	r2, [r3, #8]
      break;
 80043bc:	e03c      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6859      	ldr	r1, [r3, #4]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	461a      	mov	r2, r3
 80043cc:	f000 f8c2 	bl	8004554 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2150      	movs	r1, #80	; 0x50
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 f91b 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 80043dc:	e02c      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6859      	ldr	r1, [r3, #4]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	461a      	mov	r2, r3
 80043ec:	f000 f8e1 	bl	80045b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2160      	movs	r1, #96	; 0x60
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 f90b 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 80043fc:	e01c      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6859      	ldr	r1, [r3, #4]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	461a      	mov	r2, r3
 800440c:	f000 f8a2 	bl	8004554 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2140      	movs	r1, #64	; 0x40
 8004416:	4618      	mov	r0, r3
 8004418:	f000 f8fb 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 800441c:	e00c      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4619      	mov	r1, r3
 8004428:	4610      	mov	r0, r2
 800442a:	f000 f8f2 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 800442e:	e003      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	73fb      	strb	r3, [r7, #15]
      break;
 8004434:	e000      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004436:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004448:	7bfb      	ldrb	r3, [r7, #15]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a34      	ldr	r2, [pc, #208]	; (8004538 <TIM_Base_SetConfig+0xe4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d00f      	beq.n	800448c <TIM_Base_SetConfig+0x38>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004472:	d00b      	beq.n	800448c <TIM_Base_SetConfig+0x38>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a31      	ldr	r2, [pc, #196]	; (800453c <TIM_Base_SetConfig+0xe8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d007      	beq.n	800448c <TIM_Base_SetConfig+0x38>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a30      	ldr	r2, [pc, #192]	; (8004540 <TIM_Base_SetConfig+0xec>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d003      	beq.n	800448c <TIM_Base_SetConfig+0x38>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a2f      	ldr	r2, [pc, #188]	; (8004544 <TIM_Base_SetConfig+0xf0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d108      	bne.n	800449e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a25      	ldr	r2, [pc, #148]	; (8004538 <TIM_Base_SetConfig+0xe4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d01b      	beq.n	80044de <TIM_Base_SetConfig+0x8a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ac:	d017      	beq.n	80044de <TIM_Base_SetConfig+0x8a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a22      	ldr	r2, [pc, #136]	; (800453c <TIM_Base_SetConfig+0xe8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <TIM_Base_SetConfig+0x8a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a21      	ldr	r2, [pc, #132]	; (8004540 <TIM_Base_SetConfig+0xec>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00f      	beq.n	80044de <TIM_Base_SetConfig+0x8a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a20      	ldr	r2, [pc, #128]	; (8004544 <TIM_Base_SetConfig+0xf0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00b      	beq.n	80044de <TIM_Base_SetConfig+0x8a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a1f      	ldr	r2, [pc, #124]	; (8004548 <TIM_Base_SetConfig+0xf4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d007      	beq.n	80044de <TIM_Base_SetConfig+0x8a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a1e      	ldr	r2, [pc, #120]	; (800454c <TIM_Base_SetConfig+0xf8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d003      	beq.n	80044de <TIM_Base_SetConfig+0x8a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a1d      	ldr	r2, [pc, #116]	; (8004550 <TIM_Base_SetConfig+0xfc>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d108      	bne.n	80044f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a08      	ldr	r2, [pc, #32]	; (8004538 <TIM_Base_SetConfig+0xe4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d103      	bne.n	8004524 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	615a      	str	r2, [r3, #20]
}
 800452a:	bf00      	nop
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	40010000 	.word	0x40010000
 800453c:	40000400 	.word	0x40000400
 8004540:	40000800 	.word	0x40000800
 8004544:	40000c00 	.word	0x40000c00
 8004548:	40014000 	.word	0x40014000
 800454c:	40014400 	.word	0x40014400
 8004550:	40014800 	.word	0x40014800

08004554 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f023 0201 	bic.w	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800457e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4313      	orrs	r3, r2
 8004588:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f023 030a 	bic.w	r3, r3, #10
 8004590:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	621a      	str	r2, [r3, #32]
}
 80045a6:	bf00      	nop
 80045a8:	371c      	adds	r7, #28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b087      	sub	sp, #28
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	f023 0210 	bic.w	r2, r3, #16
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	031b      	lsls	r3, r3, #12
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	621a      	str	r2, [r3, #32]
}
 8004606:	bf00      	nop
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004612:	b480      	push	{r7}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004628:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	f043 0307 	orr.w	r3, r3, #7
 8004634:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	609a      	str	r2, [r3, #8]
}
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004662:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	021a      	lsls	r2, r3, #8
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	431a      	orrs	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4313      	orrs	r3, r2
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	609a      	str	r2, [r3, #8]
}
 800467c:	bf00      	nop
 800467e:	371c      	adds	r7, #28
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800469c:	2302      	movs	r3, #2
 800469e:	e050      	b.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1c      	ldr	r2, [pc, #112]	; (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d018      	beq.n	8004716 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ec:	d013      	beq.n	8004716 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a18      	ldr	r2, [pc, #96]	; (8004754 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00e      	beq.n	8004716 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a16      	ldr	r2, [pc, #88]	; (8004758 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d009      	beq.n	8004716 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a15      	ldr	r2, [pc, #84]	; (800475c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d004      	beq.n	8004716 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a13      	ldr	r2, [pc, #76]	; (8004760 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d10c      	bne.n	8004730 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800471c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	4313      	orrs	r3, r2
 8004726:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40010000 	.word	0x40010000
 8004754:	40000400 	.word	0x40000400
 8004758:	40000800 	.word	0x40000800
 800475c:	40000c00 	.word	0x40000c00
 8004760:	40014000 	.word	0x40014000

08004764 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e03f      	b.n	80047f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fd ffe8 	bl	8002760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2224      	movs	r2, #36	; 0x24
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f929 	bl	8004a00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695a      	ldr	r2, [r3, #20]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68da      	ldr	r2, [r3, #12]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b08a      	sub	sp, #40	; 0x28
 8004802:	af02      	add	r7, sp, #8
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b20      	cmp	r3, #32
 800481c:	d17c      	bne.n	8004918 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <HAL_UART_Transmit+0x2c>
 8004824:	88fb      	ldrh	r3, [r7, #6]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e075      	b.n	800491a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_UART_Transmit+0x3e>
 8004838:	2302      	movs	r3, #2
 800483a:	e06e      	b.n	800491a <HAL_UART_Transmit+0x11c>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2221      	movs	r2, #33	; 0x21
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004852:	f7fe f8cd 	bl	80029f0 <HAL_GetTick>
 8004856:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	88fa      	ldrh	r2, [r7, #6]
 800485c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	88fa      	ldrh	r2, [r7, #6]
 8004862:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486c:	d108      	bne.n	8004880 <HAL_UART_Transmit+0x82>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d104      	bne.n	8004880 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004876:	2300      	movs	r3, #0
 8004878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	61bb      	str	r3, [r7, #24]
 800487e:	e003      	b.n	8004888 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004884:	2300      	movs	r3, #0
 8004886:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004890:	e02a      	b.n	80048e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2200      	movs	r2, #0
 800489a:	2180      	movs	r1, #128	; 0x80
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 f840 	bl	8004922 <UART_WaitOnFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e036      	b.n	800491a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10b      	bne.n	80048ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	3302      	adds	r3, #2
 80048c6:	61bb      	str	r3, [r7, #24]
 80048c8:	e007      	b.n	80048da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	781a      	ldrb	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	3301      	adds	r3, #1
 80048d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1cf      	bne.n	8004892 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2200      	movs	r2, #0
 80048fa:	2140      	movs	r1, #64	; 0x40
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f810 	bl	8004922 <UART_WaitOnFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e006      	b.n	800491a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	e000      	b.n	800491a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004918:	2302      	movs	r3, #2
  }
}
 800491a:	4618      	mov	r0, r3
 800491c:	3720      	adds	r7, #32
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b090      	sub	sp, #64	; 0x40
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	603b      	str	r3, [r7, #0]
 800492e:	4613      	mov	r3, r2
 8004930:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004932:	e050      	b.n	80049d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	d04c      	beq.n	80049d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800493c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800493e:	2b00      	cmp	r3, #0
 8004940:	d007      	beq.n	8004952 <UART_WaitOnFlagUntilTimeout+0x30>
 8004942:	f7fe f855 	bl	80029f0 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800494e:	429a      	cmp	r2, r3
 8004950:	d241      	bcs.n	80049d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	330c      	adds	r3, #12
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	330c      	adds	r3, #12
 8004970:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004972:	637a      	str	r2, [r7, #52]	; 0x34
 8004974:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004976:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800497a:	e841 2300 	strex	r3, r2, [r1]
 800497e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1e5      	bne.n	8004952 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3314      	adds	r3, #20
 800498c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	613b      	str	r3, [r7, #16]
   return(result);
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	63bb      	str	r3, [r7, #56]	; 0x38
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3314      	adds	r3, #20
 80049a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049a6:	623a      	str	r2, [r7, #32]
 80049a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	69f9      	ldr	r1, [r7, #28]
 80049ac:	6a3a      	ldr	r2, [r7, #32]
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e5      	bne.n	8004986 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e00f      	b.n	80049f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4013      	ands	r3, r2
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	bf0c      	ite	eq
 80049e6:	2301      	moveq	r3, #1
 80049e8:	2300      	movne	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	461a      	mov	r2, r3
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d09f      	beq.n	8004934 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3740      	adds	r7, #64	; 0x40
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a04:	b0c0      	sub	sp, #256	; 0x100
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1c:	68d9      	ldr	r1, [r3, #12]
 8004a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	ea40 0301 	orr.w	r3, r0, r1
 8004a28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a58:	f021 010c 	bic.w	r1, r1, #12
 8004a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a66:	430b      	orrs	r3, r1
 8004a68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7a:	6999      	ldr	r1, [r3, #24]
 8004a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	ea40 0301 	orr.w	r3, r0, r1
 8004a86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	4b8f      	ldr	r3, [pc, #572]	; (8004ccc <UART_SetConfig+0x2cc>)
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d005      	beq.n	8004aa0 <UART_SetConfig+0xa0>
 8004a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	4b8d      	ldr	r3, [pc, #564]	; (8004cd0 <UART_SetConfig+0x2d0>)
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d104      	bne.n	8004aaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004aa0:	f7ff fb52 	bl	8004148 <HAL_RCC_GetPCLK2Freq>
 8004aa4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004aa8:	e003      	b.n	8004ab2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004aaa:	f7ff fb39 	bl	8004120 <HAL_RCC_GetPCLK1Freq>
 8004aae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004abc:	f040 810c 	bne.w	8004cd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004aca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ace:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ad2:	4622      	mov	r2, r4
 8004ad4:	462b      	mov	r3, r5
 8004ad6:	1891      	adds	r1, r2, r2
 8004ad8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ada:	415b      	adcs	r3, r3
 8004adc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ade:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	eb12 0801 	adds.w	r8, r2, r1
 8004ae8:	4629      	mov	r1, r5
 8004aea:	eb43 0901 	adc.w	r9, r3, r1
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b02:	4690      	mov	r8, r2
 8004b04:	4699      	mov	r9, r3
 8004b06:	4623      	mov	r3, r4
 8004b08:	eb18 0303 	adds.w	r3, r8, r3
 8004b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b10:	462b      	mov	r3, r5
 8004b12:	eb49 0303 	adc.w	r3, r9, r3
 8004b16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b2e:	460b      	mov	r3, r1
 8004b30:	18db      	adds	r3, r3, r3
 8004b32:	653b      	str	r3, [r7, #80]	; 0x50
 8004b34:	4613      	mov	r3, r2
 8004b36:	eb42 0303 	adc.w	r3, r2, r3
 8004b3a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b44:	f7fb ff66 	bl	8000a14 <__aeabi_uldivmod>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4b61      	ldr	r3, [pc, #388]	; (8004cd4 <UART_SetConfig+0x2d4>)
 8004b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	011c      	lsls	r4, r3, #4
 8004b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b68:	4642      	mov	r2, r8
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	1891      	adds	r1, r2, r2
 8004b6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b70:	415b      	adcs	r3, r3
 8004b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b78:	4641      	mov	r1, r8
 8004b7a:	eb12 0a01 	adds.w	sl, r2, r1
 8004b7e:	4649      	mov	r1, r9
 8004b80:	eb43 0b01 	adc.w	fp, r3, r1
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b98:	4692      	mov	sl, r2
 8004b9a:	469b      	mov	fp, r3
 8004b9c:	4643      	mov	r3, r8
 8004b9e:	eb1a 0303 	adds.w	r3, sl, r3
 8004ba2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	eb4b 0303 	adc.w	r3, fp, r3
 8004bac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	18db      	adds	r3, r3, r3
 8004bc8:	643b      	str	r3, [r7, #64]	; 0x40
 8004bca:	4613      	mov	r3, r2
 8004bcc:	eb42 0303 	adc.w	r3, r2, r3
 8004bd0:	647b      	str	r3, [r7, #68]	; 0x44
 8004bd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004bda:	f7fb ff1b 	bl	8000a14 <__aeabi_uldivmod>
 8004bde:	4602      	mov	r2, r0
 8004be0:	460b      	mov	r3, r1
 8004be2:	4611      	mov	r1, r2
 8004be4:	4b3b      	ldr	r3, [pc, #236]	; (8004cd4 <UART_SetConfig+0x2d4>)
 8004be6:	fba3 2301 	umull	r2, r3, r3, r1
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	2264      	movs	r2, #100	; 0x64
 8004bee:	fb02 f303 	mul.w	r3, r2, r3
 8004bf2:	1acb      	subs	r3, r1, r3
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bfa:	4b36      	ldr	r3, [pc, #216]	; (8004cd4 <UART_SetConfig+0x2d4>)
 8004bfc:	fba3 2302 	umull	r2, r3, r3, r2
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c08:	441c      	add	r4, r3
 8004c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c1c:	4642      	mov	r2, r8
 8004c1e:	464b      	mov	r3, r9
 8004c20:	1891      	adds	r1, r2, r2
 8004c22:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c24:	415b      	adcs	r3, r3
 8004c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c2c:	4641      	mov	r1, r8
 8004c2e:	1851      	adds	r1, r2, r1
 8004c30:	6339      	str	r1, [r7, #48]	; 0x30
 8004c32:	4649      	mov	r1, r9
 8004c34:	414b      	adcs	r3, r1
 8004c36:	637b      	str	r3, [r7, #52]	; 0x34
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c44:	4659      	mov	r1, fp
 8004c46:	00cb      	lsls	r3, r1, #3
 8004c48:	4651      	mov	r1, sl
 8004c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c4e:	4651      	mov	r1, sl
 8004c50:	00ca      	lsls	r2, r1, #3
 8004c52:	4610      	mov	r0, r2
 8004c54:	4619      	mov	r1, r3
 8004c56:	4603      	mov	r3, r0
 8004c58:	4642      	mov	r2, r8
 8004c5a:	189b      	adds	r3, r3, r2
 8004c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c60:	464b      	mov	r3, r9
 8004c62:	460a      	mov	r2, r1
 8004c64:	eb42 0303 	adc.w	r3, r2, r3
 8004c68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c80:	460b      	mov	r3, r1
 8004c82:	18db      	adds	r3, r3, r3
 8004c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c86:	4613      	mov	r3, r2
 8004c88:	eb42 0303 	adc.w	r3, r2, r3
 8004c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c96:	f7fb febd 	bl	8000a14 <__aeabi_uldivmod>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <UART_SetConfig+0x2d4>)
 8004ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ca4:	095b      	lsrs	r3, r3, #5
 8004ca6:	2164      	movs	r1, #100	; 0x64
 8004ca8:	fb01 f303 	mul.w	r3, r1, r3
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	3332      	adds	r3, #50	; 0x32
 8004cb2:	4a08      	ldr	r2, [pc, #32]	; (8004cd4 <UART_SetConfig+0x2d4>)
 8004cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb8:	095b      	lsrs	r3, r3, #5
 8004cba:	f003 0207 	and.w	r2, r3, #7
 8004cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4422      	add	r2, r4
 8004cc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cc8:	e105      	b.n	8004ed6 <UART_SetConfig+0x4d6>
 8004cca:	bf00      	nop
 8004ccc:	40011000 	.word	0x40011000
 8004cd0:	40011400 	.word	0x40011400
 8004cd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ce2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ce6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004cea:	4642      	mov	r2, r8
 8004cec:	464b      	mov	r3, r9
 8004cee:	1891      	adds	r1, r2, r2
 8004cf0:	6239      	str	r1, [r7, #32]
 8004cf2:	415b      	adcs	r3, r3
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cfa:	4641      	mov	r1, r8
 8004cfc:	1854      	adds	r4, r2, r1
 8004cfe:	4649      	mov	r1, r9
 8004d00:	eb43 0501 	adc.w	r5, r3, r1
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	00eb      	lsls	r3, r5, #3
 8004d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d12:	00e2      	lsls	r2, r4, #3
 8004d14:	4614      	mov	r4, r2
 8004d16:	461d      	mov	r5, r3
 8004d18:	4643      	mov	r3, r8
 8004d1a:	18e3      	adds	r3, r4, r3
 8004d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d20:	464b      	mov	r3, r9
 8004d22:	eb45 0303 	adc.w	r3, r5, r3
 8004d26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d46:	4629      	mov	r1, r5
 8004d48:	008b      	lsls	r3, r1, #2
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d50:	4621      	mov	r1, r4
 8004d52:	008a      	lsls	r2, r1, #2
 8004d54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d58:	f7fb fe5c 	bl	8000a14 <__aeabi_uldivmod>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4b60      	ldr	r3, [pc, #384]	; (8004ee4 <UART_SetConfig+0x4e4>)
 8004d62:	fba3 2302 	umull	r2, r3, r3, r2
 8004d66:	095b      	lsrs	r3, r3, #5
 8004d68:	011c      	lsls	r4, r3, #4
 8004d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d7c:	4642      	mov	r2, r8
 8004d7e:	464b      	mov	r3, r9
 8004d80:	1891      	adds	r1, r2, r2
 8004d82:	61b9      	str	r1, [r7, #24]
 8004d84:	415b      	adcs	r3, r3
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d8c:	4641      	mov	r1, r8
 8004d8e:	1851      	adds	r1, r2, r1
 8004d90:	6139      	str	r1, [r7, #16]
 8004d92:	4649      	mov	r1, r9
 8004d94:	414b      	adcs	r3, r1
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004da4:	4659      	mov	r1, fp
 8004da6:	00cb      	lsls	r3, r1, #3
 8004da8:	4651      	mov	r1, sl
 8004daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dae:	4651      	mov	r1, sl
 8004db0:	00ca      	lsls	r2, r1, #3
 8004db2:	4610      	mov	r0, r2
 8004db4:	4619      	mov	r1, r3
 8004db6:	4603      	mov	r3, r0
 8004db8:	4642      	mov	r2, r8
 8004dba:	189b      	adds	r3, r3, r2
 8004dbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dc0:	464b      	mov	r3, r9
 8004dc2:	460a      	mov	r2, r1
 8004dc4:	eb42 0303 	adc.w	r3, r2, r3
 8004dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004de4:	4649      	mov	r1, r9
 8004de6:	008b      	lsls	r3, r1, #2
 8004de8:	4641      	mov	r1, r8
 8004dea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dee:	4641      	mov	r1, r8
 8004df0:	008a      	lsls	r2, r1, #2
 8004df2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004df6:	f7fb fe0d 	bl	8000a14 <__aeabi_uldivmod>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4b39      	ldr	r3, [pc, #228]	; (8004ee4 <UART_SetConfig+0x4e4>)
 8004e00:	fba3 1302 	umull	r1, r3, r3, r2
 8004e04:	095b      	lsrs	r3, r3, #5
 8004e06:	2164      	movs	r1, #100	; 0x64
 8004e08:	fb01 f303 	mul.w	r3, r1, r3
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	3332      	adds	r3, #50	; 0x32
 8004e12:	4a34      	ldr	r2, [pc, #208]	; (8004ee4 <UART_SetConfig+0x4e4>)
 8004e14:	fba2 2303 	umull	r2, r3, r2, r3
 8004e18:	095b      	lsrs	r3, r3, #5
 8004e1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e1e:	441c      	add	r4, r3
 8004e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e24:	2200      	movs	r2, #0
 8004e26:	673b      	str	r3, [r7, #112]	; 0x70
 8004e28:	677a      	str	r2, [r7, #116]	; 0x74
 8004e2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e2e:	4642      	mov	r2, r8
 8004e30:	464b      	mov	r3, r9
 8004e32:	1891      	adds	r1, r2, r2
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	415b      	adcs	r3, r3
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e3e:	4641      	mov	r1, r8
 8004e40:	1851      	adds	r1, r2, r1
 8004e42:	6039      	str	r1, [r7, #0]
 8004e44:	4649      	mov	r1, r9
 8004e46:	414b      	adcs	r3, r1
 8004e48:	607b      	str	r3, [r7, #4]
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	f04f 0300 	mov.w	r3, #0
 8004e52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e56:	4659      	mov	r1, fp
 8004e58:	00cb      	lsls	r3, r1, #3
 8004e5a:	4651      	mov	r1, sl
 8004e5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e60:	4651      	mov	r1, sl
 8004e62:	00ca      	lsls	r2, r1, #3
 8004e64:	4610      	mov	r0, r2
 8004e66:	4619      	mov	r1, r3
 8004e68:	4603      	mov	r3, r0
 8004e6a:	4642      	mov	r2, r8
 8004e6c:	189b      	adds	r3, r3, r2
 8004e6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e70:	464b      	mov	r3, r9
 8004e72:	460a      	mov	r2, r1
 8004e74:	eb42 0303 	adc.w	r3, r2, r3
 8004e78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	663b      	str	r3, [r7, #96]	; 0x60
 8004e84:	667a      	str	r2, [r7, #100]	; 0x64
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e92:	4649      	mov	r1, r9
 8004e94:	008b      	lsls	r3, r1, #2
 8004e96:	4641      	mov	r1, r8
 8004e98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e9c:	4641      	mov	r1, r8
 8004e9e:	008a      	lsls	r2, r1, #2
 8004ea0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ea4:	f7fb fdb6 	bl	8000a14 <__aeabi_uldivmod>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4b0d      	ldr	r3, [pc, #52]	; (8004ee4 <UART_SetConfig+0x4e4>)
 8004eae:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	2164      	movs	r1, #100	; 0x64
 8004eb6:	fb01 f303 	mul.w	r3, r1, r3
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	3332      	adds	r3, #50	; 0x32
 8004ec0:	4a08      	ldr	r2, [pc, #32]	; (8004ee4 <UART_SetConfig+0x4e4>)
 8004ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	f003 020f 	and.w	r2, r3, #15
 8004ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4422      	add	r2, r4
 8004ed4:	609a      	str	r2, [r3, #8]
}
 8004ed6:	bf00      	nop
 8004ed8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004edc:	46bd      	mov	sp, r7
 8004ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ee2:	bf00      	nop
 8004ee4:	51eb851f 	.word	0x51eb851f

08004ee8 <__libc_init_array>:
 8004ee8:	b570      	push	{r4, r5, r6, lr}
 8004eea:	4d0d      	ldr	r5, [pc, #52]	; (8004f20 <__libc_init_array+0x38>)
 8004eec:	4c0d      	ldr	r4, [pc, #52]	; (8004f24 <__libc_init_array+0x3c>)
 8004eee:	1b64      	subs	r4, r4, r5
 8004ef0:	10a4      	asrs	r4, r4, #2
 8004ef2:	2600      	movs	r6, #0
 8004ef4:	42a6      	cmp	r6, r4
 8004ef6:	d109      	bne.n	8004f0c <__libc_init_array+0x24>
 8004ef8:	4d0b      	ldr	r5, [pc, #44]	; (8004f28 <__libc_init_array+0x40>)
 8004efa:	4c0c      	ldr	r4, [pc, #48]	; (8004f2c <__libc_init_array+0x44>)
 8004efc:	f000 f820 	bl	8004f40 <_init>
 8004f00:	1b64      	subs	r4, r4, r5
 8004f02:	10a4      	asrs	r4, r4, #2
 8004f04:	2600      	movs	r6, #0
 8004f06:	42a6      	cmp	r6, r4
 8004f08:	d105      	bne.n	8004f16 <__libc_init_array+0x2e>
 8004f0a:	bd70      	pop	{r4, r5, r6, pc}
 8004f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f10:	4798      	blx	r3
 8004f12:	3601      	adds	r6, #1
 8004f14:	e7ee      	b.n	8004ef4 <__libc_init_array+0xc>
 8004f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f1a:	4798      	blx	r3
 8004f1c:	3601      	adds	r6, #1
 8004f1e:	e7f2      	b.n	8004f06 <__libc_init_array+0x1e>
 8004f20:	08005cf8 	.word	0x08005cf8
 8004f24:	08005cf8 	.word	0x08005cf8
 8004f28:	08005cf8 	.word	0x08005cf8
 8004f2c:	08005cfc 	.word	0x08005cfc

08004f30 <memset>:
 8004f30:	4402      	add	r2, r0
 8004f32:	4603      	mov	r3, r0
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d100      	bne.n	8004f3a <memset+0xa>
 8004f38:	4770      	bx	lr
 8004f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f3e:	e7f9      	b.n	8004f34 <memset+0x4>

08004f40 <_init>:
 8004f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f42:	bf00      	nop
 8004f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f46:	bc08      	pop	{r3}
 8004f48:	469e      	mov	lr, r3
 8004f4a:	4770      	bx	lr

08004f4c <_fini>:
 8004f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4e:	bf00      	nop
 8004f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f52:	bc08      	pop	{r3}
 8004f54:	469e      	mov	lr, r3
 8004f56:	4770      	bx	lr
